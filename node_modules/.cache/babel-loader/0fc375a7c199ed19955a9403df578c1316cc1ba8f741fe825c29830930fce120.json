{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst {\n  LogType\n} = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst {\n  countIterable\n} = require(\"../util/IterableHelpers\");\nconst {\n  compareLocations,\n  compareChunksById,\n  compareNumbers,\n  compareIds,\n  concatComparators,\n  compareSelect,\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst {\n  makePathsRelative,\n  parseResource\n} = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\nconst uniqueArray = (items, selector) => {\n  /** @type {Set<I>} */\n  const set = new Set();\n  for (const item of items) {\n    for (const i of selector(item)) {\n      set.add(i);\n    }\n  }\n  return Array.from(set);\n};\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n  return uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\nconst mapObject = (obj, fn) => {\n  const newObj = Object.create(null);\n  for (const key of Object.keys(obj)) {\n    newObj[key] = fn(obj[key], /** @type {keyof T} */key);\n  }\n  return newObj;\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\nconst countWithChildren = (compilation, getItems) => {\n  let count = getItems(compilation, \"\").length;\n  for (const child of compilation.children) {\n    count += countWithChildren(child, (c, type) => getItems(c, `.children[].compilation${type}`));\n  }\n  return count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n  _: (object, error, context, _ref) => {\n    let {\n      requestShortener\n    } = _ref;\n    // TODO webpack 6 disallow strings in the errors/warnings list\n    if (typeof error === \"string\") {\n      object.message = error;\n    } else {\n      if (error.chunk) {\n        object.chunkName = error.chunk.name;\n        object.chunkEntry = error.chunk.hasRuntime();\n        object.chunkInitial = error.chunk.canBeInitial();\n      }\n      if (error.file) {\n        object.file = error.file;\n      }\n      if (error.module) {\n        object.moduleIdentifier = error.module.identifier();\n        object.moduleName = error.module.readableIdentifier(requestShortener);\n      }\n      if (error.loc) {\n        object.loc = formatLocation(error.loc);\n      }\n      object.message = error.message;\n    }\n  },\n  ids: (object, error, _ref2) => {\n    let {\n      compilation: {\n        chunkGraph\n      }\n    } = _ref2;\n    if (typeof error !== \"string\") {\n      if (error.chunk) {\n        object.chunkId = error.chunk.id;\n      }\n      if (error.module) {\n        object.moduleId = chunkGraph.getModuleId(error.module);\n      }\n    }\n  },\n  moduleTrace: (object, error, context, options, factory) => {\n    if (typeof error !== \"string\" && error.module) {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      /** @type {Set<Module>} */\n      const visitedModules = new Set();\n      const moduleTrace = [];\n      let current = error.module;\n      while (current) {\n        if (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n        visitedModules.add(current);\n        const origin = moduleGraph.getIssuer(current);\n        if (!origin) break;\n        moduleTrace.push({\n          origin,\n          module: current\n        });\n        current = origin;\n      }\n      object.moduleTrace = factory.create(`${type}.moduleTrace`, moduleTrace, context);\n    }\n  },\n  errorDetails: (object, error, _ref3, _ref4) => {\n    let {\n      type,\n      compilation,\n      cachedGetErrors,\n      cachedGetWarnings\n    } = _ref3;\n    let {\n      errorDetails\n    } = _ref4;\n    if (typeof error !== \"string\" && (errorDetails === true || type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3)) {\n      object.details = error.details;\n    }\n  },\n  errorStack: (object, error) => {\n    if (typeof error !== \"string\") {\n      object.stack = error.stack;\n    }\n  }\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n  compilation: {\n    _: (object, compilation, context, options) => {\n      if (!context.makePathsRelative) {\n        context.makePathsRelative = makePathsRelative.bindContextCache(compilation.compiler.context, compilation.compiler.root);\n      }\n      if (!context.cachedGetErrors) {\n        const map = new WeakMap();\n        context.cachedGetErrors = compilation => {\n          return map.get(compilation) || (errors => (map.set(compilation, errors), errors))(compilation.getErrors());\n        };\n      }\n      if (!context.cachedGetWarnings) {\n        const map = new WeakMap();\n        context.cachedGetWarnings = compilation => {\n          return map.get(compilation) || (warnings => (map.set(compilation, warnings), warnings))(compilation.getWarnings());\n        };\n      }\n      if (compilation.name) {\n        object.name = compilation.name;\n      }\n      if (compilation.needAdditionalPass) {\n        object.needAdditionalPass = true;\n      }\n      const {\n        logging,\n        loggingDebug,\n        loggingTrace\n      } = options;\n      if (logging || loggingDebug && loggingDebug.length > 0) {\n        const util = require(\"util\");\n        object.logging = {};\n        let acceptedTypes;\n        let collapsedGroups = false;\n        switch (logging) {\n          default:\n            acceptedTypes = new Set();\n            break;\n          case \"error\":\n            acceptedTypes = new Set([LogType.error]);\n            break;\n          case \"warn\":\n            acceptedTypes = new Set([LogType.error, LogType.warn]);\n            break;\n          case \"info\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info]);\n            break;\n          case \"log\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.clear]);\n            break;\n          case \"verbose\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.profile, LogType.profileEnd, LogType.time, LogType.status, LogType.clear]);\n            collapsedGroups = true;\n            break;\n        }\n        const cachedMakePathsRelative = makePathsRelative.bindContextCache(options.context, compilation.compiler.root);\n        let depthInCollapsedGroup = 0;\n        for (const [origin, logEntries] of compilation.logging) {\n          const debugMode = loggingDebug.some(fn => fn(origin));\n          if (logging === false && !debugMode) continue;\n          /** @type {KnownStatsLoggingEntry[]} */\n          const groupStack = [];\n          /** @type {KnownStatsLoggingEntry[]} */\n          const rootList = [];\n          let currentList = rootList;\n          let processedLogEntries = 0;\n          for (const entry of logEntries) {\n            let type = entry.type;\n            if (!debugMode && !acceptedTypes.has(type)) continue;\n\n            // Expand groups in verbose and debug modes\n            if (type === LogType.groupCollapsed && (debugMode || collapsedGroups)) type = LogType.group;\n            if (depthInCollapsedGroup === 0) {\n              processedLogEntries++;\n            }\n            if (type === LogType.groupEnd) {\n              groupStack.pop();\n              if (groupStack.length > 0) {\n                currentList = groupStack[groupStack.length - 1].children;\n              } else {\n                currentList = rootList;\n              }\n              if (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n              continue;\n            }\n            let message = undefined;\n            if (entry.type === LogType.time) {\n              message = `${entry.args[0]}: ${entry.args[1] * 1000 + entry.args[2] / 1000000} ms`;\n            } else if (entry.args && entry.args.length > 0) {\n              message = util.format(entry.args[0], ...entry.args.slice(1));\n            }\n            /** @type {KnownStatsLoggingEntry} */\n            const newEntry = {\n              ...entry,\n              type,\n              message,\n              trace: loggingTrace ? entry.trace : undefined,\n              children: type === LogType.group || type === LogType.groupCollapsed ? [] : undefined\n            };\n            currentList.push(newEntry);\n            if (newEntry.children) {\n              groupStack.push(newEntry);\n              currentList = newEntry.children;\n              if (depthInCollapsedGroup > 0) {\n                depthInCollapsedGroup++;\n              } else if (type === LogType.groupCollapsed) {\n                depthInCollapsedGroup = 1;\n              }\n            }\n          }\n          let name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n          if (name in object.logging) {\n            let i = 1;\n            while (`${name}#${i}` in object.logging) {\n              i++;\n            }\n            name = `${name}#${i}`;\n          }\n          object.logging[name] = {\n            entries: rootList,\n            filteredEntries: logEntries.length - processedLogEntries,\n            debug: debugMode\n          };\n        }\n      }\n    },\n    hash: (object, compilation) => {\n      object.hash = compilation.hash;\n    },\n    version: object => {\n      object.version = require(\"../../package.json\").version;\n    },\n    env: (object, compilation, context, _ref5) => {\n      let {\n        _env\n      } = _ref5;\n      object.env = _env;\n    },\n    timings: (object, compilation) => {\n      object.time = compilation.endTime - compilation.startTime;\n    },\n    builtAt: (object, compilation) => {\n      object.builtAt = compilation.endTime;\n    },\n    publicPath: (object, compilation) => {\n      object.publicPath = compilation.getPath(compilation.outputOptions.publicPath);\n    },\n    outputPath: (object, compilation) => {\n      object.outputPath = compilation.outputOptions.path;\n    },\n    assets: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      /** @type {Map<string, Chunk[]>} */\n      const compilationFileToChunks = new Map();\n      /** @type {Map<string, Chunk[]>} */\n      const compilationAuxiliaryFileToChunks = new Map();\n      for (const chunk of compilation.chunks) {\n        for (const file of chunk.files) {\n          let array = compilationFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n        for (const file of chunk.auxiliaryFiles) {\n          let array = compilationAuxiliaryFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationAuxiliaryFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n      }\n      /** @type {Map<string, PreprocessedAsset>} */\n      const assetMap = new Map();\n      /** @type {Set<PreprocessedAsset>} */\n      const assets = new Set();\n      for (const asset of compilation.getAssets()) {\n        /** @type {PreprocessedAsset} */\n        const item = {\n          ...asset,\n          type: \"asset\",\n          related: undefined\n        };\n        assets.add(item);\n        assetMap.set(asset.name, item);\n      }\n      for (const item of assetMap.values()) {\n        const related = item.info.related;\n        if (!related) continue;\n        for (const type of Object.keys(related)) {\n          const relatedEntry = related[type];\n          const deps = Array.isArray(relatedEntry) ? relatedEntry : [relatedEntry];\n          for (const dep of deps) {\n            const depItem = assetMap.get(dep);\n            if (!depItem) continue;\n            assets.delete(depItem);\n            depItem.type = type;\n            item.related = item.related || [];\n            item.related.push(depItem);\n          }\n        }\n      }\n      object.assetsByChunkName = {};\n      for (const [file, chunks] of compilationFileToChunks) {\n        for (const chunk of chunks) {\n          const name = chunk.name;\n          if (!name) continue;\n          if (!Object.prototype.hasOwnProperty.call(object.assetsByChunkName, name)) {\n            object.assetsByChunkName[name] = [];\n          }\n          object.assetsByChunkName[name].push(file);\n        }\n      }\n      const groupedAssets = factory.create(`${type}.assets`, Array.from(assets), {\n        ...context,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      });\n      const limited = spaceLimited(groupedAssets, options.assetsSpace);\n      object.assets = limited.children;\n      object.filteredAssets = limited.filteredChildren;\n    },\n    chunks: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.chunks = factory.create(`${type}.chunks`, Array.from(compilation.chunks), context);\n    },\n    modules: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.modules);\n      const groupedModules = factory.create(`${type}.modules`, array, context);\n      const limited = spaceLimited(groupedModules, options.modulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    entrypoints: (object, compilation, context, _ref6, factory) => {\n      let {\n        entrypoints,\n        chunkGroups,\n        chunkGroupAuxiliary,\n        chunkGroupChildren\n      } = _ref6;\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.entrypoints, _ref7 => {\n        let [key, value] = _ref7;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n      if (entrypoints === \"auto\" && !chunkGroups) {\n        if (array.length > 5) return;\n        if (!chunkGroupChildren && array.every(_ref8 => {\n          let {\n            chunkGroup\n          } = _ref8;\n          if (chunkGroup.chunks.length !== 1) return false;\n          const chunk = chunkGroup.chunks[0];\n          return chunk.files.size === 1 && (!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0);\n        })) {\n          return;\n        }\n      }\n      object.entrypoints = factory.create(`${type}.entrypoints`, array, context);\n    },\n    chunkGroups: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.namedChunkGroups, _ref9 => {\n        let [key, value] = _ref9;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n      object.namedChunkGroups = factory.create(`${type}.namedChunkGroups`, array, context);\n    },\n    errors: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetErrors\n      } = context;\n      object.errors = factory.create(`${type}.errors`, cachedGetErrors(compilation), context);\n    },\n    errorsCount: (object, compilation, _ref10) => {\n      let {\n        cachedGetErrors\n      } = _ref10;\n      object.errorsCount = countWithChildren(compilation, c => cachedGetErrors(c));\n    },\n    warnings: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warnings = factory.create(`${type}.warnings`, cachedGetWarnings(compilation), context);\n    },\n    warningsCount: (object, compilation, context, _ref11, factory) => {\n      let {\n        warningsFilter\n      } = _ref11;\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warningsCount = countWithChildren(compilation, (c, childType) => {\n        if (!warningsFilter && warningsFilter.length === 0) return cachedGetWarnings(c);\n        return factory.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context).filter(warning => {\n          const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n          return !warningsFilter.some(filter => filter(warning, warningString));\n        });\n      });\n    },\n    errorDetails: (object, compilation, _ref12, _ref13) => {\n      let {\n        cachedGetErrors,\n        cachedGetWarnings\n      } = _ref12;\n      let {\n        errorDetails,\n        errors,\n        warnings\n      } = _ref13;\n      if (errorDetails === \"auto\") {\n        if (warnings) {\n          const warnings = cachedGetWarnings(compilation);\n          object.filteredWarningDetailsCount = warnings.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n        }\n        if (errors) {\n          const errors = cachedGetErrors(compilation);\n          if (errors.length >= 3) {\n            object.filteredErrorDetailsCount = errors.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n          }\n        }\n      }\n    },\n    children: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.children = factory.create(`${type}.children`, compilation.children, context);\n    }\n  },\n  asset: {\n    _: (object, asset, context, options, factory) => {\n      const {\n        compilation\n      } = context;\n      object.type = asset.type;\n      object.name = asset.name;\n      object.size = asset.source.size();\n      object.emitted = compilation.emittedAssets.has(asset.name);\n      object.comparedForEmit = compilation.comparedForEmitAssets.has(asset.name);\n      const cached = !object.emitted && !object.comparedForEmit;\n      object.cached = cached;\n      object.info = asset.info;\n      if (!cached || options.cachedAssets) {\n        Object.assign(object, factory.create(`${context.type}$visible`, asset, context));\n      }\n    }\n  },\n  asset$visible: {\n    _: (object, asset, _ref14) => {\n      let {\n        compilation,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref14;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunkNames = uniqueOrderedArray(chunks, c => c.name ? [c.name] : [], compareIds);\n      object.chunkIdHints = uniqueOrderedArray(chunks, c => Array.from(c.idNameHints), compareIds);\n      object.auxiliaryChunkNames = uniqueOrderedArray(auxiliaryChunks, c => c.name ? [c.name] : [], compareIds);\n      object.auxiliaryChunkIdHints = uniqueOrderedArray(auxiliaryChunks, c => Array.from(c.idNameHints), compareIds);\n      object.filteredRelated = asset.related ? asset.related.length : undefined;\n    },\n    relatedAssets: (object, asset, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.related = factory.create(`${type.slice(0, -8)}.related`, asset.related, context);\n      object.filteredRelated = asset.related ? asset.related.length - object.related.length : undefined;\n    },\n    ids: (object, asset, _ref15) => {\n      let {\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref15;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n      object.auxiliaryChunks = uniqueOrderedArray(auxiliaryChunks, c => c.ids, compareIds);\n    },\n    performance: (object, asset) => {\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n    }\n  },\n  chunkGroup: {\n    _: (object, _ref16, _ref17, _ref18) => {\n      let {\n        name,\n        chunkGroup\n      } = _ref16;\n      let {\n        compilation,\n        compilation: {\n          moduleGraph,\n          chunkGraph\n        }\n      } = _ref17;\n      let {\n        ids,\n        chunkGroupAuxiliary,\n        chunkGroupChildren,\n        chunkGroupMaxAssets\n      } = _ref18;\n      const children = chunkGroupChildren && chunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n      /**\n       * @param {string} name Name\n       * @returns {{ name: string, size: number }} Asset object\n       */\n      const toAsset = name => {\n        const asset = compilation.getAsset(name);\n        return {\n          name,\n          size: asset ? asset.info.size : -1\n        };\n      };\n      /** @type {(total: number, asset: { size: number }) => number} */\n      const sizeReducer = (total, _ref19) => {\n        let {\n          size\n        } = _ref19;\n        return total + size;\n      };\n      const assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n      const auxiliaryAssets = uniqueOrderedArray(chunkGroup.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n      const assetsSize = assets.reduce(sizeReducer, 0);\n      const auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n      /** @type {KnownStatsChunkGroup} */\n      const statsChunkGroup = {\n        name,\n        chunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n        assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n        filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n        assetsSize,\n        auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n        filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length,\n        auxiliaryAssetsSize,\n        children: children ? mapObject(children, groups => groups.map(group => {\n          const assets = uniqueArray(group.chunks, c => c.files).map(toAsset);\n          const auxiliaryAssets = uniqueOrderedArray(group.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n\n          /** @type {KnownStatsChunkGroup} */\n          const childStatsChunkGroup = {\n            name: group.name,\n            chunks: ids ? group.chunks.map(c => c.id) : undefined,\n            assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n            filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n            auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n            filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length\n          };\n          return childStatsChunkGroup;\n        })) : undefined,\n        childAssets: children ? mapObject(children, groups => {\n          /** @type {Set<string>} */\n          const set = new Set();\n          for (const group of groups) {\n            for (const chunk of group.chunks) {\n              for (const asset of chunk.files) {\n                set.add(asset);\n              }\n            }\n          }\n          return Array.from(set);\n        }) : undefined\n      };\n      Object.assign(object, statsChunkGroup);\n    },\n    performance: (object, _ref20) => {\n      let {\n        chunkGroup\n      } = _ref20;\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n    }\n  },\n  module: {\n    _: (object, module, context, options, factory) => {\n      const {\n        compilation,\n        type\n      } = context;\n      const built = compilation.builtModules.has(module);\n      const codeGenerated = compilation.codeGeneratedModules.has(module);\n      const buildTimeExecuted = compilation.buildTimeExecutedModules.has(module);\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        type: \"module\",\n        moduleType: module.type,\n        layer: module.layer,\n        size: module.size(),\n        sizes,\n        built,\n        codeGenerated,\n        buildTimeExecuted,\n        cached: !built && !codeGenerated\n      };\n      Object.assign(object, statsModule);\n      if (built || codeGenerated || options.cachedModules) {\n        Object.assign(object, factory.create(`${type}$visible`, module, context));\n      }\n    }\n  },\n  module$visible: {\n    _: (object, module, context, _ref21, factory) => {\n      let {\n        requestShortener\n      } = _ref21;\n      const {\n        compilation,\n        type,\n        rootModules\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      /** @type {Module[]} */\n      const path = [];\n      const issuer = moduleGraph.getIssuer(module);\n      let current = issuer;\n      while (current) {\n        path.push(current);\n        current = moduleGraph.getIssuer(current);\n      }\n      path.reverse();\n      const profile = moduleGraph.getProfile(module);\n      const errors = module.getErrors();\n      const errorsCount = errors !== undefined ? countIterable(errors) : 0;\n      const warnings = module.getWarnings();\n      const warningsCount = warnings !== undefined ? countIterable(warnings) : 0;\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener),\n        nameForCondition: module.nameForCondition(),\n        index: moduleGraph.getPreOrderIndex(module),\n        preOrderIndex: moduleGraph.getPreOrderIndex(module),\n        index2: moduleGraph.getPostOrderIndex(module),\n        postOrderIndex: moduleGraph.getPostOrderIndex(module),\n        cacheable: module.buildInfo.cacheable,\n        optional: module.isOptional(moduleGraph),\n        orphan: !type.endsWith(\"module.modules[].module$visible\") && compilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n        dependent: rootModules ? !rootModules.has(module) : undefined,\n        issuer: issuer && issuer.identifier(),\n        issuerName: issuer && issuer.readableIdentifier(requestShortener),\n        issuerPath: issuer && factory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n        failed: errorsCount > 0,\n        errors: errorsCount,\n        warnings: warningsCount\n      };\n      Object.assign(object, statsModule);\n      if (profile) {\n        object.profile = factory.create(`${type.slice(0, -8)}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref22) => {\n      let {\n        compilation: {\n          chunkGraph,\n          moduleGraph\n        }\n      } = _ref22;\n      object.id = chunkGraph.getModuleId(module);\n      const issuer = moduleGraph.getIssuer(module);\n      object.issuerId = issuer && chunkGraph.getModuleId(issuer);\n      object.chunks = Array.from(chunkGraph.getOrderedModuleChunksIterable(module, compareChunksById), chunk => chunk.id);\n    },\n    moduleAssets: (object, module) => {\n      object.assets = module.buildInfo.assets ? Object.keys(module.buildInfo.assets) : [];\n    },\n    reasons: (object, module, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      const groupsReasons = factory.create(`${type.slice(0, -8)}.reasons`, Array.from(moduleGraph.getIncomingConnections(module)), context);\n      const limited = spaceLimited(groupsReasons, options.reasonsSpace);\n      object.reasons = limited.children;\n      object.filteredReasons = limited.filteredChildren;\n    },\n    usedExports: (object, module, _ref23) => {\n      let {\n        runtime,\n        compilation: {\n          moduleGraph\n        }\n      } = _ref23;\n      const usedExports = moduleGraph.getUsedExports(module, runtime);\n      if (usedExports === null) {\n        object.usedExports = null;\n      } else if (typeof usedExports === \"boolean\") {\n        object.usedExports = usedExports;\n      } else {\n        object.usedExports = Array.from(usedExports);\n      }\n    },\n    providedExports: (object, module, _ref24) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref24;\n      const providedExports = moduleGraph.getProvidedExports(module);\n      object.providedExports = Array.isArray(providedExports) ? providedExports : null;\n    },\n    optimizationBailout: (object, module, _ref25, _ref26) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref25;\n      let {\n        requestShortener\n      } = _ref26;\n      object.optimizationBailout = moduleGraph.getOptimizationBailout(module).map(item => {\n        if (typeof item === \"function\") return item(requestShortener);\n        return item;\n      });\n    },\n    depth: (object, module, _ref27) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref27;\n      object.depth = moduleGraph.getDepth(module);\n    },\n    nestedModules: (object, module, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const innerModules = /** @type {Module & { modules?: Module[] }} */module.modules;\n      if (Array.isArray(innerModules)) {\n        const groupedModules = factory.create(`${type.slice(0, -8)}.modules`, innerModules, context);\n        const limited = spaceLimited(groupedModules, options.nestedModulesSpace);\n        object.modules = limited.children;\n        object.filteredModules = limited.filteredChildren;\n      }\n    },\n    source: (object, module) => {\n      const originalSource = module.originalSource();\n      if (originalSource) {\n        object.source = originalSource.source();\n      }\n    }\n  },\n  profile: {\n    _: (object, profile) => {\n      /** @type {KnownStatsProfile} */\n      const statsProfile = {\n        total: profile.factory + profile.restoring + profile.integration + profile.building + profile.storing,\n        resolving: profile.factory,\n        restoring: profile.restoring,\n        building: profile.building,\n        integration: profile.integration,\n        storing: profile.storing,\n        additionalResolving: profile.additionalFactories,\n        additionalIntegration: profile.additionalIntegration,\n        // TODO remove this in webpack 6\n        factory: profile.factory,\n        // TODO remove this in webpack 6\n        dependencies: profile.additionalFactories\n      };\n      Object.assign(object, statsProfile);\n    }\n  },\n  moduleIssuer: {\n    _: (object, module, context, _ref28, factory) => {\n      let {\n        requestShortener\n      } = _ref28;\n      const {\n        compilation,\n        type\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      const profile = moduleGraph.getProfile(module);\n      /** @type {KnownStatsModuleIssuer} */\n      const statsModuleIssuer = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener)\n      };\n      Object.assign(object, statsModuleIssuer);\n      if (profile) {\n        object.profile = factory.create(`${type}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref29) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref29;\n      object.id = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleReason: {\n    _: (object, reason, _ref30, _ref31) => {\n      let {\n        runtime\n      } = _ref30;\n      let {\n        requestShortener\n      } = _ref31;\n      const dep = reason.dependency;\n      const moduleDep = dep && dep instanceof ModuleDependency ? dep : undefined;\n      /** @type {KnownStatsModuleReason} */\n      const statsModuleReason = {\n        moduleIdentifier: reason.originModule ? reason.originModule.identifier() : null,\n        module: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        moduleName: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        resolvedModuleIdentifier: reason.resolvedOriginModule ? reason.resolvedOriginModule.identifier() : null,\n        resolvedModule: reason.resolvedOriginModule ? reason.resolvedOriginModule.readableIdentifier(requestShortener) : null,\n        type: reason.dependency ? reason.dependency.type : null,\n        active: reason.isActive(runtime),\n        explanation: reason.explanation,\n        userRequest: moduleDep && moduleDep.userRequest || null\n      };\n      Object.assign(object, statsModuleReason);\n      if (reason.dependency) {\n        const locInfo = formatLocation(reason.dependency.loc);\n        if (locInfo) {\n          object.loc = locInfo;\n        }\n      }\n    },\n    ids: (object, reason, _ref32) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref32;\n      object.moduleId = reason.originModule ? chunkGraph.getModuleId(reason.originModule) : null;\n      object.resolvedModuleId = reason.resolvedOriginModule ? chunkGraph.getModuleId(reason.resolvedOriginModule) : null;\n    }\n  },\n  chunk: {\n    _: (object, chunk, _ref33) => {\n      let {\n        makePathsRelative,\n        compilation: {\n          chunkGraph\n        }\n      } = _ref33;\n      const childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n      /** @type {KnownStatsChunk} */\n      const statsChunk = {\n        rendered: chunk.rendered,\n        initial: chunk.canBeInitial(),\n        entry: chunk.hasRuntime(),\n        recorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n        reason: chunk.chunkReason,\n        size: chunkGraph.getChunkModulesSize(chunk),\n        sizes: chunkGraph.getChunkModulesSizes(chunk),\n        names: chunk.name ? [chunk.name] : [],\n        idHints: Array.from(chunk.idNameHints),\n        runtime: chunk.runtime === undefined ? undefined : typeof chunk.runtime === \"string\" ? [makePathsRelative(chunk.runtime)] : Array.from(chunk.runtime.sort(), makePathsRelative),\n        files: Array.from(chunk.files),\n        auxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n        hash: chunk.renderedHash,\n        childrenByOrder: childIdByOrder\n      };\n      Object.assign(object, statsChunk);\n    },\n    ids: (object, chunk) => {\n      object.id = chunk.id;\n    },\n    chunkRelations: (object, chunk, _ref34) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref34;\n      /** @type {Set<string|number>} */\n      const parents = new Set();\n      /** @type {Set<string|number>} */\n      const children = new Set();\n      /** @type {Set<string|number>} */\n      const siblings = new Set();\n      for (const chunkGroup of chunk.groupsIterable) {\n        for (const parentGroup of chunkGroup.parentsIterable) {\n          for (const chunk of parentGroup.chunks) {\n            parents.add(chunk.id);\n          }\n        }\n        for (const childGroup of chunkGroup.childrenIterable) {\n          for (const chunk of childGroup.chunks) {\n            children.add(chunk.id);\n          }\n        }\n        for (const sibling of chunkGroup.chunks) {\n          if (sibling !== chunk) siblings.add(sibling.id);\n        }\n      }\n      object.siblings = Array.from(siblings).sort(compareIds);\n      object.parents = Array.from(parents).sort(compareIds);\n      object.children = Array.from(children).sort(compareIds);\n    },\n    chunkModules: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      const array = chunkGraph.getChunkModules(chunk);\n      const groupedModules = factory.create(`${type}.modules`, array, {\n        ...context,\n        runtime: chunk.runtime,\n        rootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n      });\n      const limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    chunkOrigins: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      /** @type {Set<string>} */\n      const originsKeySet = new Set();\n      const origins = [];\n      for (const g of chunk.groupsIterable) {\n        origins.push(...g.origins);\n      }\n      const array = origins.filter(origin => {\n        const key = [origin.module ? chunkGraph.getModuleId(origin.module) : undefined, formatLocation(origin.loc), origin.request].join();\n        if (originsKeySet.has(key)) return false;\n        originsKeySet.add(key);\n        return true;\n      });\n      object.origins = factory.create(`${type}.origins`, array, context);\n    }\n  },\n  chunkOrigin: {\n    _: (object, origin, context, _ref35) => {\n      let {\n        requestShortener\n      } = _ref35;\n      /** @type {KnownStatsChunkOrigin} */\n      const statsChunkOrigin = {\n        module: origin.module ? origin.module.identifier() : \"\",\n        moduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n        moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : \"\",\n        loc: formatLocation(origin.loc),\n        request: origin.request\n      };\n      Object.assign(object, statsChunkOrigin);\n    },\n    ids: (object, origin, _ref36) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref36;\n      object.moduleId = origin.module ? chunkGraph.getModuleId(origin.module) : undefined;\n    }\n  },\n  error: EXTRACT_ERROR,\n  warning: EXTRACT_ERROR,\n  moduleTraceItem: {\n    _: (object, _ref37, context, _ref38, factory) => {\n      let {\n        origin,\n        module\n      } = _ref37;\n      let {\n        requestShortener\n      } = _ref38;\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      object.originIdentifier = origin.identifier();\n      object.originName = origin.readableIdentifier(requestShortener);\n      object.moduleIdentifier = module.identifier();\n      object.moduleName = module.readableIdentifier(requestShortener);\n      const dependencies = Array.from(moduleGraph.getIncomingConnections(module)).filter(c => c.resolvedOriginModule === origin && c.dependency).map(c => c.dependency);\n      object.dependencies = factory.create(`${type}.dependencies`, Array.from(new Set(dependencies)), context);\n    },\n    ids: (object, _ref39, _ref40) => {\n      let {\n        origin,\n        module\n      } = _ref39;\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref40;\n      object.originId = chunkGraph.getModuleId(origin);\n      object.moduleId = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleTraceDependency: {\n    _: (object, dependency) => {\n      object.loc = formatLocation(dependency.loc);\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n  \"module.reasons\": {\n    \"!orphanModules\": (reason, _ref41) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref41;\n      if (reason.originModule && chunkGraph.getNumberOfModuleChunks(reason.originModule) === 0) {\n        return false;\n      }\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n  \"compilation.warnings\": {\n    warningsFilter: util.deprecate((warning, context, _ref42) => {\n      let {\n        warningsFilter\n      } = _ref42;\n      const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n      return !warningsFilter.some(filter => filter(warning, warningString));\n    }, \"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\", \"DEP_WEBPACK_STATS_WARNINGS_FILTER\")\n  }\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n  _: (comparators, _ref43) => {\n    let {\n      compilation: {\n        moduleGraph\n      }\n    } = _ref43;\n    comparators.push(compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} depth\n     */\n    m => moduleGraph.getDepth(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} index\n     */\n    m => moduleGraph.getPreOrderIndex(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {string} identifier\n     */\n    m => m.identifier(), compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n  \"compilation.chunks\": {\n    _: comparators => {\n      comparators.push(compareSelect(c => c.id, compareIds));\n    }\n  },\n  \"compilation.modules\": MODULES_SORTER,\n  \"chunk.rootModules\": MODULES_SORTER,\n  \"chunk.modules\": MODULES_SORTER,\n  \"module.modules\": MODULES_SORTER,\n  \"module.reasons\": {\n    _: (comparators, _ref44) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref44;\n      comparators.push(compareSelect(x => x.originModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.dependency, concatComparators(compareSelect(\n      /**\n       * @param {Dependency} x dependency\n       * @returns {DependencyLocation} location\n       */\n      x => x.loc, compareLocations), compareSelect(x => x.type, compareIds))));\n    }\n  },\n  \"chunk.origins\": {\n    _: (comparators, _ref45) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref45;\n      comparators.push(compareSelect(origin => origin.module ? chunkGraph.getModuleId(origin.module) : undefined, compareIds), compareSelect(origin => formatLocation(origin.loc), compareIds), compareSelect(origin => origin.request, compareIds));\n    }\n  }\n};\nconst getItemSize = item => {\n  // Each item takes 1 line\n  // + the size of the children\n  // + 1 extra line when it has children and filteredChildren\n  return !item.children ? 1 : item.filteredChildren ? 2 + getTotalSize(item.children) : 1 + getTotalSize(item.children);\n};\nconst getTotalSize = children => {\n  let size = 0;\n  for (const child of children) {\n    size += getItemSize(child);\n  }\n  return size;\n};\nconst getTotalItems = children => {\n  let count = 0;\n  for (const child of children) {\n    if (!child.children && !child.filteredChildren) {\n      count++;\n    } else {\n      if (child.children) count += getTotalItems(child.children);\n      if (child.filteredChildren) count += child.filteredChildren;\n    }\n  }\n  return count;\n};\nconst collapse = children => {\n  // After collapse each child must take exactly one line\n  const newChildren = [];\n  for (const child of children) {\n    if (child.children) {\n      let filteredChildren = child.filteredChildren || 0;\n      filteredChildren += getTotalItems(child.children);\n      newChildren.push({\n        ...child,\n        children: undefined,\n        filteredChildren\n      });\n    } else {\n      newChildren.push(child);\n    }\n  }\n  return newChildren;\n};\nconst spaceLimited = function (itemsAndGroups, max) {\n  let filteredChildrenLineReserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (max < 1) {\n    return {\n      children: undefined,\n      filteredChildren: getTotalItems(itemsAndGroups)\n    };\n  }\n  /** @type {any[] | undefined} */\n  let children = undefined;\n  /** @type {number | undefined} */\n  let filteredChildren = undefined;\n  // This are the groups, which take 1+ lines each\n  const groups = [];\n  // The sizes of the groups are stored in groupSizes\n  const groupSizes = [];\n  // This are the items, which take 1 line each\n  const items = [];\n  // The total of group sizes\n  let groupsSize = 0;\n  for (const itemOrGroup of itemsAndGroups) {\n    // is item\n    if (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n      items.push(itemOrGroup);\n    } else {\n      groups.push(itemOrGroup);\n      const size = getItemSize(itemOrGroup);\n      groupSizes.push(size);\n      groupsSize += size;\n    }\n  }\n  if (groupsSize + items.length <= max) {\n    // The total size in the current state fits into the max\n    // keep all\n    children = groups.length > 0 ? groups.concat(items) : items;\n  } else if (groups.length === 0) {\n    // slice items to max\n    // inner space marks that lines for filteredChildren already reserved\n    const limit = max - (filteredChildrenLineReserved ? 0 : 1);\n    filteredChildren = items.length - limit;\n    items.length = limit;\n    children = items;\n  } else {\n    // limit is the size when all groups are collapsed\n    const limit = groups.length + (filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n    if (limit < max) {\n      // calculate how much we are over the size limit\n      // this allows to approach the limit faster\n      let oversize;\n      // If each group would take 1 line the total would be below the maximum\n      // collapse some groups, keep items\n      while ((oversize = groupsSize + items.length + (filteredChildren && !filteredChildrenLineReserved ? 1 : 0) - max) > 0) {\n        // Find the maximum group and process only this one\n        const maxGroupSize = Math.max(...groupSizes);\n        if (maxGroupSize < items.length) {\n          filteredChildren = items.length;\n          items.length = 0;\n          continue;\n        }\n        for (let i = 0; i < groups.length; i++) {\n          if (groupSizes[i] === maxGroupSize) {\n            const group = groups[i];\n            // run this algorithm recursively and limit the size of the children to\n            // current size - oversize / number of groups\n            // So it should always end up being smaller\n            const headerSize = group.filteredChildren ? 2 : 1;\n            const limited = spaceLimited(group.children, maxGroupSize -\n            // we should use ceil to always feet in max\n            Math.ceil(oversize / groups.length) -\n            // we substitute size of group head\n            headerSize, headerSize === 2);\n            groups[i] = {\n              ...group,\n              children: limited.children,\n              filteredChildren: limited.filteredChildren ? (group.filteredChildren || 0) + limited.filteredChildren : group.filteredChildren\n            };\n            const newSize = getItemSize(groups[i]);\n            groupsSize -= maxGroupSize - newSize;\n            groupSizes[i] = newSize;\n            break;\n          }\n        }\n      }\n      children = groups.concat(items);\n    } else if (limit === max) {\n      // If we have only enough space to show one line per group and one line for the filtered items\n      // collapse all groups and items\n      children = collapse(groups);\n      filteredChildren = items.length;\n    } else {\n      // If we have no space\n      // collapse complete group\n      filteredChildren = getTotalItems(itemsAndGroups);\n    }\n  }\n  return {\n    children,\n    filteredChildren\n  };\n};\nconst assetGroup = (children, assets) => {\n  let size = 0;\n  for (const asset of children) {\n    size += asset.size;\n  }\n  return {\n    size\n  };\n};\nconst moduleGroup = (children, modules) => {\n  let size = 0;\n  const sizes = {};\n  for (const module of children) {\n    size += module.size;\n    for (const key of Object.keys(module.sizes)) {\n      sizes[key] = (sizes[key] || 0) + module.sizes[key];\n    }\n  }\n  return {\n    size,\n    sizes\n  };\n};\nconst reasonGroup = (children, reasons) => {\n  let active = false;\n  for (const reason of children) {\n    active = active || reason.active;\n  }\n  return {\n    active\n  };\n};\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, exclude) => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, assets) => {\n          return exclude ? {\n            type: \"assets by status\",\n            [name]: !!key,\n            filteredChildren: assets.length,\n            ...assetGroup(children, assets)\n          } : {\n            type: \"assets by status\",\n            [name]: !!key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    const {\n      groupAssetsByEmitStatus,\n      groupAssetsByPath,\n      groupAssetsByExtension\n    } = options;\n    if (groupAssetsByEmitStatus) {\n      groupByFlag(\"emitted\");\n      groupByFlag(\"comparedForEmit\");\n      groupByFlag(\"isOverSizeLimit\");\n    }\n    if (groupAssetsByEmitStatus || !options.cachedAssets) {\n      groupByFlag(\"cached\", !options.cachedAssets);\n    }\n    if (groupAssetsByPath || groupAssetsByExtension) {\n      groupConfigs.push({\n        getKeys: asset => {\n          const extensionMatch = groupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupAssetsByPath) {\n            keys.push(\".\");\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n            name: key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    }\n  },\n  groupAssetsByInfo: (groupConfigs, context, options) => {\n    const groupByAssetInfoFlag = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset.info && asset.info[name] ? [\"1\"] : undefined;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by info\",\n            info: {\n              [name]: !!key\n            },\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByAssetInfoFlag(\"immutable\");\n    groupByAssetInfoFlag(\"development\");\n    groupByAssetInfoFlag(\"hotModuleReplacement\");\n  },\n  groupAssetsByChunk: (groupConfigs, context, options) => {\n    const groupByNames = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name];\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by chunk\",\n            [name]: [key],\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByNames(\"chunkNames\");\n    groupByNames(\"auxiliaryChunkNames\");\n    groupByNames(\"chunkIdHints\");\n    groupByNames(\"auxiliaryChunkIdHints\");\n  },\n  excludeAssets: (groupConfigs, context, _ref46) => {\n    let {\n      excludeAssets\n    } = _ref46;\n    groupConfigs.push({\n      getKeys: asset => {\n        const ident = asset.name;\n        const excluded = excludeAssets.some(fn => fn(ident, asset));\n        if (excluded) return [\"excluded\"];\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, assets) => ({\n        type: \"hidden assets\",\n        filteredChildren: assets.length,\n        ...assetGroup(children, assets)\n      })\n    });\n  }\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, type, exclude) => {\n      groupConfigs.push({\n        getKeys: module => {\n          return module[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type,\n            [name]: !!key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    };\n    const {\n      groupModulesByCacheStatus,\n      groupModulesByLayer,\n      groupModulesByAttributes,\n      groupModulesByType,\n      groupModulesByPath,\n      groupModulesByExtension\n    } = options;\n    if (groupModulesByAttributes) {\n      groupByFlag(\"errors\", \"modules with errors\");\n      groupByFlag(\"warnings\", \"modules with warnings\");\n      groupByFlag(\"assets\", \"modules with assets\");\n      groupByFlag(\"optional\", \"optional modules\");\n    }\n    if (groupModulesByCacheStatus) {\n      groupByFlag(\"cacheable\", \"cacheable modules\");\n      groupByFlag(\"built\", \"built modules\");\n      groupByFlag(\"codeGenerated\", \"code generated modules\");\n    }\n    if (groupModulesByCacheStatus || !options.cachedModules) {\n      groupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n    }\n    if (groupModulesByAttributes || !options.orphanModules) {\n      groupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n    }\n    if (groupModulesByAttributes || !options.dependentModules) {\n      groupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n    }\n    if (groupModulesByType || !options.runtimeModules) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.moduleType) return;\n          if (groupModulesByType) {\n            return [module.moduleType.split(\"/\", 1)[0]];\n          } else if (module.moduleType === \"runtime\") {\n            return [\"runtime\"];\n          }\n        },\n        getOptions: key => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            type: `${key} modules`,\n            moduleType: key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByLayer) {\n      groupConfigs.push({\n        getKeys: module => {\n          return [module.layer];\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type: \"modules by layer\",\n            layer: key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByPath || groupModulesByExtension) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.name) return;\n          const resource = parseResource(module.name.split(\"!\").pop()).path;\n          const dataUrl = /^data:[^,;]+/.exec(resource);\n          if (dataUrl) return [dataUrl[0]];\n          const extensionMatch = groupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupModulesByPath) {\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, modules) => {\n          const isDataUrl = key.startsWith(\"data:\");\n          return {\n            type: isDataUrl ? \"modules by mime type\" : groupModulesByPath ? \"modules by path\" : \"modules by extension\",\n            name: isDataUrl ? key.slice( /* 'data:'.length */5) : key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n  },\n  excludeModules: (groupConfigs, context, _ref47) => {\n    let {\n      excludeModules\n    } = _ref47;\n    groupConfigs.push({\n      getKeys: module => {\n        const name = module.name;\n        if (name) {\n          const excluded = excludeModules.some(fn => fn(name, module, type));\n          if (excluded) return [\"1\"];\n        }\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, modules) => ({\n        type: \"hidden modules\",\n        filteredChildren: children.length,\n        ...moduleGroup(children, modules)\n      })\n    });\n  }\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n  \"compilation.assets\": ASSETS_GROUPERS,\n  \"asset.related\": ASSETS_GROUPERS,\n  \"compilation.modules\": MODULES_GROUPERS(\"module\"),\n  \"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n  \"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n  \"module.modules\": MODULES_GROUPERS(\"nested\"),\n  \"module.reasons\": {\n    groupReasonsByOrigin: groupConfigs => {\n      groupConfigs.push({\n        getKeys: reason => {\n          return [reason.module];\n        },\n        createGroup: (key, children, reasons) => {\n          return {\n            type: \"from origin\",\n            module: key,\n            children,\n            ...reasonGroup(children, reasons)\n          };\n        }\n      });\n    }\n  }\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n  if (field[0] === \"!\") {\n    return field.slice(1);\n  }\n  return field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n  if (field[0] === \"!\") {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\nconst sortByField = field => {\n  if (!field) {\n    /**\n     * @param {any} a first\n     * @param {any} b second\n     * @returns {-1|0|1} zero\n     */\n    const noSort = (a, b) => 0;\n    return noSort;\n  }\n  const fieldKey = normalizeFieldKey(field);\n  let sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n  // if a field is prefixed with a \"!\" the sort is reversed!\n  const sortIsRegular = sortOrderRegular(field);\n  if (!sortIsRegular) {\n    const oldSortFn = sortFn;\n    sortFn = (a, b) => oldSortFn(b, a);\n  }\n  return sortFn;\n};\nconst ASSET_SORTERS = {\n  /** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n  assetsSort: (comparators, context, _ref48) => {\n    let {\n      assetsSort\n    } = _ref48;\n    comparators.push(sortByField(assetsSort));\n  },\n  _: comparators => {\n    comparators.push(compareSelect(a => a.name, compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n  \"compilation.chunks\": {\n    chunksSort: (comparators, context, _ref49) => {\n      let {\n        chunksSort\n      } = _ref49;\n      comparators.push(sortByField(chunksSort));\n    }\n  },\n  \"compilation.modules\": {\n    modulesSort: (comparators, context, _ref50) => {\n      let {\n        modulesSort\n      } = _ref50;\n      comparators.push(sortByField(modulesSort));\n    }\n  },\n  \"chunk.modules\": {\n    chunkModulesSort: (comparators, context, _ref51) => {\n      let {\n        chunkModulesSort\n      } = _ref51;\n      comparators.push(sortByField(chunkModulesSort));\n    }\n  },\n  \"module.modules\": {\n    nestedModulesSort: (comparators, context, _ref52) => {\n      let {\n        nestedModulesSort\n      } = _ref52;\n      comparators.push(sortByField(nestedModulesSort));\n    }\n  },\n  \"compilation.assets\": ASSET_SORTERS,\n  \"asset.related\": ASSET_SORTERS\n};\n\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\nconst iterateConfig = (config, options, fn) => {\n  for (const hookFor of Object.keys(config)) {\n    const subConfig = config[hookFor];\n    for (const option of Object.keys(subConfig)) {\n      if (option !== \"_\") {\n        if (option.startsWith(\"!\")) {\n          if (options[option.slice(1)]) continue;\n        } else {\n          const value = options[option];\n          if (value === false || value === undefined || Array.isArray(value) && value.length === 0) continue;\n        }\n      }\n      fn(hookFor, subConfig[option]);\n    }\n  }\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n  \"compilation.children[]\": \"compilation\",\n  \"compilation.modules[]\": \"module\",\n  \"compilation.entrypoints[]\": \"chunkGroup\",\n  \"compilation.namedChunkGroups[]\": \"chunkGroup\",\n  \"compilation.errors[]\": \"error\",\n  \"compilation.warnings[]\": \"warning\",\n  \"chunk.modules[]\": \"module\",\n  \"chunk.rootModules[]\": \"module\",\n  \"chunk.origins[]\": \"chunkOrigin\",\n  \"compilation.chunks[]\": \"chunk\",\n  \"compilation.assets[]\": \"asset\",\n  \"asset.related[]\": \"asset\",\n  \"module.issuerPath[]\": \"moduleIssuer\",\n  \"module.reasons[]\": \"moduleReason\",\n  \"module.modules[]\": \"module\",\n  \"module.children[]\": \"module\",\n  \"moduleTrace[]\": \"moduleTraceItem\",\n  \"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\nconst mergeToObject = items => {\n  const obj = Object.create(null);\n  for (const item of items) {\n    obj[item.name] = item;\n  }\n  return obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n  \"compilation.entrypoints\": mergeToObject,\n  \"compilation.namedChunkGroups\": mergeToObject\n};\nclass DefaultStatsFactoryPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n      compilation.hooks.statsFactory.tap(\"DefaultStatsFactoryPlugin\", (stats, options, context) => {\n        iterateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n          stats.hooks.extract.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) => fn(obj, data, ctx, options, stats));\n        });\n        iterateConfig(FILTER, options, (hookFor, fn) => {\n          stats.hooks.filter.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n          stats.hooks.filterResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sort.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sortResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n          stats.hooks.groupResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) => fn(groupConfigs, ctx, options));\n        });\n        for (const key of Object.keys(ITEM_NAMES)) {\n          const itemName = ITEM_NAMES[key];\n          stats.hooks.getItemName.for(key).tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n        }\n        for (const key of Object.keys(MERGER)) {\n          const merger = MERGER[key];\n          stats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n        }\n        if (options.children) {\n          if (Array.isArray(options.children)) {\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", (comp, _ref53) => {\n              let {\n                _index: idx\n              } = _ref53;\n              if (idx < options.children.length) {\n                return compilation.createStatsFactory(compilation.createStatsOptions(options.children[idx], context));\n              }\n            });\n          } else if (options.children !== true) {\n            const childFactory = compilation.createStatsFactory(compilation.createStatsOptions(options.children, context));\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", () => {\n              return childFactory;\n            });\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = DefaultStatsFactoryPlugin;","map":{"version":3,"names":["util","require","ModuleDependency","formatLocation","LogType","AggressiveSplittingPlugin","SizeLimitsPlugin","countIterable","compareLocations","compareChunksById","compareNumbers","compareIds","concatComparators","compareSelect","compareModulesByIdentifier","makePathsRelative","parseResource","uniqueArray","items","selector","set","Set","item","i","add","Array","from","uniqueOrderedArray","comparator","sort","mapObject","obj","fn","newObj","Object","create","key","keys","countWithChildren","compilation","getItems","count","length","child","children","c","type","EXTRACT_ERROR","_","object","error","context","_ref","requestShortener","message","chunk","chunkName","name","chunkEntry","hasRuntime","chunkInitial","canBeInitial","file","module","moduleIdentifier","identifier","moduleName","readableIdentifier","loc","ids","_ref2","chunkGraph","chunkId","id","moduleId","getModuleId","moduleTrace","options","factory","moduleGraph","visitedModules","current","has","origin","getIssuer","push","errorDetails","_ref3","_ref4","cachedGetErrors","cachedGetWarnings","endsWith","details","errorStack","stack","SIMPLE_EXTRACTORS","bindContextCache","compiler","root","map","WeakMap","get","errors","getErrors","warnings","getWarnings","needAdditionalPass","logging","loggingDebug","loggingTrace","acceptedTypes","collapsedGroups","warn","info","log","group","groupEnd","groupCollapsed","clear","profile","profileEnd","time","status","cachedMakePathsRelative","depthInCollapsedGroup","logEntries","debugMode","some","groupStack","rootList","currentList","processedLogEntries","entry","pop","undefined","args","format","slice","newEntry","trace","replace","entries","filteredEntries","debug","hash","version","env","_ref5","_env","timings","endTime","startTime","builtAt","publicPath","getPath","outputOptions","outputPath","path","assets","compilationFileToChunks","Map","compilationAuxiliaryFileToChunks","chunks","files","array","auxiliaryFiles","assetMap","asset","getAssets","related","values","relatedEntry","deps","isArray","dep","depItem","delete","assetsByChunkName","prototype","hasOwnProperty","call","groupedAssets","limited","spaceLimited","assetsSpace","filteredAssets","filteredChildren","modules","groupedModules","modulesSpace","filteredModules","entrypoints","_ref6","chunkGroups","chunkGroupAuxiliary","chunkGroupChildren","_ref7","value","chunkGroup","every","_ref8","size","namedChunkGroups","_ref9","errorsCount","_ref10","warningsCount","_ref11","warningsFilter","childType","filter","warning","warningString","join","_ref12","_ref13","filteredWarningDetailsCount","e","Boolean","filteredErrorDetailsCount","source","emitted","emittedAssets","comparedForEmit","comparedForEmitAssets","cached","cachedAssets","assign","asset$visible","_ref14","auxiliaryChunks","chunkNames","chunkIdHints","idNameHints","auxiliaryChunkNames","auxiliaryChunkIdHints","filteredRelated","relatedAssets","_ref15","performance","isOverSizeLimit","_ref16","_ref17","_ref18","chunkGroupMaxAssets","getChildrenByOrders","toAsset","getAsset","sizeReducer","total","_ref19","auxiliaryAssets","assetsSize","reduce","auxiliaryAssetsSize","statsChunkGroup","filteredAuxiliaryAssets","groups","childStatsChunkGroup","childAssets","_ref20","built","builtModules","codeGenerated","codeGeneratedModules","buildTimeExecuted","buildTimeExecutedModules","sizes","sourceType","getSourceTypes","statsModule","moduleType","layer","cachedModules","module$visible","_ref21","rootModules","issuer","reverse","getProfile","nameForCondition","index","getPreOrderIndex","preOrderIndex","index2","getPostOrderIndex","postOrderIndex","cacheable","buildInfo","optional","isOptional","orphan","getNumberOfModuleChunks","dependent","issuerName","issuerPath","failed","_ref22","issuerId","getOrderedModuleChunksIterable","moduleAssets","reasons","groupsReasons","getIncomingConnections","reasonsSpace","filteredReasons","usedExports","_ref23","runtime","getUsedExports","providedExports","_ref24","getProvidedExports","optimizationBailout","_ref25","_ref26","getOptimizationBailout","depth","_ref27","getDepth","nestedModules","innerModules","nestedModulesSpace","originalSource","statsProfile","restoring","integration","building","storing","resolving","additionalResolving","additionalFactories","additionalIntegration","dependencies","moduleIssuer","_ref28","statsModuleIssuer","_ref29","moduleReason","reason","_ref30","_ref31","dependency","moduleDep","statsModuleReason","originModule","resolvedModuleIdentifier","resolvedOriginModule","resolvedModule","active","isActive","explanation","userRequest","locInfo","_ref32","resolvedModuleId","_ref33","childIdByOrder","getChildIdsByOrders","statsChunk","rendered","initial","recorded","wasChunkRecorded","chunkReason","getChunkModulesSize","getChunkModulesSizes","names","idHints","renderedHash","childrenByOrder","chunkRelations","_ref34","parents","siblings","groupsIterable","parentGroup","parentsIterable","childGroup","childrenIterable","sibling","chunkModules","getChunkModules","getChunkRootModules","chunkModulesSpace","chunkOrigins","originsKeySet","origins","g","request","chunkOrigin","_ref35","statsChunkOrigin","_ref36","moduleTraceItem","_ref37","_ref38","originIdentifier","originName","_ref39","_ref40","originId","moduleTraceDependency","FILTER","!orphanModules","_ref41","FILTER_RESULTS","deprecate","_ref42","MODULES_SORTER","comparators","_ref43","m","SORTERS","_ref44","x","_ref45","getItemSize","getTotalSize","getTotalItems","collapse","newChildren","itemsAndGroups","max","filteredChildrenLineReserved","arguments","groupSizes","groupsSize","itemOrGroup","concat","limit","oversize","maxGroupSize","Math","headerSize","ceil","newSize","assetGroup","moduleGroup","reasonGroup","GROUP_EXTENSION_REGEXP","GROUP_PATH_REGEXP","ASSETS_GROUPERS","groupConfigs","groupByFlag","exclude","getKeys","getOptions","groupChildren","force","createGroup","groupAssetsByEmitStatus","groupAssetsByPath","groupAssetsByExtension","extensionMatch","exec","extension","pathMatch","split","groupAssetsByInfo","groupByAssetInfoFlag","groupAssetsByChunk","groupByNames","excludeAssets","_ref46","ident","excluded","MODULES_GROUPERS","groupModulesByCacheStatus","groupModulesByLayer","groupModulesByAttributes","groupModulesByType","groupModulesByPath","groupModulesByExtension","orphanModules","dependentModules","runtimeModules","resource","dataUrl","isDataUrl","startsWith","excludeModules","_ref47","RESULT_GROUPERS","groupReasonsByOrigin","normalizeFieldKey","field","sortOrderRegular","sortByField","noSort","a","b","fieldKey","sortFn","sortIsRegular","oldSortFn","ASSET_SORTERS","assetsSort","_ref48","RESULT_SORTERS","chunksSort","_ref49","modulesSort","_ref50","chunkModulesSort","_ref51","nestedModulesSort","_ref52","iterateConfig","config","hookFor","subConfig","option","ITEM_NAMES","mergeToObject","MERGER","DefaultStatsFactoryPlugin","apply","hooks","tap","statsFactory","stats","extract","for","data","ctx","idx","filterResults","sortResults","groupResults","itemName","getItemName","merger","merge","getItemFactory","comp","_ref53","_index","createStatsFactory","createStatsOptions","childFactory","exports"],"sources":["/Users/ritasabri/Desktop/PENN/interpretme_v2/node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst { LogType } = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst { countIterable } = require(\"../util/IterableHelpers\");\nconst {\n\tcompareLocations,\n\tcompareChunksById,\n\tcompareNumbers,\n\tcompareIds,\n\tconcatComparators,\n\tcompareSelect,\n\tcompareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst { makePathsRelative, parseResource } = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\nconst uniqueArray = (items, selector) => {\n\t/** @type {Set<I>} */\n\tconst set = new Set();\n\tfor (const item of items) {\n\t\tfor (const i of selector(item)) {\n\t\t\tset.add(i);\n\t\t}\n\t}\n\treturn Array.from(set);\n};\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n\treturn uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\nconst mapObject = (obj, fn) => {\n\tconst newObj = Object.create(null);\n\tfor (const key of Object.keys(obj)) {\n\t\tnewObj[key] = fn(obj[key], /** @type {keyof T} */ (key));\n\t}\n\treturn newObj;\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\nconst countWithChildren = (compilation, getItems) => {\n\tlet count = getItems(compilation, \"\").length;\n\tfor (const child of compilation.children) {\n\t\tcount += countWithChildren(child, (c, type) =>\n\t\t\tgetItems(c, `.children[].compilation${type}`)\n\t\t);\n\t}\n\treturn count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n\t_: (object, error, context, { requestShortener }) => {\n\t\t// TODO webpack 6 disallow strings in the errors/warnings list\n\t\tif (typeof error === \"string\") {\n\t\t\tobject.message = error;\n\t\t} else {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkName = error.chunk.name;\n\t\t\t\tobject.chunkEntry = error.chunk.hasRuntime();\n\t\t\t\tobject.chunkInitial = error.chunk.canBeInitial();\n\t\t\t}\n\t\t\tif (error.file) {\n\t\t\t\tobject.file = error.file;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleIdentifier = error.module.identifier();\n\t\t\t\tobject.moduleName = error.module.readableIdentifier(requestShortener);\n\t\t\t}\n\t\t\tif (error.loc) {\n\t\t\t\tobject.loc = formatLocation(error.loc);\n\t\t\t}\n\t\t\tobject.message = error.message;\n\t\t}\n\t},\n\tids: (object, error, { compilation: { chunkGraph } }) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkId = error.chunk.id;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleId = chunkGraph.getModuleId(error.module);\n\t\t\t}\n\t\t}\n\t},\n\tmoduleTrace: (object, error, context, options, factory) => {\n\t\tif (typeof error !== \"string\" && error.module) {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<Module>} */\n\t\t\tconst visitedModules = new Set();\n\t\t\tconst moduleTrace = [];\n\t\t\tlet current = error.module;\n\t\t\twhile (current) {\n\t\t\t\tif (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n\t\t\t\tvisitedModules.add(current);\n\t\t\t\tconst origin = moduleGraph.getIssuer(current);\n\t\t\t\tif (!origin) break;\n\t\t\t\tmoduleTrace.push({ origin, module: current });\n\t\t\t\tcurrent = origin;\n\t\t\t}\n\t\t\tobject.moduleTrace = factory.create(\n\t\t\t\t`${type}.moduleTrace`,\n\t\t\t\tmoduleTrace,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\terrorDetails: (\n\t\tobject,\n\t\terror,\n\t\t{ type, compilation, cachedGetErrors, cachedGetWarnings },\n\t\t{ errorDetails }\n\t) => {\n\t\tif (\n\t\t\ttypeof error !== \"string\" &&\n\t\t\t(errorDetails === true ||\n\t\t\t\t(type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3))\n\t\t) {\n\t\t\tobject.details = error.details;\n\t\t}\n\t},\n\terrorStack: (object, error) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tobject.stack = error.stack;\n\t\t}\n\t}\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n\tcompilation: {\n\t\t_: (object, compilation, context, options) => {\n\t\t\tif (!context.makePathsRelative) {\n\t\t\t\tcontext.makePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\tcompilation.compiler.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!context.cachedGetErrors) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetErrors = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(errors => (map.set(compilation, errors), errors))(\n\t\t\t\t\t\t\tcompilation.getErrors()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!context.cachedGetWarnings) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetWarnings = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(warnings => (map.set(compilation, warnings), warnings))(\n\t\t\t\t\t\t\tcompilation.getWarnings()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (compilation.name) {\n\t\t\t\tobject.name = compilation.name;\n\t\t\t}\n\t\t\tif (compilation.needAdditionalPass) {\n\t\t\t\tobject.needAdditionalPass = true;\n\t\t\t}\n\n\t\t\tconst { logging, loggingDebug, loggingTrace } = options;\n\t\t\tif (logging || (loggingDebug && loggingDebug.length > 0)) {\n\t\t\t\tconst util = require(\"util\");\n\t\t\t\tobject.logging = {};\n\t\t\t\tlet acceptedTypes;\n\t\t\t\tlet collapsedGroups = false;\n\t\t\t\tswitch (logging) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tacceptedTypes = new Set();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"error\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"warn\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error, LogType.warn]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"info\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"log\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"verbose\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.profile,\n\t\t\t\t\t\t\tLogType.profileEnd,\n\t\t\t\t\t\t\tLogType.time,\n\t\t\t\t\t\t\tLogType.status,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tcollapsedGroups = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\toptions.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t\tlet depthInCollapsedGroup = 0;\n\t\t\t\tfor (const [origin, logEntries] of compilation.logging) {\n\t\t\t\t\tconst debugMode = loggingDebug.some(fn => fn(origin));\n\t\t\t\t\tif (logging === false && !debugMode) continue;\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst groupStack = [];\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst rootList = [];\n\t\t\t\t\tlet currentList = rootList;\n\t\t\t\t\tlet processedLogEntries = 0;\n\t\t\t\t\tfor (const entry of logEntries) {\n\t\t\t\t\t\tlet type = entry.type;\n\t\t\t\t\t\tif (!debugMode && !acceptedTypes.has(type)) continue;\n\n\t\t\t\t\t\t// Expand groups in verbose and debug modes\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttype === LogType.groupCollapsed &&\n\t\t\t\t\t\t\t(debugMode || collapsedGroups)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\ttype = LogType.group;\n\n\t\t\t\t\t\tif (depthInCollapsedGroup === 0) {\n\t\t\t\t\t\t\tprocessedLogEntries++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === LogType.groupEnd) {\n\t\t\t\t\t\t\tgroupStack.pop();\n\t\t\t\t\t\t\tif (groupStack.length > 0) {\n\t\t\t\t\t\t\t\tcurrentList = groupStack[groupStack.length - 1].children;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrentList = rootList;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet message = undefined;\n\t\t\t\t\t\tif (entry.type === LogType.time) {\n\t\t\t\t\t\t\tmessage = `${entry.args[0]}: ${\n\t\t\t\t\t\t\t\tentry.args[1] * 1000 + entry.args[2] / 1000000\n\t\t\t\t\t\t\t} ms`;\n\t\t\t\t\t\t} else if (entry.args && entry.args.length > 0) {\n\t\t\t\t\t\t\tmessage = util.format(entry.args[0], ...entry.args.slice(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/** @type {KnownStatsLoggingEntry} */\n\t\t\t\t\t\tconst newEntry = {\n\t\t\t\t\t\t\t...entry,\n\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\ttrace: loggingTrace ? entry.trace : undefined,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\ttype === LogType.group || type === LogType.groupCollapsed\n\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcurrentList.push(newEntry);\n\t\t\t\t\t\tif (newEntry.children) {\n\t\t\t\t\t\t\tgroupStack.push(newEntry);\n\t\t\t\t\t\t\tcurrentList = newEntry.children;\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup++;\n\t\t\t\t\t\t\t} else if (type === LogType.groupCollapsed) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n\t\t\t\t\tif (name in object.logging) {\n\t\t\t\t\t\tlet i = 1;\n\t\t\t\t\t\twhile (`${name}#${i}` in object.logging) {\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = `${name}#${i}`;\n\t\t\t\t\t}\n\t\t\t\t\tobject.logging[name] = {\n\t\t\t\t\t\tentries: rootList,\n\t\t\t\t\t\tfilteredEntries: logEntries.length - processedLogEntries,\n\t\t\t\t\t\tdebug: debugMode\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thash: (object, compilation) => {\n\t\t\tobject.hash = compilation.hash;\n\t\t},\n\t\tversion: object => {\n\t\t\tobject.version = require(\"../../package.json\").version;\n\t\t},\n\t\tenv: (object, compilation, context, { _env }) => {\n\t\t\tobject.env = _env;\n\t\t},\n\t\ttimings: (object, compilation) => {\n\t\t\tobject.time = compilation.endTime - compilation.startTime;\n\t\t},\n\t\tbuiltAt: (object, compilation) => {\n\t\t\tobject.builtAt = compilation.endTime;\n\t\t},\n\t\tpublicPath: (object, compilation) => {\n\t\t\tobject.publicPath = compilation.getPath(\n\t\t\t\tcompilation.outputOptions.publicPath\n\t\t\t);\n\t\t},\n\t\toutputPath: (object, compilation) => {\n\t\t\tobject.outputPath = compilation.outputOptions.path;\n\t\t},\n\t\tassets: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationFileToChunks = new Map();\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationAuxiliaryFileToChunks = new Map();\n\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\tlet array = compilationFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t\tfor (const file of chunk.auxiliaryFiles) {\n\t\t\t\t\tlet array = compilationAuxiliaryFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationAuxiliaryFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Map<string, PreprocessedAsset>} */\n\t\t\tconst assetMap = new Map();\n\t\t\t/** @type {Set<PreprocessedAsset>} */\n\t\t\tconst assets = new Set();\n\t\t\tfor (const asset of compilation.getAssets()) {\n\t\t\t\t/** @type {PreprocessedAsset} */\n\t\t\t\tconst item = {\n\t\t\t\t\t...asset,\n\t\t\t\t\ttype: \"asset\",\n\t\t\t\t\trelated: undefined\n\t\t\t\t};\n\t\t\t\tassets.add(item);\n\t\t\t\tassetMap.set(asset.name, item);\n\t\t\t}\n\t\t\tfor (const item of assetMap.values()) {\n\t\t\t\tconst related = item.info.related;\n\t\t\t\tif (!related) continue;\n\t\t\t\tfor (const type of Object.keys(related)) {\n\t\t\t\t\tconst relatedEntry = related[type];\n\t\t\t\t\tconst deps = Array.isArray(relatedEntry)\n\t\t\t\t\t\t? relatedEntry\n\t\t\t\t\t\t: [relatedEntry];\n\t\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\t\tconst depItem = assetMap.get(dep);\n\t\t\t\t\t\tif (!depItem) continue;\n\t\t\t\t\t\tassets.delete(depItem);\n\t\t\t\t\t\tdepItem.type = type;\n\t\t\t\t\t\titem.related = item.related || [];\n\t\t\t\t\t\titem.related.push(depItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobject.assetsByChunkName = {};\n\t\t\tfor (const [file, chunks] of compilationFileToChunks) {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\tif (!name) continue;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(\n\t\t\t\t\t\t\tobject.assetsByChunkName,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tobject.assetsByChunkName[name] = [];\n\t\t\t\t\t}\n\t\t\t\t\tobject.assetsByChunkName[name].push(file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst groupedAssets = factory.create(\n\t\t\t\t`${type}.assets`,\n\t\t\t\tArray.from(assets),\n\t\t\t\t{\n\t\t\t\t\t...context,\n\t\t\t\t\tcompilationFileToChunks,\n\t\t\t\t\tcompilationAuxiliaryFileToChunks\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupedAssets, options.assetsSpace);\n\t\t\tobject.assets = limited.children;\n\t\t\tobject.filteredAssets = limited.filteredChildren;\n\t\t},\n\t\tchunks: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.chunks = factory.create(\n\t\t\t\t`${type}.chunks`,\n\t\t\t\tArray.from(compilation.chunks),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tmodules: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.modules);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, context);\n\t\t\tconst limited = spaceLimited(groupedModules, options.modulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tentrypoints: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ entrypoints, chunkGroups, chunkGroupAuxiliary, chunkGroupChildren },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.entrypoints, ([key, value]) => ({\n\t\t\t\tname: key,\n\t\t\t\tchunkGroup: value\n\t\t\t}));\n\t\t\tif (entrypoints === \"auto\" && !chunkGroups) {\n\t\t\t\tif (array.length > 5) return;\n\t\t\t\tif (\n\t\t\t\t\t!chunkGroupChildren &&\n\t\t\t\t\tarray.every(({ chunkGroup }) => {\n\t\t\t\t\t\tif (chunkGroup.chunks.length !== 1) return false;\n\t\t\t\t\t\tconst chunk = chunkGroup.chunks[0];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tchunk.files.size === 1 &&\n\t\t\t\t\t\t\t(!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.entrypoints = factory.create(\n\t\t\t\t`${type}.entrypoints`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tchunkGroups: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(\n\t\t\t\tcompilation.namedChunkGroups,\n\t\t\t\t([key, value]) => ({\n\t\t\t\t\tname: key,\n\t\t\t\t\tchunkGroup: value\n\t\t\t\t})\n\t\t\t);\n\t\t\tobject.namedChunkGroups = factory.create(\n\t\t\t\t`${type}.namedChunkGroups`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\terrors: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetErrors } = context;\n\t\t\tobject.errors = factory.create(\n\t\t\t\t`${type}.errors`,\n\t\t\t\tcachedGetErrors(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\terrorsCount: (object, compilation, { cachedGetErrors }) => {\n\t\t\tobject.errorsCount = countWithChildren(compilation, c =>\n\t\t\t\tcachedGetErrors(c)\n\t\t\t);\n\t\t},\n\t\twarnings: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tobject.warnings = factory.create(\n\t\t\t\t`${type}.warnings`,\n\t\t\t\tcachedGetWarnings(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\twarningsCount: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ warningsFilter },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tobject.warningsCount = countWithChildren(compilation, (c, childType) => {\n\t\t\t\tif (!warningsFilter && warningsFilter.length === 0)\n\t\t\t\t\treturn cachedGetWarnings(c);\n\t\t\t\treturn factory\n\t\t\t\t\t.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context)\n\t\t\t\t\t.filter(warning => {\n\t\t\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t\t\t.join(\"\\n\");\n\t\t\t\t\t\treturn !warningsFilter.some(filter =>\n\t\t\t\t\t\t\tfilter(warning, warningString)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\terrorDetails: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\t{ cachedGetErrors, cachedGetWarnings },\n\t\t\t{ errorDetails, errors, warnings }\n\t\t) => {\n\t\t\tif (errorDetails === \"auto\") {\n\t\t\t\tif (warnings) {\n\t\t\t\t\tconst warnings = cachedGetWarnings(compilation);\n\t\t\t\t\tobject.filteredWarningDetailsCount = warnings\n\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t\t.filter(Boolean).length;\n\t\t\t\t}\n\t\t\t\tif (errors) {\n\t\t\t\t\tconst errors = cachedGetErrors(compilation);\n\t\t\t\t\tif (errors.length >= 3) {\n\t\t\t\t\t\tobject.filteredErrorDetailsCount = errors\n\t\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t\t\t.filter(Boolean).length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tchildren: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.children = factory.create(\n\t\t\t\t`${type}.children`,\n\t\t\t\tcompilation.children,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\tasset: {\n\t\t_: (object, asset, context, options, factory) => {\n\t\t\tconst { compilation } = context;\n\t\t\tobject.type = asset.type;\n\t\t\tobject.name = asset.name;\n\t\t\tobject.size = asset.source.size();\n\t\t\tobject.emitted = compilation.emittedAssets.has(asset.name);\n\t\t\tobject.comparedForEmit = compilation.comparedForEmitAssets.has(\n\t\t\t\tasset.name\n\t\t\t);\n\t\t\tconst cached = !object.emitted && !object.comparedForEmit;\n\t\t\tobject.cached = cached;\n\t\t\tobject.info = asset.info;\n\t\t\tif (!cached || options.cachedAssets) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${context.type}$visible`, asset, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tasset$visible: {\n\t\t_: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilation, compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunkNames = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.chunkIdHints = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkNames = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkIdHints = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related ? asset.related.length : undefined;\n\t\t},\n\t\trelatedAssets: (object, asset, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.related = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.related`,\n\t\t\t\tasset.related,\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related\n\t\t\t\t? asset.related.length - object.related.length\n\t\t\t\t: undefined;\n\t\t},\n\t\tids: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n\t\t\tobject.auxiliaryChunks = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => c.ids,\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t},\n\t\tperformance: (object, asset) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n\t\t}\n\t},\n\tchunkGroup: {\n\t\t_: (\n\t\t\tobject,\n\t\t\t{ name, chunkGroup },\n\t\t\t{ compilation, compilation: { moduleGraph, chunkGraph } },\n\t\t\t{ ids, chunkGroupAuxiliary, chunkGroupChildren, chunkGroupMaxAssets }\n\t\t) => {\n\t\t\tconst children =\n\t\t\t\tchunkGroupChildren &&\n\t\t\t\tchunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n\t\t\t/**\n\t\t\t * @param {string} name Name\n\t\t\t * @returns {{ name: string, size: number }} Asset object\n\t\t\t */\n\t\t\tconst toAsset = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\tsize: asset ? asset.info.size : -1\n\t\t\t\t};\n\t\t\t};\n\t\t\t/** @type {(total: number, asset: { size: number }) => number} */\n\t\t\tconst sizeReducer = (total, { size }) => total + size;\n\t\t\tconst assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\tchunkGroup.chunks,\n\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\tcompareIds\n\t\t\t).map(toAsset);\n\t\t\tconst assetsSize = assets.reduce(sizeReducer, 0);\n\t\t\tconst auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\tconst statsChunkGroup = {\n\t\t\t\tname,\n\t\t\t\tchunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n\t\t\t\tassets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\tfilteredAssets:\n\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\tassetsSize,\n\t\t\t\tauxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t: undefined,\n\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: auxiliaryAssets.length,\n\t\t\t\tauxiliaryAssetsSize,\n\t\t\t\tchildren: children\n\t\t\t\t\t? mapObject(children, groups =>\n\t\t\t\t\t\t\tgroups.map(group => {\n\t\t\t\t\t\t\t\tconst assets = uniqueArray(group.chunks, c => c.files).map(\n\t\t\t\t\t\t\t\t\ttoAsset\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\t\t\t\t\t\tgroup.chunks,\n\t\t\t\t\t\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\t\t\t\t\t\tcompareIds\n\t\t\t\t\t\t\t\t).map(toAsset);\n\n\t\t\t\t\t\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\t\t\t\t\t\tconst childStatsChunkGroup = {\n\t\t\t\t\t\t\t\t\tname: group.name,\n\t\t\t\t\t\t\t\t\tchunks: ids ? group.chunks.map(c => c.id) : undefined,\n\t\t\t\t\t\t\t\t\tassets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\t\t\t\t\t\tfilteredAssets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\t\t\t\t\t\tauxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t\t\t: auxiliaryAssets.length\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn childStatsChunkGroup;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined,\n\t\t\t\tchildAssets: children\n\t\t\t\t\t? mapObject(children, groups => {\n\t\t\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\t\tfor (const group of groups) {\n\t\t\t\t\t\t\t\tfor (const chunk of group.chunks) {\n\t\t\t\t\t\t\t\t\tfor (const asset of chunk.files) {\n\t\t\t\t\t\t\t\t\t\tset.add(asset);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Array.from(set);\n\t\t\t\t\t  })\n\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkGroup);\n\t\t},\n\t\tperformance: (object, { chunkGroup }) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n\t\t}\n\t},\n\tmodule: {\n\t\t_: (object, module, context, options, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst built = compilation.builtModules.has(module);\n\t\t\tconst codeGenerated = compilation.codeGeneratedModules.has(module);\n\t\t\tconst buildTimeExecuted =\n\t\t\t\tcompilation.buildTimeExecutedModules.has(module);\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\ttype: \"module\",\n\t\t\t\tmoduleType: module.type,\n\t\t\t\tlayer: module.layer,\n\t\t\t\tsize: module.size(),\n\t\t\t\tsizes,\n\t\t\t\tbuilt,\n\t\t\t\tcodeGenerated,\n\t\t\t\tbuildTimeExecuted,\n\t\t\t\tcached: !built && !codeGenerated\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\n\t\t\tif (built || codeGenerated || options.cachedModules) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${type}$visible`, module, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tmodule$visible: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type, rootModules } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\t/** @type {Module[]} */\n\t\t\tconst path = [];\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tlet current = issuer;\n\t\t\twhile (current) {\n\t\t\t\tpath.push(current);\n\t\t\t\tcurrent = moduleGraph.getIssuer(current);\n\t\t\t}\n\t\t\tpath.reverse();\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\tconst errors = module.getErrors();\n\t\t\tconst errorsCount = errors !== undefined ? countIterable(errors) : 0;\n\t\t\tconst warnings = module.getWarnings();\n\t\t\tconst warningsCount =\n\t\t\t\twarnings !== undefined ? countIterable(warnings) : 0;\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener),\n\t\t\t\tnameForCondition: module.nameForCondition(),\n\t\t\t\tindex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tpreOrderIndex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tindex2: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tpostOrderIndex: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tcacheable: module.buildInfo.cacheable,\n\t\t\t\toptional: module.isOptional(moduleGraph),\n\t\t\t\torphan:\n\t\t\t\t\t!type.endsWith(\"module.modules[].module$visible\") &&\n\t\t\t\t\tcompilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n\t\t\t\tdependent: rootModules ? !rootModules.has(module) : undefined,\n\t\t\t\tissuer: issuer && issuer.identifier(),\n\t\t\t\tissuerName: issuer && issuer.readableIdentifier(requestShortener),\n\t\t\t\tissuerPath:\n\t\t\t\t\tissuer &&\n\t\t\t\t\tfactory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n\t\t\t\tfailed: errorsCount > 0,\n\t\t\t\terrors: errorsCount,\n\t\t\t\twarnings: warningsCount\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.profile`,\n\t\t\t\t\tprofile,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph, moduleGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tobject.issuerId = issuer && chunkGraph.getModuleId(issuer);\n\t\t\tobject.chunks = Array.from(\n\t\t\t\tchunkGraph.getOrderedModuleChunksIterable(module, compareChunksById),\n\t\t\t\tchunk => chunk.id\n\t\t\t);\n\t\t},\n\t\tmoduleAssets: (object, module) => {\n\t\t\tobject.assets = module.buildInfo.assets\n\t\t\t\t? Object.keys(module.buildInfo.assets)\n\t\t\t\t: [];\n\t\t},\n\t\treasons: (object, module, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tconst groupsReasons = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.reasons`,\n\t\t\t\tArray.from(moduleGraph.getIncomingConnections(module)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupsReasons, options.reasonsSpace);\n\t\t\tobject.reasons = limited.children;\n\t\t\tobject.filteredReasons = limited.filteredChildren;\n\t\t},\n\t\tusedExports: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ runtime, compilation: { moduleGraph } }\n\t\t) => {\n\t\t\tconst usedExports = moduleGraph.getUsedExports(module, runtime);\n\t\t\tif (usedExports === null) {\n\t\t\t\tobject.usedExports = null;\n\t\t\t} else if (typeof usedExports === \"boolean\") {\n\t\t\t\tobject.usedExports = usedExports;\n\t\t\t} else {\n\t\t\t\tobject.usedExports = Array.from(usedExports);\n\t\t\t}\n\t\t},\n\t\tprovidedExports: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tconst providedExports = moduleGraph.getProvidedExports(module);\n\t\t\tobject.providedExports = Array.isArray(providedExports)\n\t\t\t\t? providedExports\n\t\t\t\t: null;\n\t\t},\n\t\toptimizationBailout: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ compilation: { moduleGraph } },\n\t\t\t{ requestShortener }\n\t\t) => {\n\t\t\tobject.optimizationBailout = moduleGraph\n\t\t\t\t.getOptimizationBailout(module)\n\t\t\t\t.map(item => {\n\t\t\t\t\tif (typeof item === \"function\") return item(requestShortener);\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t},\n\t\tdepth: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tobject.depth = moduleGraph.getDepth(module);\n\t\t},\n\t\tnestedModules: (object, module, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst innerModules = /** @type {Module & { modules?: Module[] }} */ (\n\t\t\t\tmodule\n\t\t\t).modules;\n\t\t\tif (Array.isArray(innerModules)) {\n\t\t\t\tconst groupedModules = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.modules`,\n\t\t\t\t\tinnerModules,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\tgroupedModules,\n\t\t\t\t\toptions.nestedModulesSpace\n\t\t\t\t);\n\t\t\t\tobject.modules = limited.children;\n\t\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t\t}\n\t\t},\n\t\tsource: (object, module) => {\n\t\t\tconst originalSource = module.originalSource();\n\t\t\tif (originalSource) {\n\t\t\t\tobject.source = originalSource.source();\n\t\t\t}\n\t\t}\n\t},\n\tprofile: {\n\t\t_: (object, profile) => {\n\t\t\t/** @type {KnownStatsProfile} */\n\t\t\tconst statsProfile = {\n\t\t\t\ttotal:\n\t\t\t\t\tprofile.factory +\n\t\t\t\t\tprofile.restoring +\n\t\t\t\t\tprofile.integration +\n\t\t\t\t\tprofile.building +\n\t\t\t\t\tprofile.storing,\n\t\t\t\tresolving: profile.factory,\n\t\t\t\trestoring: profile.restoring,\n\t\t\t\tbuilding: profile.building,\n\t\t\t\tintegration: profile.integration,\n\t\t\t\tstoring: profile.storing,\n\t\t\t\tadditionalResolving: profile.additionalFactories,\n\t\t\t\tadditionalIntegration: profile.additionalIntegration,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tfactory: profile.factory,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tdependencies: profile.additionalFactories\n\t\t\t};\n\t\t\tObject.assign(object, statsProfile);\n\t\t}\n\t},\n\tmoduleIssuer: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\t/** @type {KnownStatsModuleIssuer} */\n\t\t\tconst statsModuleIssuer = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener)\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleIssuer);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(`${type}.profile`, profile, context);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleReason: {\n\t\t_: (object, reason, { runtime }, { requestShortener }) => {\n\t\t\tconst dep = reason.dependency;\n\t\t\tconst moduleDep =\n\t\t\t\tdep && dep instanceof ModuleDependency ? dep : undefined;\n\t\t\t/** @type {KnownStatsModuleReason} */\n\t\t\tconst statsModuleReason = {\n\t\t\t\tmoduleIdentifier: reason.originModule\n\t\t\t\t\t? reason.originModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tmodule: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tmoduleName: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModuleIdentifier: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModule: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\ttype: reason.dependency ? reason.dependency.type : null,\n\t\t\t\tactive: reason.isActive(runtime),\n\t\t\t\texplanation: reason.explanation,\n\t\t\t\tuserRequest: (moduleDep && moduleDep.userRequest) || null\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleReason);\n\t\t\tif (reason.dependency) {\n\t\t\t\tconst locInfo = formatLocation(reason.dependency.loc);\n\t\t\t\tif (locInfo) {\n\t\t\t\t\tobject.loc = locInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tids: (object, reason, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = reason.originModule\n\t\t\t\t? chunkGraph.getModuleId(reason.originModule)\n\t\t\t\t: null;\n\t\t\tobject.resolvedModuleId = reason.resolvedOriginModule\n\t\t\t\t? chunkGraph.getModuleId(reason.resolvedOriginModule)\n\t\t\t\t: null;\n\t\t}\n\t},\n\tchunk: {\n\t\t_: (object, chunk, { makePathsRelative, compilation: { chunkGraph } }) => {\n\t\t\tconst childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n\t\t\t/** @type {KnownStatsChunk} */\n\t\t\tconst statsChunk = {\n\t\t\t\trendered: chunk.rendered,\n\t\t\t\tinitial: chunk.canBeInitial(),\n\t\t\t\tentry: chunk.hasRuntime(),\n\t\t\t\trecorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n\t\t\t\treason: chunk.chunkReason,\n\t\t\t\tsize: chunkGraph.getChunkModulesSize(chunk),\n\t\t\t\tsizes: chunkGraph.getChunkModulesSizes(chunk),\n\t\t\t\tnames: chunk.name ? [chunk.name] : [],\n\t\t\t\tidHints: Array.from(chunk.idNameHints),\n\t\t\t\truntime:\n\t\t\t\t\tchunk.runtime === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: typeof chunk.runtime === \"string\"\n\t\t\t\t\t\t? [makePathsRelative(chunk.runtime)]\n\t\t\t\t\t\t: Array.from(chunk.runtime.sort(), makePathsRelative),\n\t\t\t\tfiles: Array.from(chunk.files),\n\t\t\t\tauxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n\t\t\t\thash: chunk.renderedHash,\n\t\t\t\tchildrenByOrder: childIdByOrder\n\t\t\t};\n\t\t\tObject.assign(object, statsChunk);\n\t\t},\n\t\tids: (object, chunk) => {\n\t\t\tobject.id = chunk.id;\n\t\t},\n\t\tchunkRelations: (object, chunk, { compilation: { chunkGraph } }) => {\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst parents = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst children = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst siblings = new Set();\n\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\tfor (const parentGroup of chunkGroup.parentsIterable) {\n\t\t\t\t\tfor (const chunk of parentGroup.chunks) {\n\t\t\t\t\t\tparents.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const childGroup of chunkGroup.childrenIterable) {\n\t\t\t\t\tfor (const chunk of childGroup.chunks) {\n\t\t\t\t\t\tchildren.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const sibling of chunkGroup.chunks) {\n\t\t\t\t\tif (sibling !== chunk) siblings.add(sibling.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.siblings = Array.from(siblings).sort(compareIds);\n\t\t\tobject.parents = Array.from(parents).sort(compareIds);\n\t\t\tobject.children = Array.from(children).sort(compareIds);\n\t\t},\n\t\tchunkModules: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\tconst array = chunkGraph.getChunkModules(chunk);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, {\n\t\t\t\t...context,\n\t\t\t\truntime: chunk.runtime,\n\t\t\t\trootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n\t\t\t});\n\t\t\tconst limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tchunkOrigins: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<string>} */\n\t\t\tconst originsKeySet = new Set();\n\t\t\tconst origins = [];\n\t\t\tfor (const g of chunk.groupsIterable) {\n\t\t\t\torigins.push(...g.origins);\n\t\t\t}\n\t\t\tconst array = origins.filter(origin => {\n\t\t\t\tconst key = [\n\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tformatLocation(origin.loc),\n\t\t\t\t\torigin.request\n\t\t\t\t].join();\n\t\t\t\tif (originsKeySet.has(key)) return false;\n\t\t\t\toriginsKeySet.add(key);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tobject.origins = factory.create(`${type}.origins`, array, context);\n\t\t}\n\t},\n\tchunkOrigin: {\n\t\t_: (object, origin, context, { requestShortener }) => {\n\t\t\t/** @type {KnownStatsChunkOrigin} */\n\t\t\tconst statsChunkOrigin = {\n\t\t\t\tmodule: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleName: origin.module\n\t\t\t\t\t? origin.module.readableIdentifier(requestShortener)\n\t\t\t\t\t: \"\",\n\t\t\t\tloc: formatLocation(origin.loc),\n\t\t\t\trequest: origin.request\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkOrigin);\n\t\t},\n\t\tids: (object, origin, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = origin.module\n\t\t\t\t? chunkGraph.getModuleId(origin.module)\n\t\t\t\t: undefined;\n\t\t}\n\t},\n\terror: EXTRACT_ERROR,\n\twarning: EXTRACT_ERROR,\n\tmoduleTraceItem: {\n\t\t_: (object, { origin, module }, context, { requestShortener }, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tobject.originIdentifier = origin.identifier();\n\t\t\tobject.originName = origin.readableIdentifier(requestShortener);\n\t\t\tobject.moduleIdentifier = module.identifier();\n\t\t\tobject.moduleName = module.readableIdentifier(requestShortener);\n\t\t\tconst dependencies = Array.from(\n\t\t\t\tmoduleGraph.getIncomingConnections(module)\n\t\t\t)\n\t\t\t\t.filter(c => c.resolvedOriginModule === origin && c.dependency)\n\t\t\t\t.map(c => c.dependency);\n\t\t\tobject.dependencies = factory.create(\n\t\t\t\t`${type}.dependencies`,\n\t\t\t\tArray.from(new Set(dependencies)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tids: (object, { origin, module }, { compilation: { chunkGraph } }) => {\n\t\t\tobject.originId = chunkGraph.getModuleId(origin);\n\t\t\tobject.moduleId = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleTraceDependency: {\n\t\t_: (object, dependency) => {\n\t\t\tobject.loc = formatLocation(dependency.loc);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n\t\"module.reasons\": {\n\t\t\"!orphanModules\": (reason, { compilation: { chunkGraph } }) => {\n\t\t\tif (\n\t\t\t\treason.originModule &&\n\t\t\t\tchunkGraph.getNumberOfModuleChunks(reason.originModule) === 0\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n\t\"compilation.warnings\": {\n\t\twarningsFilter: util.deprecate(\n\t\t\t(warning, context, { warningsFilter }) => {\n\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t.join(\"\\n\");\n\t\t\t\treturn !warningsFilter.some(filter => filter(warning, warningString));\n\t\t\t},\n\t\t\t\"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\",\n\t\t\t\"DEP_WEBPACK_STATS_WARNINGS_FILTER\"\n\t\t)\n\t}\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n\t_: (comparators, { compilation: { moduleGraph } }) => {\n\t\tcomparators.push(\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} depth\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getDepth(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} index\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getPreOrderIndex(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {string} identifier\n\t\t\t\t */\n\t\t\t\tm => m.identifier(),\n\t\t\t\tcompareIds\n\t\t\t)\n\t\t);\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n\t\"compilation.chunks\": {\n\t\t_: comparators => {\n\t\t\tcomparators.push(compareSelect(c => c.id, compareIds));\n\t\t}\n\t},\n\t\"compilation.modules\": MODULES_SORTER,\n\t\"chunk.rootModules\": MODULES_SORTER,\n\t\"chunk.modules\": MODULES_SORTER,\n\t\"module.modules\": MODULES_SORTER,\n\t\"module.reasons\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.originModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\tx => x.dependency,\n\t\t\t\t\tconcatComparators(\n\t\t\t\t\t\tcompareSelect(\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Dependency} x dependency\n\t\t\t\t\t\t\t * @returns {DependencyLocation} location\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tx => x.loc,\n\t\t\t\t\t\t\tcompareLocations\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcompareSelect(x => x.type, compareIds)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t},\n\t\"chunk.origins\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\torigin =>\n\t\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tcompareIds\n\t\t\t\t),\n\t\t\t\tcompareSelect(origin => formatLocation(origin.loc), compareIds),\n\t\t\t\tcompareSelect(origin => origin.request, compareIds)\n\t\t\t);\n\t\t}\n\t}\n};\n\nconst getItemSize = item => {\n\t// Each item takes 1 line\n\t// + the size of the children\n\t// + 1 extra line when it has children and filteredChildren\n\treturn !item.children\n\t\t? 1\n\t\t: item.filteredChildren\n\t\t? 2 + getTotalSize(item.children)\n\t\t: 1 + getTotalSize(item.children);\n};\n\nconst getTotalSize = children => {\n\tlet size = 0;\n\tfor (const child of children) {\n\t\tsize += getItemSize(child);\n\t}\n\treturn size;\n};\n\nconst getTotalItems = children => {\n\tlet count = 0;\n\tfor (const child of children) {\n\t\tif (!child.children && !child.filteredChildren) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tif (child.children) count += getTotalItems(child.children);\n\t\t\tif (child.filteredChildren) count += child.filteredChildren;\n\t\t}\n\t}\n\treturn count;\n};\n\nconst collapse = children => {\n\t// After collapse each child must take exactly one line\n\tconst newChildren = [];\n\tfor (const child of children) {\n\t\tif (child.children) {\n\t\t\tlet filteredChildren = child.filteredChildren || 0;\n\t\t\tfilteredChildren += getTotalItems(child.children);\n\t\t\tnewChildren.push({\n\t\t\t\t...child,\n\t\t\t\tchildren: undefined,\n\t\t\t\tfilteredChildren\n\t\t\t});\n\t\t} else {\n\t\t\tnewChildren.push(child);\n\t\t}\n\t}\n\treturn newChildren;\n};\n\nconst spaceLimited = (\n\titemsAndGroups,\n\tmax,\n\tfilteredChildrenLineReserved = false\n) => {\n\tif (max < 1) {\n\t\treturn {\n\t\t\tchildren: undefined,\n\t\t\tfilteredChildren: getTotalItems(itemsAndGroups)\n\t\t};\n\t}\n\t/** @type {any[] | undefined} */\n\tlet children = undefined;\n\t/** @type {number | undefined} */\n\tlet filteredChildren = undefined;\n\t// This are the groups, which take 1+ lines each\n\tconst groups = [];\n\t// The sizes of the groups are stored in groupSizes\n\tconst groupSizes = [];\n\t// This are the items, which take 1 line each\n\tconst items = [];\n\t// The total of group sizes\n\tlet groupsSize = 0;\n\n\tfor (const itemOrGroup of itemsAndGroups) {\n\t\t// is item\n\t\tif (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n\t\t\titems.push(itemOrGroup);\n\t\t} else {\n\t\t\tgroups.push(itemOrGroup);\n\t\t\tconst size = getItemSize(itemOrGroup);\n\t\t\tgroupSizes.push(size);\n\t\t\tgroupsSize += size;\n\t\t}\n\t}\n\n\tif (groupsSize + items.length <= max) {\n\t\t// The total size in the current state fits into the max\n\t\t// keep all\n\t\tchildren = groups.length > 0 ? groups.concat(items) : items;\n\t} else if (groups.length === 0) {\n\t\t// slice items to max\n\t\t// inner space marks that lines for filteredChildren already reserved\n\t\tconst limit = max - (filteredChildrenLineReserved ? 0 : 1);\n\t\tfilteredChildren = items.length - limit;\n\t\titems.length = limit;\n\t\tchildren = items;\n\t} else {\n\t\t// limit is the size when all groups are collapsed\n\t\tconst limit =\n\t\t\tgroups.length +\n\t\t\t(filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n\t\tif (limit < max) {\n\t\t\t// calculate how much we are over the size limit\n\t\t\t// this allows to approach the limit faster\n\t\t\tlet oversize;\n\t\t\t// If each group would take 1 line the total would be below the maximum\n\t\t\t// collapse some groups, keep items\n\t\t\twhile (\n\t\t\t\t(oversize =\n\t\t\t\t\tgroupsSize +\n\t\t\t\t\titems.length +\n\t\t\t\t\t(filteredChildren && !filteredChildrenLineReserved ? 1 : 0) -\n\t\t\t\t\tmax) > 0\n\t\t\t) {\n\t\t\t\t// Find the maximum group and process only this one\n\t\t\t\tconst maxGroupSize = Math.max(...groupSizes);\n\t\t\t\tif (maxGroupSize < items.length) {\n\t\t\t\t\tfilteredChildren = items.length;\n\t\t\t\t\titems.length = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < groups.length; i++) {\n\t\t\t\t\tif (groupSizes[i] === maxGroupSize) {\n\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t// run this algorithm recursively and limit the size of the children to\n\t\t\t\t\t\t// current size - oversize / number of groups\n\t\t\t\t\t\t// So it should always end up being smaller\n\t\t\t\t\t\tconst headerSize = group.filteredChildren ? 2 : 1;\n\t\t\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\t\t\tgroup.children,\n\t\t\t\t\t\t\tmaxGroupSize -\n\t\t\t\t\t\t\t\t// we should use ceil to always feet in max\n\t\t\t\t\t\t\t\tMath.ceil(oversize / groups.length) -\n\t\t\t\t\t\t\t\t// we substitute size of group head\n\t\t\t\t\t\t\t\theaderSize,\n\t\t\t\t\t\t\theaderSize === 2\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgroups[i] = {\n\t\t\t\t\t\t\t...group,\n\t\t\t\t\t\t\tchildren: limited.children,\n\t\t\t\t\t\t\tfilteredChildren: limited.filteredChildren\n\t\t\t\t\t\t\t\t? (group.filteredChildren || 0) + limited.filteredChildren\n\t\t\t\t\t\t\t\t: group.filteredChildren\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst newSize = getItemSize(groups[i]);\n\t\t\t\t\t\tgroupsSize -= maxGroupSize - newSize;\n\t\t\t\t\t\tgroupSizes[i] = newSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchildren = groups.concat(items);\n\t\t} else if (limit === max) {\n\t\t\t// If we have only enough space to show one line per group and one line for the filtered items\n\t\t\t// collapse all groups and items\n\t\t\tchildren = collapse(groups);\n\t\t\tfilteredChildren = items.length;\n\t\t} else {\n\t\t\t// If we have no space\n\t\t\t// collapse complete group\n\t\t\tfilteredChildren = getTotalItems(itemsAndGroups);\n\t\t}\n\t}\n\n\treturn {\n\t\tchildren,\n\t\tfilteredChildren\n\t};\n};\n\nconst assetGroup = (children, assets) => {\n\tlet size = 0;\n\tfor (const asset of children) {\n\t\tsize += asset.size;\n\t}\n\treturn {\n\t\tsize\n\t};\n};\n\nconst moduleGroup = (children, modules) => {\n\tlet size = 0;\n\tconst sizes = {};\n\tfor (const module of children) {\n\t\tsize += module.size;\n\t\tfor (const key of Object.keys(module.sizes)) {\n\t\t\tsizes[key] = (sizes[key] || 0) + module.sizes[key];\n\t\t}\n\t}\n\treturn {\n\t\tsize,\n\t\tsizes\n\t};\n};\n\nconst reasonGroup = (children, reasons) => {\n\tlet active = false;\n\tfor (const reason of children) {\n\t\tactive = active || reason.active;\n\t}\n\treturn {\n\t\tactive\n\t};\n};\n\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn exclude\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t  };\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupAssetsByEmitStatus,\n\t\t\tgroupAssetsByPath,\n\t\t\tgroupAssetsByExtension\n\t\t} = options;\n\t\tif (groupAssetsByEmitStatus) {\n\t\t\tgroupByFlag(\"emitted\");\n\t\t\tgroupByFlag(\"comparedForEmit\");\n\t\t\tgroupByFlag(\"isOverSizeLimit\");\n\t\t}\n\t\tif (groupAssetsByEmitStatus || !options.cachedAssets) {\n\t\t\tgroupByFlag(\"cached\", !options.cachedAssets);\n\t\t}\n\t\tif (groupAssetsByPath || groupAssetsByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupAssetsByPath) {\n\t\t\t\t\t\tkeys.push(\".\");\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\tgroupAssetsByInfo: (groupConfigs, context, options) => {\n\t\tconst groupByAssetInfoFlag = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset.info && asset.info[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by info\",\n\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\t[name]: !!key\n\t\t\t\t\t\t},\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByAssetInfoFlag(\"immutable\");\n\t\tgroupByAssetInfoFlag(\"development\");\n\t\tgroupByAssetInfoFlag(\"hotModuleReplacement\");\n\t},\n\tgroupAssetsByChunk: (groupConfigs, context, options) => {\n\t\tconst groupByNames = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by chunk\",\n\t\t\t\t\t\t[name]: [key],\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByNames(\"chunkNames\");\n\t\tgroupByNames(\"auxiliaryChunkNames\");\n\t\tgroupByNames(\"chunkIdHints\");\n\t\tgroupByNames(\"auxiliaryChunkIdHints\");\n\t},\n\texcludeAssets: (groupConfigs, context, { excludeAssets }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: asset => {\n\t\t\t\tconst ident = asset.name;\n\t\t\t\tconst excluded = excludeAssets.some(fn => fn(ident, asset));\n\t\t\t\tif (excluded) return [\"excluded\"];\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, assets) => ({\n\t\t\t\ttype: \"hidden assets\",\n\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t...assetGroup(children, assets)\n\t\t\t})\n\t\t});\n\t}\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, type, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn module[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupModulesByCacheStatus,\n\t\t\tgroupModulesByLayer,\n\t\t\tgroupModulesByAttributes,\n\t\t\tgroupModulesByType,\n\t\t\tgroupModulesByPath,\n\t\t\tgroupModulesByExtension\n\t\t} = options;\n\t\tif (groupModulesByAttributes) {\n\t\t\tgroupByFlag(\"errors\", \"modules with errors\");\n\t\t\tgroupByFlag(\"warnings\", \"modules with warnings\");\n\t\t\tgroupByFlag(\"assets\", \"modules with assets\");\n\t\t\tgroupByFlag(\"optional\", \"optional modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus) {\n\t\t\tgroupByFlag(\"cacheable\", \"cacheable modules\");\n\t\t\tgroupByFlag(\"built\", \"built modules\");\n\t\t\tgroupByFlag(\"codeGenerated\", \"code generated modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus || !options.cachedModules) {\n\t\t\tgroupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.orphanModules) {\n\t\t\tgroupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.dependentModules) {\n\t\t\tgroupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n\t\t}\n\t\tif (groupModulesByType || !options.runtimeModules) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.moduleType) return;\n\t\t\t\t\tif (groupModulesByType) {\n\t\t\t\t\t\treturn [module.moduleType.split(\"/\", 1)[0]];\n\t\t\t\t\t} else if (module.moduleType === \"runtime\") {\n\t\t\t\t\t\treturn [\"runtime\"];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetOptions: key => {\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: `${key} modules`,\n\t\t\t\t\t\tmoduleType: key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByLayer) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn [module.layer];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"modules by layer\",\n\t\t\t\t\t\tlayer: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByPath || groupModulesByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.name) return;\n\t\t\t\t\tconst resource = parseResource(module.name.split(\"!\").pop()).path;\n\t\t\t\t\tconst dataUrl = /^data:[^,;]+/.exec(resource);\n\t\t\t\t\tif (dataUrl) return [dataUrl[0]];\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupModulesByPath) {\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst isDataUrl = key.startsWith(\"data:\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: isDataUrl\n\t\t\t\t\t\t\t? \"modules by mime type\"\n\t\t\t\t\t\t\t: groupModulesByPath\n\t\t\t\t\t\t\t? \"modules by path\"\n\t\t\t\t\t\t\t: \"modules by extension\",\n\t\t\t\t\t\tname: isDataUrl ? key.slice(/* 'data:'.length */ 5) : key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\texcludeModules: (groupConfigs, context, { excludeModules }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: module => {\n\t\t\t\tconst name = module.name;\n\t\t\t\tif (name) {\n\t\t\t\t\tconst excluded = excludeModules.some(fn => fn(name, module, type));\n\t\t\t\t\tif (excluded) return [\"1\"];\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, modules) => ({\n\t\t\t\ttype: \"hidden modules\",\n\t\t\t\tfilteredChildren: children.length,\n\t\t\t\t...moduleGroup(children, modules)\n\t\t\t})\n\t\t});\n\t}\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n\t\"compilation.assets\": ASSETS_GROUPERS,\n\t\"asset.related\": ASSETS_GROUPERS,\n\t\"compilation.modules\": MODULES_GROUPERS(\"module\"),\n\t\"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n\t\"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n\t\"module.modules\": MODULES_GROUPERS(\"nested\"),\n\t\"module.reasons\": {\n\t\tgroupReasonsByOrigin: groupConfigs => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: reason => {\n\t\t\t\t\treturn [reason.module];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, reasons) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"from origin\",\n\t\t\t\t\t\tmodule: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...reasonGroup(children, reasons)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n\tif (field[0] === \"!\") {\n\t\treturn field.slice(1);\n\t}\n\treturn field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n\tif (field[0] === \"!\") {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\nconst sortByField = field => {\n\tif (!field) {\n\t\t/**\n\t\t * @param {any} a first\n\t\t * @param {any} b second\n\t\t * @returns {-1|0|1} zero\n\t\t */\n\t\tconst noSort = (a, b) => 0;\n\t\treturn noSort;\n\t}\n\n\tconst fieldKey = normalizeFieldKey(field);\n\n\tlet sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n\t// if a field is prefixed with a \"!\" the sort is reversed!\n\tconst sortIsRegular = sortOrderRegular(field);\n\n\tif (!sortIsRegular) {\n\t\tconst oldSortFn = sortFn;\n\t\tsortFn = (a, b) => oldSortFn(b, a);\n\t}\n\n\treturn sortFn;\n};\n\nconst ASSET_SORTERS = {\n\t/** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n\tassetsSort: (comparators, context, { assetsSort }) => {\n\t\tcomparators.push(sortByField(assetsSort));\n\t},\n\t_: comparators => {\n\t\tcomparators.push(compareSelect(a => a.name, compareIds));\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n\t\"compilation.chunks\": {\n\t\tchunksSort: (comparators, context, { chunksSort }) => {\n\t\t\tcomparators.push(sortByField(chunksSort));\n\t\t}\n\t},\n\t\"compilation.modules\": {\n\t\tmodulesSort: (comparators, context, { modulesSort }) => {\n\t\t\tcomparators.push(sortByField(modulesSort));\n\t\t}\n\t},\n\t\"chunk.modules\": {\n\t\tchunkModulesSort: (comparators, context, { chunkModulesSort }) => {\n\t\t\tcomparators.push(sortByField(chunkModulesSort));\n\t\t}\n\t},\n\t\"module.modules\": {\n\t\tnestedModulesSort: (comparators, context, { nestedModulesSort }) => {\n\t\t\tcomparators.push(sortByField(nestedModulesSort));\n\t\t}\n\t},\n\t\"compilation.assets\": ASSET_SORTERS,\n\t\"asset.related\": ASSET_SORTERS\n};\n\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\nconst iterateConfig = (config, options, fn) => {\n\tfor (const hookFor of Object.keys(config)) {\n\t\tconst subConfig = config[hookFor];\n\t\tfor (const option of Object.keys(subConfig)) {\n\t\t\tif (option !== \"_\") {\n\t\t\t\tif (option.startsWith(\"!\")) {\n\t\t\t\t\tif (options[option.slice(1)]) continue;\n\t\t\t\t} else {\n\t\t\t\t\tconst value = options[option];\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue === false ||\n\t\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t\t(Array.isArray(value) && value.length === 0)\n\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfn(hookFor, subConfig[option]);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n\t\"compilation.children[]\": \"compilation\",\n\t\"compilation.modules[]\": \"module\",\n\t\"compilation.entrypoints[]\": \"chunkGroup\",\n\t\"compilation.namedChunkGroups[]\": \"chunkGroup\",\n\t\"compilation.errors[]\": \"error\",\n\t\"compilation.warnings[]\": \"warning\",\n\t\"chunk.modules[]\": \"module\",\n\t\"chunk.rootModules[]\": \"module\",\n\t\"chunk.origins[]\": \"chunkOrigin\",\n\t\"compilation.chunks[]\": \"chunk\",\n\t\"compilation.assets[]\": \"asset\",\n\t\"asset.related[]\": \"asset\",\n\t\"module.issuerPath[]\": \"moduleIssuer\",\n\t\"module.reasons[]\": \"moduleReason\",\n\t\"module.modules[]\": \"module\",\n\t\"module.children[]\": \"module\",\n\t\"moduleTrace[]\": \"moduleTraceItem\",\n\t\"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\nconst mergeToObject = items => {\n\tconst obj = Object.create(null);\n\tfor (const item of items) {\n\t\tobj[item.name] = item;\n\t}\n\treturn obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n\t\"compilation.entrypoints\": mergeToObject,\n\t\"compilation.namedChunkGroups\": mergeToObject\n};\n\nclass DefaultStatsFactoryPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n\t\t\tcompilation.hooks.statsFactory.tap(\n\t\t\t\t\"DefaultStatsFactoryPlugin\",\n\t\t\t\t(stats, options, context) => {\n\t\t\t\t\titerateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.extract\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) =>\n\t\t\t\t\t\t\t\tfn(obj, data, ctx, options, stats)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filter\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filterResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sort\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sortResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.groupResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) =>\n\t\t\t\t\t\t\t\tfn(groupConfigs, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tfor (const key of Object.keys(ITEM_NAMES)) {\n\t\t\t\t\t\tconst itemName = ITEM_NAMES[key];\n\t\t\t\t\t\tstats.hooks.getItemName\n\t\t\t\t\t\t\t.for(key)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const key of Object.keys(MERGER)) {\n\t\t\t\t\t\tconst merger = MERGER[key];\n\t\t\t\t\t\tstats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n\t\t\t\t\t}\n\t\t\t\t\tif (options.children) {\n\t\t\t\t\t\tif (Array.isArray(options.children)) {\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comp, { _index: idx }) => {\n\t\t\t\t\t\t\t\t\tif (idx < options.children.length) {\n\t\t\t\t\t\t\t\t\t\treturn compilation.createStatsFactory(\n\t\t\t\t\t\t\t\t\t\t\tcompilation.createStatsOptions(\n\t\t\t\t\t\t\t\t\t\t\t\toptions.children[idx],\n\t\t\t\t\t\t\t\t\t\t\t\tcontext\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (options.children !== true) {\n\t\t\t\t\t\t\tconst childFactory = compilation.createStatsFactory(\n\t\t\t\t\t\t\t\tcompilation.createStatsOptions(options.children, context)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => {\n\t\t\t\t\t\t\t\t\treturn childFactory;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = DefaultStatsFactoryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AACpE,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAM;EAAEG;AAAQ,CAAC,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,iCAAiC,CAAC;AACnE,MAAM;EAAEM;AAAc,CAAC,GAAGN,OAAO,CAAC,yBAAyB,CAAC;AAC5D,MAAM;EACLO,gBAAgB;EAChBC,iBAAiB;EACjBC,cAAc;EACdC,UAAU;EACVC,iBAAiB;EACjBC,aAAa;EACbC;AACD,CAAC,GAAGb,OAAO,CAAC,qBAAqB,CAAC;AAClC,MAAM;EAAEc,iBAAiB;EAAEC;AAAc,CAAC,GAAGf,OAAO,CAAC,oBAAoB,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgB,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAE;EACrB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACzB,KAAK,MAAMK,CAAC,IAAIJ,QAAQ,CAACG,IAAI,CAAC,EAAE;MAC/BF,GAAG,CAACI,GAAG,CAACD,CAAC,CAAC;IACX;EACD;EACA,OAAOE,KAAK,CAACC,IAAI,CAACN,GAAG,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,kBAAkB,GAAGA,CAACT,KAAK,EAAEC,QAAQ,EAAES,UAAU,KAAK;EAC3D,OAAOX,WAAW,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAACU,IAAI,CAACD,UAAU,CAAC;AACrD,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAGA,CAACC,GAAG,EAAEC,EAAE,KAAK;EAC9B,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAClC,KAAK,MAAMC,GAAG,IAAIF,MAAM,CAACG,IAAI,CAACN,GAAG,CAAC,EAAE;IACnCE,MAAM,CAACG,GAAG,CAAC,GAAGJ,EAAE,CAACD,GAAG,CAACK,GAAG,CAAC,EAAE,sBAAwBA,GAAG,CAAE;EACzD;EACA,OAAOH,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMK,iBAAiB,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EACpD,IAAIC,KAAK,GAAGD,QAAQ,CAACD,WAAW,EAAE,EAAE,CAAC,CAACG,MAAM;EAC5C,KAAK,MAAMC,KAAK,IAAIJ,WAAW,CAACK,QAAQ,EAAE;IACzCH,KAAK,IAAIH,iBAAiB,CAACK,KAAK,EAAE,CAACE,CAAC,EAAEC,IAAI,KACzCN,QAAQ,CAACK,CAAC,EAAG,0BAAyBC,IAAK,EAAC,CAAC,CAC7C;EACF;EACA,OAAOL,KAAK;AACb,CAAC;;AAED;AACA,MAAMM,aAAa,GAAG;EACrBC,CAAC,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAAC,IAAA,KAA2B;IAAA,IAAzB;MAAEC;IAAiB,CAAC,GAAAD,IAAA;IAC/C;IACA,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;MAC9BD,MAAM,CAACK,OAAO,GAAGJ,KAAK;IACvB,CAAC,MAAM;MACN,IAAIA,KAAK,CAACK,KAAK,EAAE;QAChBN,MAAM,CAACO,SAAS,GAAGN,KAAK,CAACK,KAAK,CAACE,IAAI;QACnCR,MAAM,CAACS,UAAU,GAAGR,KAAK,CAACK,KAAK,CAACI,UAAU,EAAE;QAC5CV,MAAM,CAACW,YAAY,GAAGV,KAAK,CAACK,KAAK,CAACM,YAAY,EAAE;MACjD;MACA,IAAIX,KAAK,CAACY,IAAI,EAAE;QACfb,MAAM,CAACa,IAAI,GAAGZ,KAAK,CAACY,IAAI;MACzB;MACA,IAAIZ,KAAK,CAACa,MAAM,EAAE;QACjBd,MAAM,CAACe,gBAAgB,GAAGd,KAAK,CAACa,MAAM,CAACE,UAAU,EAAE;QACnDhB,MAAM,CAACiB,UAAU,GAAGhB,KAAK,CAACa,MAAM,CAACI,kBAAkB,CAACd,gBAAgB,CAAC;MACtE;MACA,IAAIH,KAAK,CAACkB,GAAG,EAAE;QACdnB,MAAM,CAACmB,GAAG,GAAGjE,cAAc,CAAC+C,KAAK,CAACkB,GAAG,CAAC;MACvC;MACAnB,MAAM,CAACK,OAAO,GAAGJ,KAAK,CAACI,OAAO;IAC/B;EACD,CAAC;EACDe,GAAG,EAAEA,CAACpB,MAAM,EAAEC,KAAK,EAAAoB,KAAA,KAAsC;IAAA,IAApC;MAAE/B,WAAW,EAAE;QAAEgC;MAAW;IAAE,CAAC,GAAAD,KAAA;IACnD,IAAI,OAAOpB,KAAK,KAAK,QAAQ,EAAE;MAC9B,IAAIA,KAAK,CAACK,KAAK,EAAE;QAChBN,MAAM,CAACuB,OAAO,GAAGtB,KAAK,CAACK,KAAK,CAACkB,EAAE;MAChC;MACA,IAAIvB,KAAK,CAACa,MAAM,EAAE;QACjBd,MAAM,CAACyB,QAAQ,GAAGH,UAAU,CAACI,WAAW,CAACzB,KAAK,CAACa,MAAM,CAAC;MACvD;IACD;EACD,CAAC;EACDa,WAAW,EAAEA,CAAC3B,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;IAC1D,IAAI,OAAO5B,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACa,MAAM,EAAE;MAC9C,MAAM;QACLjB,IAAI;QACJP,WAAW,EAAE;UAAEwC;QAAY;MAC5B,CAAC,GAAG5B,OAAO;MACX;MACA,MAAM6B,cAAc,GAAG,IAAI3D,GAAG,EAAE;MAChC,MAAMuD,WAAW,GAAG,EAAE;MACtB,IAAIK,OAAO,GAAG/B,KAAK,CAACa,MAAM;MAC1B,OAAOkB,OAAO,EAAE;QACf,IAAID,cAAc,CAACE,GAAG,CAACD,OAAO,CAAC,EAAE,MAAM,CAAC;QACxCD,cAAc,CAACxD,GAAG,CAACyD,OAAO,CAAC;QAC3B,MAAME,MAAM,GAAGJ,WAAW,CAACK,SAAS,CAACH,OAAO,CAAC;QAC7C,IAAI,CAACE,MAAM,EAAE;QACbP,WAAW,CAACS,IAAI,CAAC;UAAEF,MAAM;UAAEpB,MAAM,EAAEkB;QAAQ,CAAC,CAAC;QAC7CA,OAAO,GAAGE,MAAM;MACjB;MACAlC,MAAM,CAAC2B,WAAW,GAAGE,OAAO,CAAC3C,MAAM,CACjC,GAAEW,IAAK,cAAa,EACrB8B,WAAW,EACXzB,OAAO,CACP;IACF;EACD,CAAC;EACDmC,YAAY,EAAEA,CACbrC,MAAM,EACNC,KAAK,EAAAqC,KAAA,EAAAC,KAAA,KAGD;IAAA,IAFJ;MAAE1C,IAAI;MAAEP,WAAW;MAAEkD,eAAe;MAAEC;IAAkB,CAAC,GAAAH,KAAA;IAAA,IACzD;MAAED;IAAa,CAAC,GAAAE,KAAA;IAEhB,IACC,OAAOtC,KAAK,KAAK,QAAQ,KACxBoC,YAAY,KAAK,IAAI,IACpBxC,IAAI,CAAC6C,QAAQ,CAAC,QAAQ,CAAC,IAAIF,eAAe,CAAClD,WAAW,CAAC,CAACG,MAAM,GAAG,CAAE,CAAC,EACrE;MACDO,MAAM,CAAC2C,OAAO,GAAG1C,KAAK,CAAC0C,OAAO;IAC/B;EACD,CAAC;EACDC,UAAU,EAAEA,CAAC5C,MAAM,EAAEC,KAAK,KAAK;IAC9B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC9BD,MAAM,CAAC6C,KAAK,GAAG5C,KAAK,CAAC4C,KAAK;IAC3B;EACD;AACD,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAG;EACzBxD,WAAW,EAAE;IACZS,CAAC,EAAEA,CAACC,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,KAAK;MAC7C,IAAI,CAAC1B,OAAO,CAACpC,iBAAiB,EAAE;QAC/BoC,OAAO,CAACpC,iBAAiB,GAAGA,iBAAiB,CAACiF,gBAAgB,CAC7DzD,WAAW,CAAC0D,QAAQ,CAAC9C,OAAO,EAC5BZ,WAAW,CAAC0D,QAAQ,CAACC,IAAI,CACzB;MACF;MACA,IAAI,CAAC/C,OAAO,CAACsC,eAAe,EAAE;QAC7B,MAAMU,GAAG,GAAG,IAAIC,OAAO,EAAE;QACzBjD,OAAO,CAACsC,eAAe,GAAGlD,WAAW,IAAI;UACxC,OACC4D,GAAG,CAACE,GAAG,CAAC9D,WAAW,CAAC,IACpB,CAAC+D,MAAM,KAAKH,GAAG,CAAC/E,GAAG,CAACmB,WAAW,EAAE+D,MAAM,CAAC,EAAEA,MAAM,CAAC,EAChD/D,WAAW,CAACgE,SAAS,EAAE,CACvB;QAEH,CAAC;MACF;MACA,IAAI,CAACpD,OAAO,CAACuC,iBAAiB,EAAE;QAC/B,MAAMS,GAAG,GAAG,IAAIC,OAAO,EAAE;QACzBjD,OAAO,CAACuC,iBAAiB,GAAGnD,WAAW,IAAI;UAC1C,OACC4D,GAAG,CAACE,GAAG,CAAC9D,WAAW,CAAC,IACpB,CAACiE,QAAQ,KAAKL,GAAG,CAAC/E,GAAG,CAACmB,WAAW,EAAEiE,QAAQ,CAAC,EAAEA,QAAQ,CAAC,EACtDjE,WAAW,CAACkE,WAAW,EAAE,CACzB;QAEH,CAAC;MACF;MACA,IAAIlE,WAAW,CAACkB,IAAI,EAAE;QACrBR,MAAM,CAACQ,IAAI,GAAGlB,WAAW,CAACkB,IAAI;MAC/B;MACA,IAAIlB,WAAW,CAACmE,kBAAkB,EAAE;QACnCzD,MAAM,CAACyD,kBAAkB,GAAG,IAAI;MACjC;MAEA,MAAM;QAAEC,OAAO;QAAEC,YAAY;QAAEC;MAAa,CAAC,GAAGhC,OAAO;MACvD,IAAI8B,OAAO,IAAKC,YAAY,IAAIA,YAAY,CAAClE,MAAM,GAAG,CAAE,EAAE;QACzD,MAAM1C,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;QAC5BgD,MAAM,CAAC0D,OAAO,GAAG,CAAC,CAAC;QACnB,IAAIG,aAAa;QACjB,IAAIC,eAAe,GAAG,KAAK;QAC3B,QAAQJ,OAAO;UACd;YACCG,aAAa,GAAG,IAAIzF,GAAG,EAAE;YACzB;UACD,KAAK,OAAO;YACXyF,aAAa,GAAG,IAAIzF,GAAG,CAAC,CAACjB,OAAO,CAAC8C,KAAK,CAAC,CAAC;YACxC;UACD,KAAK,MAAM;YACV4D,aAAa,GAAG,IAAIzF,GAAG,CAAC,CAACjB,OAAO,CAAC8C,KAAK,EAAE9C,OAAO,CAAC4G,IAAI,CAAC,CAAC;YACtD;UACD,KAAK,MAAM;YACVF,aAAa,GAAG,IAAIzF,GAAG,CAAC,CACvBjB,OAAO,CAAC8C,KAAK,EACb9C,OAAO,CAAC4G,IAAI,EACZ5G,OAAO,CAAC6G,IAAI,CACZ,CAAC;YACF;UACD,KAAK,KAAK;YACTH,aAAa,GAAG,IAAIzF,GAAG,CAAC,CACvBjB,OAAO,CAAC8C,KAAK,EACb9C,OAAO,CAAC4G,IAAI,EACZ5G,OAAO,CAAC6G,IAAI,EACZ7G,OAAO,CAAC8G,GAAG,EACX9G,OAAO,CAAC+G,KAAK,EACb/G,OAAO,CAACgH,QAAQ,EAChBhH,OAAO,CAACiH,cAAc,EACtBjH,OAAO,CAACkH,KAAK,CACb,CAAC;YACF;UACD,KAAK,SAAS;YACbR,aAAa,GAAG,IAAIzF,GAAG,CAAC,CACvBjB,OAAO,CAAC8C,KAAK,EACb9C,OAAO,CAAC4G,IAAI,EACZ5G,OAAO,CAAC6G,IAAI,EACZ7G,OAAO,CAAC8G,GAAG,EACX9G,OAAO,CAAC+G,KAAK,EACb/G,OAAO,CAACgH,QAAQ,EAChBhH,OAAO,CAACiH,cAAc,EACtBjH,OAAO,CAACmH,OAAO,EACfnH,OAAO,CAACoH,UAAU,EAClBpH,OAAO,CAACqH,IAAI,EACZrH,OAAO,CAACsH,MAAM,EACdtH,OAAO,CAACkH,KAAK,CACb,CAAC;YACFP,eAAe,GAAG,IAAI;YACtB;QAAM;QAER,MAAMY,uBAAuB,GAAG5G,iBAAiB,CAACiF,gBAAgB,CACjEnB,OAAO,CAAC1B,OAAO,EACfZ,WAAW,CAAC0D,QAAQ,CAACC,IAAI,CACzB;QACD,IAAI0B,qBAAqB,GAAG,CAAC;QAC7B,KAAK,MAAM,CAACzC,MAAM,EAAE0C,UAAU,CAAC,IAAItF,WAAW,CAACoE,OAAO,EAAE;UACvD,MAAMmB,SAAS,GAAGlB,YAAY,CAACmB,IAAI,CAAC/F,EAAE,IAAIA,EAAE,CAACmD,MAAM,CAAC,CAAC;UACrD,IAAIwB,OAAO,KAAK,KAAK,IAAI,CAACmB,SAAS,EAAE;UACrC;UACA,MAAME,UAAU,GAAG,EAAE;UACrB;UACA,MAAMC,QAAQ,GAAG,EAAE;UACnB,IAAIC,WAAW,GAAGD,QAAQ;UAC1B,IAAIE,mBAAmB,GAAG,CAAC;UAC3B,KAAK,MAAMC,KAAK,IAAIP,UAAU,EAAE;YAC/B,IAAI/E,IAAI,GAAGsF,KAAK,CAACtF,IAAI;YACrB,IAAI,CAACgF,SAAS,IAAI,CAAChB,aAAa,CAAC5B,GAAG,CAACpC,IAAI,CAAC,EAAE;;YAE5C;YACA,IACCA,IAAI,KAAK1C,OAAO,CAACiH,cAAc,KAC9BS,SAAS,IAAIf,eAAe,CAAC,EAE9BjE,IAAI,GAAG1C,OAAO,CAAC+G,KAAK;YAErB,IAAIS,qBAAqB,KAAK,CAAC,EAAE;cAChCO,mBAAmB,EAAE;YACtB;YAEA,IAAIrF,IAAI,KAAK1C,OAAO,CAACgH,QAAQ,EAAE;cAC9BY,UAAU,CAACK,GAAG,EAAE;cAChB,IAAIL,UAAU,CAACtF,MAAM,GAAG,CAAC,EAAE;gBAC1BwF,WAAW,GAAGF,UAAU,CAACA,UAAU,CAACtF,MAAM,GAAG,CAAC,CAAC,CAACE,QAAQ;cACzD,CAAC,MAAM;gBACNsF,WAAW,GAAGD,QAAQ;cACvB;cACA,IAAIL,qBAAqB,GAAG,CAAC,EAAEA,qBAAqB,EAAE;cACtD;YACD;YACA,IAAItE,OAAO,GAAGgF,SAAS;YACvB,IAAIF,KAAK,CAACtF,IAAI,KAAK1C,OAAO,CAACqH,IAAI,EAAE;cAChCnE,OAAO,GAAI,GAAE8E,KAAK,CAACG,IAAI,CAAC,CAAC,CAAE,KAC1BH,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGH,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,GAAG,OACvC,KAAI;YACN,CAAC,MAAM,IAAIH,KAAK,CAACG,IAAI,IAAIH,KAAK,CAACG,IAAI,CAAC7F,MAAM,GAAG,CAAC,EAAE;cAC/CY,OAAO,GAAGtD,IAAI,CAACwI,MAAM,CAACJ,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,EAAE,GAAGH,KAAK,CAACG,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7D;YACA;YACA,MAAMC,QAAQ,GAAG;cAChB,GAAGN,KAAK;cACRtF,IAAI;cACJQ,OAAO;cACPqF,KAAK,EAAE9B,YAAY,GAAGuB,KAAK,CAACO,KAAK,GAAGL,SAAS;cAC7C1F,QAAQ,EACPE,IAAI,KAAK1C,OAAO,CAAC+G,KAAK,IAAIrE,IAAI,KAAK1C,OAAO,CAACiH,cAAc,GACtD,EAAE,GACFiB;YACL,CAAC;YACDJ,WAAW,CAAC7C,IAAI,CAACqD,QAAQ,CAAC;YAC1B,IAAIA,QAAQ,CAAC9F,QAAQ,EAAE;cACtBoF,UAAU,CAAC3C,IAAI,CAACqD,QAAQ,CAAC;cACzBR,WAAW,GAAGQ,QAAQ,CAAC9F,QAAQ;cAC/B,IAAIgF,qBAAqB,GAAG,CAAC,EAAE;gBAC9BA,qBAAqB,EAAE;cACxB,CAAC,MAAM,IAAI9E,IAAI,KAAK1C,OAAO,CAACiH,cAAc,EAAE;gBAC3CO,qBAAqB,GAAG,CAAC;cAC1B;YACD;UACD;UACA,IAAInE,IAAI,GAAGkE,uBAAuB,CAACxC,MAAM,CAAC,CAACyD,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;UAC9D,IAAInF,IAAI,IAAIR,MAAM,CAAC0D,OAAO,EAAE;YAC3B,IAAIpF,CAAC,GAAG,CAAC;YACT,OAAQ,GAAEkC,IAAK,IAAGlC,CAAE,EAAC,IAAI0B,MAAM,CAAC0D,OAAO,EAAE;cACxCpF,CAAC,EAAE;YACJ;YACAkC,IAAI,GAAI,GAAEA,IAAK,IAAGlC,CAAE,EAAC;UACtB;UACA0B,MAAM,CAAC0D,OAAO,CAAClD,IAAI,CAAC,GAAG;YACtBoF,OAAO,EAAEZ,QAAQ;YACjBa,eAAe,EAAEjB,UAAU,CAACnF,MAAM,GAAGyF,mBAAmB;YACxDY,KAAK,EAAEjB;UACR,CAAC;QACF;MACD;IACD,CAAC;IACDkB,IAAI,EAAEA,CAAC/F,MAAM,EAAEV,WAAW,KAAK;MAC9BU,MAAM,CAAC+F,IAAI,GAAGzG,WAAW,CAACyG,IAAI;IAC/B,CAAC;IACDC,OAAO,EAAEhG,MAAM,IAAI;MAClBA,MAAM,CAACgG,OAAO,GAAGhJ,OAAO,CAAC,oBAAoB,CAAC,CAACgJ,OAAO;IACvD,CAAC;IACDC,GAAG,EAAEA,CAACjG,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAAgG,KAAA,KAAe;MAAA,IAAb;QAAEC;MAAK,CAAC,GAAAD,KAAA;MAC3ClG,MAAM,CAACiG,GAAG,GAAGE,IAAI;IAClB,CAAC;IACDC,OAAO,EAAEA,CAACpG,MAAM,EAAEV,WAAW,KAAK;MACjCU,MAAM,CAACwE,IAAI,GAAGlF,WAAW,CAAC+G,OAAO,GAAG/G,WAAW,CAACgH,SAAS;IAC1D,CAAC;IACDC,OAAO,EAAEA,CAACvG,MAAM,EAAEV,WAAW,KAAK;MACjCU,MAAM,CAACuG,OAAO,GAAGjH,WAAW,CAAC+G,OAAO;IACrC,CAAC;IACDG,UAAU,EAAEA,CAACxG,MAAM,EAAEV,WAAW,KAAK;MACpCU,MAAM,CAACwG,UAAU,GAAGlH,WAAW,CAACmH,OAAO,CACtCnH,WAAW,CAACoH,aAAa,CAACF,UAAU,CACpC;IACF,CAAC;IACDG,UAAU,EAAEA,CAAC3G,MAAM,EAAEV,WAAW,KAAK;MACpCU,MAAM,CAAC2G,UAAU,GAAGrH,WAAW,CAACoH,aAAa,CAACE,IAAI;IACnD,CAAC;IACDC,MAAM,EAAEA,CAAC7G,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC3D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxB;MACA,MAAM4G,uBAAuB,GAAG,IAAIC,GAAG,EAAE;MACzC;MACA,MAAMC,gCAAgC,GAAG,IAAID,GAAG,EAAE;MAClD,KAAK,MAAMzG,KAAK,IAAIhB,WAAW,CAAC2H,MAAM,EAAE;QACvC,KAAK,MAAMpG,IAAI,IAAIP,KAAK,CAAC4G,KAAK,EAAE;UAC/B,IAAIC,KAAK,GAAGL,uBAAuB,CAAC1D,GAAG,CAACvC,IAAI,CAAC;UAC7C,IAAIsG,KAAK,KAAK9B,SAAS,EAAE;YACxB8B,KAAK,GAAG,EAAE;YACVL,uBAAuB,CAAC3I,GAAG,CAAC0C,IAAI,EAAEsG,KAAK,CAAC;UACzC;UACAA,KAAK,CAAC/E,IAAI,CAAC9B,KAAK,CAAC;QAClB;QACA,KAAK,MAAMO,IAAI,IAAIP,KAAK,CAAC8G,cAAc,EAAE;UACxC,IAAID,KAAK,GAAGH,gCAAgC,CAAC5D,GAAG,CAACvC,IAAI,CAAC;UACtD,IAAIsG,KAAK,KAAK9B,SAAS,EAAE;YACxB8B,KAAK,GAAG,EAAE;YACVH,gCAAgC,CAAC7I,GAAG,CAAC0C,IAAI,EAAEsG,KAAK,CAAC;UAClD;UACAA,KAAK,CAAC/E,IAAI,CAAC9B,KAAK,CAAC;QAClB;MACD;MACA;MACA,MAAM+G,QAAQ,GAAG,IAAIN,GAAG,EAAE;MAC1B;MACA,MAAMF,MAAM,GAAG,IAAIzI,GAAG,EAAE;MACxB,KAAK,MAAMkJ,KAAK,IAAIhI,WAAW,CAACiI,SAAS,EAAE,EAAE;QAC5C;QACA,MAAMlJ,IAAI,GAAG;UACZ,GAAGiJ,KAAK;UACRzH,IAAI,EAAE,OAAO;UACb2H,OAAO,EAAEnC;QACV,CAAC;QACDwB,MAAM,CAACtI,GAAG,CAACF,IAAI,CAAC;QAChBgJ,QAAQ,CAAClJ,GAAG,CAACmJ,KAAK,CAAC9G,IAAI,EAAEnC,IAAI,CAAC;MAC/B;MACA,KAAK,MAAMA,IAAI,IAAIgJ,QAAQ,CAACI,MAAM,EAAE,EAAE;QACrC,MAAMD,OAAO,GAAGnJ,IAAI,CAAC2F,IAAI,CAACwD,OAAO;QACjC,IAAI,CAACA,OAAO,EAAE;QACd,KAAK,MAAM3H,IAAI,IAAIZ,MAAM,CAACG,IAAI,CAACoI,OAAO,CAAC,EAAE;UACxC,MAAME,YAAY,GAAGF,OAAO,CAAC3H,IAAI,CAAC;UAClC,MAAM8H,IAAI,GAAGnJ,KAAK,CAACoJ,OAAO,CAACF,YAAY,CAAC,GACrCA,YAAY,GACZ,CAACA,YAAY,CAAC;UACjB,KAAK,MAAMG,GAAG,IAAIF,IAAI,EAAE;YACvB,MAAMG,OAAO,GAAGT,QAAQ,CAACjE,GAAG,CAACyE,GAAG,CAAC;YACjC,IAAI,CAACC,OAAO,EAAE;YACdjB,MAAM,CAACkB,MAAM,CAACD,OAAO,CAAC;YACtBA,OAAO,CAACjI,IAAI,GAAGA,IAAI;YACnBxB,IAAI,CAACmJ,OAAO,GAAGnJ,IAAI,CAACmJ,OAAO,IAAI,EAAE;YACjCnJ,IAAI,CAACmJ,OAAO,CAACpF,IAAI,CAAC0F,OAAO,CAAC;UAC3B;QACD;MACD;MAEA9H,MAAM,CAACgI,iBAAiB,GAAG,CAAC,CAAC;MAC7B,KAAK,MAAM,CAACnH,IAAI,EAAEoG,MAAM,CAAC,IAAIH,uBAAuB,EAAE;QACrD,KAAK,MAAMxG,KAAK,IAAI2G,MAAM,EAAE;UAC3B,MAAMzG,IAAI,GAAGF,KAAK,CAACE,IAAI;UACvB,IAAI,CAACA,IAAI,EAAE;UACX,IACC,CAACvB,MAAM,CAACgJ,SAAS,CAACC,cAAc,CAACC,IAAI,CACpCnI,MAAM,CAACgI,iBAAiB,EACxBxH,IAAI,CACJ,EACA;YACDR,MAAM,CAACgI,iBAAiB,CAACxH,IAAI,CAAC,GAAG,EAAE;UACpC;UACAR,MAAM,CAACgI,iBAAiB,CAACxH,IAAI,CAAC,CAAC4B,IAAI,CAACvB,IAAI,CAAC;QAC1C;MACD;MAEA,MAAMuH,aAAa,GAAGvG,OAAO,CAAC3C,MAAM,CAClC,GAAEW,IAAK,SAAQ,EAChBrB,KAAK,CAACC,IAAI,CAACoI,MAAM,CAAC,EAClB;QACC,GAAG3G,OAAO;QACV4G,uBAAuB;QACvBE;MACD,CAAC,CACD;MACD,MAAMqB,OAAO,GAAGC,YAAY,CAACF,aAAa,EAAExG,OAAO,CAAC2G,WAAW,CAAC;MAChEvI,MAAM,CAAC6G,MAAM,GAAGwB,OAAO,CAAC1I,QAAQ;MAChCK,MAAM,CAACwI,cAAc,GAAGH,OAAO,CAACI,gBAAgB;IACjD,CAAC;IACDxB,MAAM,EAAEA,CAACjH,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC3D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxBF,MAAM,CAACiH,MAAM,GAAGpF,OAAO,CAAC3C,MAAM,CAC5B,GAAEW,IAAK,SAAQ,EAChBrB,KAAK,CAACC,IAAI,CAACa,WAAW,CAAC2H,MAAM,CAAC,EAC9B/G,OAAO,CACP;IACF,CAAC;IACDwI,OAAO,EAAEA,CAAC1I,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC5D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxB,MAAMiH,KAAK,GAAG3I,KAAK,CAACC,IAAI,CAACa,WAAW,CAACoJ,OAAO,CAAC;MAC7C,MAAMC,cAAc,GAAG9G,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAK,UAAS,EAAEsH,KAAK,EAAEjH,OAAO,CAAC;MACxE,MAAMmI,OAAO,GAAGC,YAAY,CAACK,cAAc,EAAE/G,OAAO,CAACgH,YAAY,CAAC;MAClE5I,MAAM,CAAC0I,OAAO,GAAGL,OAAO,CAAC1I,QAAQ;MACjCK,MAAM,CAAC6I,eAAe,GAAGR,OAAO,CAACI,gBAAgB;IAClD,CAAC;IACDK,WAAW,EAAEA,CACZ9I,MAAM,EACNV,WAAW,EACXY,OAAO,EAAA6I,KAAA,EAEPlH,OAAO,KACH;MAAA,IAFJ;QAAEiH,WAAW;QAAEE,WAAW;QAAEC,mBAAmB;QAAEC;MAAmB,CAAC,GAAAH,KAAA;MAGrE,MAAM;QAAElJ;MAAK,CAAC,GAAGK,OAAO;MACxB,MAAMiH,KAAK,GAAG3I,KAAK,CAACC,IAAI,CAACa,WAAW,CAACwJ,WAAW,EAAEK,KAAA;QAAA,IAAC,CAAChK,GAAG,EAAEiK,KAAK,CAAC,GAAAD,KAAA;QAAA,OAAM;UACpE3I,IAAI,EAAErB,GAAG;UACTkK,UAAU,EAAED;QACb,CAAC;MAAA,CAAC,CAAC;MACH,IAAIN,WAAW,KAAK,MAAM,IAAI,CAACE,WAAW,EAAE;QAC3C,IAAI7B,KAAK,CAAC1H,MAAM,GAAG,CAAC,EAAE;QACtB,IACC,CAACyJ,kBAAkB,IACnB/B,KAAK,CAACmC,KAAK,CAACC,KAAA,IAAoB;UAAA,IAAnB;YAAEF;UAAW,CAAC,GAAAE,KAAA;UAC1B,IAAIF,UAAU,CAACpC,MAAM,CAACxH,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;UAChD,MAAMa,KAAK,GAAG+I,UAAU,CAACpC,MAAM,CAAC,CAAC,CAAC;UAClC,OACC3G,KAAK,CAAC4G,KAAK,CAACsC,IAAI,KAAK,CAAC,KACrB,CAACP,mBAAmB,IAAI3I,KAAK,CAAC8G,cAAc,CAACoC,IAAI,KAAK,CAAC,CAAC;QAE3D,CAAC,CAAC,EACD;UACD;QACD;MACD;MACAxJ,MAAM,CAAC8I,WAAW,GAAGjH,OAAO,CAAC3C,MAAM,CACjC,GAAEW,IAAK,cAAa,EACrBsH,KAAK,EACLjH,OAAO,CACP;IACF,CAAC;IACD8I,WAAW,EAAEA,CAAChJ,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAChE,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxB,MAAMiH,KAAK,GAAG3I,KAAK,CAACC,IAAI,CACvBa,WAAW,CAACmK,gBAAgB,EAC5BC,KAAA;QAAA,IAAC,CAACvK,GAAG,EAAEiK,KAAK,CAAC,GAAAM,KAAA;QAAA,OAAM;UAClBlJ,IAAI,EAAErB,GAAG;UACTkK,UAAU,EAAED;QACb,CAAC;MAAA,CAAC,CACF;MACDpJ,MAAM,CAACyJ,gBAAgB,GAAG5H,OAAO,CAAC3C,MAAM,CACtC,GAAEW,IAAK,mBAAkB,EAC1BsH,KAAK,EACLjH,OAAO,CACP;IACF,CAAC;IACDmD,MAAM,EAAEA,CAACrD,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC3D,MAAM;QAAEhC,IAAI;QAAE2C;MAAgB,CAAC,GAAGtC,OAAO;MACzCF,MAAM,CAACqD,MAAM,GAAGxB,OAAO,CAAC3C,MAAM,CAC5B,GAAEW,IAAK,SAAQ,EAChB2C,eAAe,CAAClD,WAAW,CAAC,EAC5BY,OAAO,CACP;IACF,CAAC;IACDyJ,WAAW,EAAEA,CAAC3J,MAAM,EAAEV,WAAW,EAAAsK,MAAA,KAA0B;MAAA,IAAxB;QAAEpH;MAAgB,CAAC,GAAAoH,MAAA;MACrD5J,MAAM,CAAC2J,WAAW,GAAGtK,iBAAiB,CAACC,WAAW,EAAEM,CAAC,IACpD4C,eAAe,CAAC5C,CAAC,CAAC,CAClB;IACF,CAAC;IACD2D,QAAQ,EAAEA,CAACvD,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC7D,MAAM;QAAEhC,IAAI;QAAE4C;MAAkB,CAAC,GAAGvC,OAAO;MAC3CF,MAAM,CAACuD,QAAQ,GAAG1B,OAAO,CAAC3C,MAAM,CAC9B,GAAEW,IAAK,WAAU,EAClB4C,iBAAiB,CAACnD,WAAW,CAAC,EAC9BY,OAAO,CACP;IACF,CAAC;IACD2J,aAAa,EAAEA,CACd7J,MAAM,EACNV,WAAW,EACXY,OAAO,EAAA4J,MAAA,EAEPjI,OAAO,KACH;MAAA,IAFJ;QAAEkI;MAAe,CAAC,GAAAD,MAAA;MAGlB,MAAM;QAAEjK,IAAI;QAAE4C;MAAkB,CAAC,GAAGvC,OAAO;MAC3CF,MAAM,CAAC6J,aAAa,GAAGxK,iBAAiB,CAACC,WAAW,EAAE,CAACM,CAAC,EAAEoK,SAAS,KAAK;QACvE,IAAI,CAACD,cAAc,IAAIA,cAAc,CAACtK,MAAM,KAAK,CAAC,EACjD,OAAOgD,iBAAiB,CAAC7C,CAAC,CAAC;QAC5B,OAAOiC,OAAO,CACZ3C,MAAM,CAAE,GAAEW,IAAK,GAAEmK,SAAU,WAAU,EAAEvH,iBAAiB,CAAC7C,CAAC,CAAC,EAAEM,OAAO,CAAC,CACrE+J,MAAM,CAACC,OAAO,IAAI;UAClB,MAAMC,aAAa,GAAGlL,MAAM,CAACG,IAAI,CAAC8K,OAAO,CAAC,CACxChH,GAAG,CAAC/D,GAAG,IAAK,GAAE+K,OAAO,CAAC/K,GAAG,CAAE,EAAC,CAAC,CAC7BiL,IAAI,CAAC,IAAI,CAAC;UACZ,OAAO,CAACL,cAAc,CAACjF,IAAI,CAACmF,MAAM,IACjCA,MAAM,CAACC,OAAO,EAAEC,aAAa,CAAC,CAC9B;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACH,CAAC;IACD9H,YAAY,EAAEA,CACbrC,MAAM,EACNV,WAAW,EAAA+K,MAAA,EAAAC,MAAA,KAGP;MAAA,IAFJ;QAAE9H,eAAe;QAAEC;MAAkB,CAAC,GAAA4H,MAAA;MAAA,IACtC;QAAEhI,YAAY;QAAEgB,MAAM;QAAEE;MAAS,CAAC,GAAA+G,MAAA;MAElC,IAAIjI,YAAY,KAAK,MAAM,EAAE;QAC5B,IAAIkB,QAAQ,EAAE;UACb,MAAMA,QAAQ,GAAGd,iBAAiB,CAACnD,WAAW,CAAC;UAC/CU,MAAM,CAACuK,2BAA2B,GAAGhH,QAAQ,CAC3CL,GAAG,CAACsH,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAAC7H,OAAO,CAAC,CAC5CsH,MAAM,CAACQ,OAAO,CAAC,CAAChL,MAAM;QACzB;QACA,IAAI4D,MAAM,EAAE;UACX,MAAMA,MAAM,GAAGb,eAAe,CAAClD,WAAW,CAAC;UAC3C,IAAI+D,MAAM,CAAC5D,MAAM,IAAI,CAAC,EAAE;YACvBO,MAAM,CAAC0K,yBAAyB,GAAGrH,MAAM,CACvCH,GAAG,CAACsH,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAAC7H,OAAO,CAAC,CAC5CsH,MAAM,CAACQ,OAAO,CAAC,CAAChL,MAAM;UACzB;QACD;MACD;IACD,CAAC;IACDE,QAAQ,EAAEA,CAACK,MAAM,EAAEV,WAAW,EAAEY,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC7D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxBF,MAAM,CAACL,QAAQ,GAAGkC,OAAO,CAAC3C,MAAM,CAC9B,GAAEW,IAAK,WAAU,EAClBP,WAAW,CAACK,QAAQ,EACpBO,OAAO,CACP;IACF;EACD,CAAC;EACDoH,KAAK,EAAE;IACNvH,CAAC,EAAEA,CAACC,MAAM,EAAEsH,KAAK,EAAEpH,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAChD,MAAM;QAAEvC;MAAY,CAAC,GAAGY,OAAO;MAC/BF,MAAM,CAACH,IAAI,GAAGyH,KAAK,CAACzH,IAAI;MACxBG,MAAM,CAACQ,IAAI,GAAG8G,KAAK,CAAC9G,IAAI;MACxBR,MAAM,CAACwJ,IAAI,GAAGlC,KAAK,CAACqD,MAAM,CAACnB,IAAI,EAAE;MACjCxJ,MAAM,CAAC4K,OAAO,GAAGtL,WAAW,CAACuL,aAAa,CAAC5I,GAAG,CAACqF,KAAK,CAAC9G,IAAI,CAAC;MAC1DR,MAAM,CAAC8K,eAAe,GAAGxL,WAAW,CAACyL,qBAAqB,CAAC9I,GAAG,CAC7DqF,KAAK,CAAC9G,IAAI,CACV;MACD,MAAMwK,MAAM,GAAG,CAAChL,MAAM,CAAC4K,OAAO,IAAI,CAAC5K,MAAM,CAAC8K,eAAe;MACzD9K,MAAM,CAACgL,MAAM,GAAGA,MAAM;MACtBhL,MAAM,CAACgE,IAAI,GAAGsD,KAAK,CAACtD,IAAI;MACxB,IAAI,CAACgH,MAAM,IAAIpJ,OAAO,CAACqJ,YAAY,EAAE;QACpChM,MAAM,CAACiM,MAAM,CACZlL,MAAM,EACN6B,OAAO,CAAC3C,MAAM,CAAE,GAAEgB,OAAO,CAACL,IAAK,UAAS,EAAEyH,KAAK,EAAEpH,OAAO,CAAC,CACzD;MACF;IACD;EACD,CAAC;EACDiL,aAAa,EAAE;IACdpL,CAAC,EAAEA,CACFC,MAAM,EACNsH,KAAK,EAAA8D,MAAA,KAED;MAAA,IADJ;QAAE9L,WAAW;QAAEwH,uBAAuB;QAAEE;MAAiC,CAAC,GAAAoE,MAAA;MAE1E,MAAMnE,MAAM,GAAGH,uBAAuB,CAAC1D,GAAG,CAACkE,KAAK,CAAC9G,IAAI,CAAC,IAAI,EAAE;MAC5D,MAAM6K,eAAe,GACpBrE,gCAAgC,CAAC5D,GAAG,CAACkE,KAAK,CAAC9G,IAAI,CAAC,IAAI,EAAE;MACvDR,MAAM,CAACsL,UAAU,GAAG5M,kBAAkB,CACrCuI,MAAM,EACNrH,CAAC,IAAKA,CAAC,CAACY,IAAI,GAAG,CAACZ,CAAC,CAACY,IAAI,CAAC,GAAG,EAAG,EAC7B9C,UAAU,CACV;MACDsC,MAAM,CAACuL,YAAY,GAAG7M,kBAAkB,CACvCuI,MAAM,EACNrH,CAAC,IAAIpB,KAAK,CAACC,IAAI,CAACmB,CAAC,CAAC4L,WAAW,CAAC,EAC9B9N,UAAU,CACV;MACDsC,MAAM,CAACyL,mBAAmB,GAAG/M,kBAAkB,CAC9C2M,eAAe,EACfzL,CAAC,IAAKA,CAAC,CAACY,IAAI,GAAG,CAACZ,CAAC,CAACY,IAAI,CAAC,GAAG,EAAG,EAC7B9C,UAAU,CACV;MACDsC,MAAM,CAAC0L,qBAAqB,GAAGhN,kBAAkB,CAChD2M,eAAe,EACfzL,CAAC,IAAIpB,KAAK,CAACC,IAAI,CAACmB,CAAC,CAAC4L,WAAW,CAAC,EAC9B9N,UAAU,CACV;MACDsC,MAAM,CAAC2L,eAAe,GAAGrE,KAAK,CAACE,OAAO,GAAGF,KAAK,CAACE,OAAO,CAAC/H,MAAM,GAAG4F,SAAS;IAC1E,CAAC;IACDuG,aAAa,EAAEA,CAAC5L,MAAM,EAAEsH,KAAK,EAAEpH,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC5D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxBF,MAAM,CAACwH,OAAO,GAAG3F,OAAO,CAAC3C,MAAM,CAC7B,GAAEW,IAAI,CAAC2F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,UAAS,EAC9B8B,KAAK,CAACE,OAAO,EACbtH,OAAO,CACP;MACDF,MAAM,CAAC2L,eAAe,GAAGrE,KAAK,CAACE,OAAO,GACnCF,KAAK,CAACE,OAAO,CAAC/H,MAAM,GAAGO,MAAM,CAACwH,OAAO,CAAC/H,MAAM,GAC5C4F,SAAS;IACb,CAAC;IACDjE,GAAG,EAAEA,CACJpB,MAAM,EACNsH,KAAK,EAAAuE,MAAA,KAED;MAAA,IADJ;QAAE/E,uBAAuB;QAAEE;MAAiC,CAAC,GAAA6E,MAAA;MAE7D,MAAM5E,MAAM,GAAGH,uBAAuB,CAAC1D,GAAG,CAACkE,KAAK,CAAC9G,IAAI,CAAC,IAAI,EAAE;MAC5D,MAAM6K,eAAe,GACpBrE,gCAAgC,CAAC5D,GAAG,CAACkE,KAAK,CAAC9G,IAAI,CAAC,IAAI,EAAE;MACvDR,MAAM,CAACiH,MAAM,GAAGvI,kBAAkB,CAACuI,MAAM,EAAErH,CAAC,IAAIA,CAAC,CAACwB,GAAG,EAAE1D,UAAU,CAAC;MAClEsC,MAAM,CAACqL,eAAe,GAAG3M,kBAAkB,CAC1C2M,eAAe,EACfzL,CAAC,IAAIA,CAAC,CAACwB,GAAG,EACV1D,UAAU,CACV;IACF,CAAC;IACDoO,WAAW,EAAEA,CAAC9L,MAAM,EAAEsH,KAAK,KAAK;MAC/BtH,MAAM,CAAC+L,eAAe,GAAG1O,gBAAgB,CAAC0O,eAAe,CAACzE,KAAK,CAACqD,MAAM,CAAC;IACxE;EACD,CAAC;EACDtB,UAAU,EAAE;IACXtJ,CAAC,EAAEA,CACFC,MAAM,EAAAgM,MAAA,EAAAC,MAAA,EAAAC,MAAA,KAIF;MAAA,IAHJ;QAAE1L,IAAI;QAAE6I;MAAW,CAAC,GAAA2C,MAAA;MAAA,IACpB;QAAE1M,WAAW;QAAEA,WAAW,EAAE;UAAEwC,WAAW;UAAER;QAAW;MAAE,CAAC,GAAA2K,MAAA;MAAA,IACzD;QAAE7K,GAAG;QAAE6H,mBAAmB;QAAEC,kBAAkB;QAAEiD;MAAoB,CAAC,GAAAD,MAAA;MAErE,MAAMvM,QAAQ,GACbuJ,kBAAkB,IAClBG,UAAU,CAAC+C,mBAAmB,CAACtK,WAAW,EAAER,UAAU,CAAC;MACxD;AACH;AACA;AACA;MACG,MAAM+K,OAAO,GAAG7L,IAAI,IAAI;QACvB,MAAM8G,KAAK,GAAGhI,WAAW,CAACgN,QAAQ,CAAC9L,IAAI,CAAC;QACxC,OAAO;UACNA,IAAI;UACJgJ,IAAI,EAAElC,KAAK,GAAGA,KAAK,CAACtD,IAAI,CAACwF,IAAI,GAAG,CAAC;QAClC,CAAC;MACF,CAAC;MACD;MACA,MAAM+C,WAAW,GAAGA,CAACC,KAAK,EAAAC,MAAA;QAAA,IAAE;UAAEjD;QAAK,CAAC,GAAAiD,MAAA;QAAA,OAAKD,KAAK,GAAGhD,IAAI;MAAA;MACrD,MAAM3C,MAAM,GAAG7I,WAAW,CAACqL,UAAU,CAACpC,MAAM,EAAErH,CAAC,IAAIA,CAAC,CAACsH,KAAK,CAAC,CAAChE,GAAG,CAACmJ,OAAO,CAAC;MACxE,MAAMK,eAAe,GAAGhO,kBAAkB,CACzC2K,UAAU,CAACpC,MAAM,EACjBrH,CAAC,IAAIA,CAAC,CAACwH,cAAc,EACrB1J,UAAU,CACV,CAACwF,GAAG,CAACmJ,OAAO,CAAC;MACd,MAAMM,UAAU,GAAG9F,MAAM,CAAC+F,MAAM,CAACL,WAAW,EAAE,CAAC,CAAC;MAChD,MAAMM,mBAAmB,GAAGH,eAAe,CAACE,MAAM,CAACL,WAAW,EAAE,CAAC,CAAC;MAClE;MACA,MAAMO,eAAe,GAAG;QACvBtM,IAAI;QACJyG,MAAM,EAAE7F,GAAG,GAAGiI,UAAU,CAACpC,MAAM,CAAC/D,GAAG,CAACtD,CAAC,IAAIA,CAAC,CAAC4B,EAAE,CAAC,GAAG6D,SAAS;QAC1DwB,MAAM,EAAEA,MAAM,CAACpH,MAAM,IAAI0M,mBAAmB,GAAGtF,MAAM,GAAGxB,SAAS;QACjEmD,cAAc,EACb3B,MAAM,CAACpH,MAAM,IAAI0M,mBAAmB,GAAG,CAAC,GAAGtF,MAAM,CAACpH,MAAM;QACzDkN,UAAU;QACVD,eAAe,EACdzD,mBAAmB,IAAIyD,eAAe,CAACjN,MAAM,IAAI0M,mBAAmB,GACjEO,eAAe,GACfrH,SAAS;QACb0H,uBAAuB,EACtB9D,mBAAmB,IAAIyD,eAAe,CAACjN,MAAM,IAAI0M,mBAAmB,GACjE,CAAC,GACDO,eAAe,CAACjN,MAAM;QAC1BoN,mBAAmB;QACnBlN,QAAQ,EAAEA,QAAQ,GACfd,SAAS,CAACc,QAAQ,EAAEqN,MAAM,IAC1BA,MAAM,CAAC9J,GAAG,CAACgB,KAAK,IAAI;UACnB,MAAM2C,MAAM,GAAG7I,WAAW,CAACkG,KAAK,CAAC+C,MAAM,EAAErH,CAAC,IAAIA,CAAC,CAACsH,KAAK,CAAC,CAAChE,GAAG,CACzDmJ,OAAO,CACP;UACD,MAAMK,eAAe,GAAGhO,kBAAkB,CACzCwF,KAAK,CAAC+C,MAAM,EACZrH,CAAC,IAAIA,CAAC,CAACwH,cAAc,EACrB1J,UAAU,CACV,CAACwF,GAAG,CAACmJ,OAAO,CAAC;;UAEd;UACA,MAAMY,oBAAoB,GAAG;YAC5BzM,IAAI,EAAE0D,KAAK,CAAC1D,IAAI;YAChByG,MAAM,EAAE7F,GAAG,GAAG8C,KAAK,CAAC+C,MAAM,CAAC/D,GAAG,CAACtD,CAAC,IAAIA,CAAC,CAAC4B,EAAE,CAAC,GAAG6D,SAAS;YACrDwB,MAAM,EACLA,MAAM,CAACpH,MAAM,IAAI0M,mBAAmB,GAAGtF,MAAM,GAAGxB,SAAS;YAC1DmD,cAAc,EACb3B,MAAM,CAACpH,MAAM,IAAI0M,mBAAmB,GAAG,CAAC,GAAGtF,MAAM,CAACpH,MAAM;YACzDiN,eAAe,EACdzD,mBAAmB,IACnByD,eAAe,CAACjN,MAAM,IAAI0M,mBAAmB,GAC1CO,eAAe,GACfrH,SAAS;YACb0H,uBAAuB,EACtB9D,mBAAmB,IACnByD,eAAe,CAACjN,MAAM,IAAI0M,mBAAmB,GAC1C,CAAC,GACDO,eAAe,CAACjN;UACrB,CAAC;UAED,OAAOwN,oBAAoB;QAC5B,CAAC,CAAC,CACD,GACD5H,SAAS;QACZ6H,WAAW,EAAEvN,QAAQ,GAClBd,SAAS,CAACc,QAAQ,EAAEqN,MAAM,IAAI;UAC9B;UACA,MAAM7O,GAAG,GAAG,IAAIC,GAAG,EAAE;UACrB,KAAK,MAAM8F,KAAK,IAAI8I,MAAM,EAAE;YAC3B,KAAK,MAAM1M,KAAK,IAAI4D,KAAK,CAAC+C,MAAM,EAAE;cACjC,KAAK,MAAMK,KAAK,IAAIhH,KAAK,CAAC4G,KAAK,EAAE;gBAChC/I,GAAG,CAACI,GAAG,CAAC+I,KAAK,CAAC;cACf;YACD;UACD;UACA,OAAO9I,KAAK,CAACC,IAAI,CAACN,GAAG,CAAC;QACtB,CAAC,CAAC,GACFkH;MACJ,CAAC;MACDpG,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAE8M,eAAe,CAAC;IACvC,CAAC;IACDhB,WAAW,EAAEA,CAAC9L,MAAM,EAAAmN,MAAA,KAAqB;MAAA,IAAnB;QAAE9D;MAAW,CAAC,GAAA8D,MAAA;MACnCnN,MAAM,CAAC+L,eAAe,GAAG1O,gBAAgB,CAAC0O,eAAe,CAAC1C,UAAU,CAAC;IACtE;EACD,CAAC;EACDvI,MAAM,EAAE;IACPf,CAAC,EAAEA,CAACC,MAAM,EAAEc,MAAM,EAAEZ,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MACjD,MAAM;QAAEvC,WAAW;QAAEO;MAAK,CAAC,GAAGK,OAAO;MACrC,MAAMkN,KAAK,GAAG9N,WAAW,CAAC+N,YAAY,CAACpL,GAAG,CAACnB,MAAM,CAAC;MAClD,MAAMwM,aAAa,GAAGhO,WAAW,CAACiO,oBAAoB,CAACtL,GAAG,CAACnB,MAAM,CAAC;MAClE,MAAM0M,iBAAiB,GACtBlO,WAAW,CAACmO,wBAAwB,CAACxL,GAAG,CAACnB,MAAM,CAAC;MACjD;MACA,MAAM4M,KAAK,GAAG,CAAC,CAAC;MAChB,KAAK,MAAMC,UAAU,IAAI7M,MAAM,CAAC8M,cAAc,EAAE,EAAE;QACjDF,KAAK,CAACC,UAAU,CAAC,GAAG7M,MAAM,CAAC0I,IAAI,CAACmE,UAAU,CAAC;MAC5C;MACA;MACA,MAAME,WAAW,GAAG;QACnBhO,IAAI,EAAE,QAAQ;QACdiO,UAAU,EAAEhN,MAAM,CAACjB,IAAI;QACvBkO,KAAK,EAAEjN,MAAM,CAACiN,KAAK;QACnBvE,IAAI,EAAE1I,MAAM,CAAC0I,IAAI,EAAE;QACnBkE,KAAK;QACLN,KAAK;QACLE,aAAa;QACbE,iBAAiB;QACjBxC,MAAM,EAAE,CAACoC,KAAK,IAAI,CAACE;MACpB,CAAC;MACDrO,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAE6N,WAAW,CAAC;MAElC,IAAIT,KAAK,IAAIE,aAAa,IAAI1L,OAAO,CAACoM,aAAa,EAAE;QACpD/O,MAAM,CAACiM,MAAM,CACZlL,MAAM,EACN6B,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAK,UAAS,EAAEiB,MAAM,EAAEZ,OAAO,CAAC,CAClD;MACF;IACD;EACD,CAAC;EACD+N,cAAc,EAAE;IACflO,CAAC,EAAEA,CAACC,MAAM,EAAEc,MAAM,EAAEZ,OAAO,EAAAgO,MAAA,EAAwBrM,OAAO,KAAK;MAAA,IAAlC;QAAEzB;MAAiB,CAAC,GAAA8N,MAAA;MAChD,MAAM;QAAE5O,WAAW;QAAEO,IAAI;QAAEsO;MAAY,CAAC,GAAGjO,OAAO;MAClD,MAAM;QAAE4B;MAAY,CAAC,GAAGxC,WAAW;MACnC;MACA,MAAMsH,IAAI,GAAG,EAAE;MACf,MAAMwH,MAAM,GAAGtM,WAAW,CAACK,SAAS,CAACrB,MAAM,CAAC;MAC5C,IAAIkB,OAAO,GAAGoM,MAAM;MACpB,OAAOpM,OAAO,EAAE;QACf4E,IAAI,CAACxE,IAAI,CAACJ,OAAO,CAAC;QAClBA,OAAO,GAAGF,WAAW,CAACK,SAAS,CAACH,OAAO,CAAC;MACzC;MACA4E,IAAI,CAACyH,OAAO,EAAE;MACd,MAAM/J,OAAO,GAAGxC,WAAW,CAACwM,UAAU,CAACxN,MAAM,CAAC;MAC9C,MAAMuC,MAAM,GAAGvC,MAAM,CAACwC,SAAS,EAAE;MACjC,MAAMqG,WAAW,GAAGtG,MAAM,KAAKgC,SAAS,GAAG/H,aAAa,CAAC+F,MAAM,CAAC,GAAG,CAAC;MACpE,MAAME,QAAQ,GAAGzC,MAAM,CAAC0C,WAAW,EAAE;MACrC,MAAMqG,aAAa,GAClBtG,QAAQ,KAAK8B,SAAS,GAAG/H,aAAa,CAACiG,QAAQ,CAAC,GAAG,CAAC;MACrD;MACA,MAAMmK,KAAK,GAAG,CAAC,CAAC;MAChB,KAAK,MAAMC,UAAU,IAAI7M,MAAM,CAAC8M,cAAc,EAAE,EAAE;QACjDF,KAAK,CAACC,UAAU,CAAC,GAAG7M,MAAM,CAAC0I,IAAI,CAACmE,UAAU,CAAC;MAC5C;MACA;MACA,MAAME,WAAW,GAAG;QACnB7M,UAAU,EAAEF,MAAM,CAACE,UAAU,EAAE;QAC/BR,IAAI,EAAEM,MAAM,CAACI,kBAAkB,CAACd,gBAAgB,CAAC;QACjDmO,gBAAgB,EAAEzN,MAAM,CAACyN,gBAAgB,EAAE;QAC3CC,KAAK,EAAE1M,WAAW,CAAC2M,gBAAgB,CAAC3N,MAAM,CAAC;QAC3C4N,aAAa,EAAE5M,WAAW,CAAC2M,gBAAgB,CAAC3N,MAAM,CAAC;QACnD6N,MAAM,EAAE7M,WAAW,CAAC8M,iBAAiB,CAAC9N,MAAM,CAAC;QAC7C+N,cAAc,EAAE/M,WAAW,CAAC8M,iBAAiB,CAAC9N,MAAM,CAAC;QACrDgO,SAAS,EAAEhO,MAAM,CAACiO,SAAS,CAACD,SAAS;QACrCE,QAAQ,EAAElO,MAAM,CAACmO,UAAU,CAACnN,WAAW,CAAC;QACxCoN,MAAM,EACL,CAACrP,IAAI,CAAC6C,QAAQ,CAAC,iCAAiC,CAAC,IACjDpD,WAAW,CAACgC,UAAU,CAAC6N,uBAAuB,CAACrO,MAAM,CAAC,KAAK,CAAC;QAC7DsO,SAAS,EAAEjB,WAAW,GAAG,CAACA,WAAW,CAAClM,GAAG,CAACnB,MAAM,CAAC,GAAGuE,SAAS;QAC7D+I,MAAM,EAAEA,MAAM,IAAIA,MAAM,CAACpN,UAAU,EAAE;QACrCqO,UAAU,EAAEjB,MAAM,IAAIA,MAAM,CAAClN,kBAAkB,CAACd,gBAAgB,CAAC;QACjEkP,UAAU,EACTlB,MAAM,IACNvM,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAI,CAAC2F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,aAAY,EAAEoB,IAAI,EAAE1G,OAAO,CAAC;QACjEqP,MAAM,EAAE5F,WAAW,GAAG,CAAC;QACvBtG,MAAM,EAAEsG,WAAW;QACnBpG,QAAQ,EAAEsG;MACX,CAAC;MACD5K,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAE6N,WAAW,CAAC;MAClC,IAAIvJ,OAAO,EAAE;QACZtE,MAAM,CAACsE,OAAO,GAAGzC,OAAO,CAAC3C,MAAM,CAC7B,GAAEW,IAAI,CAAC2F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,UAAS,EAC9BlB,OAAO,EACPpE,OAAO,CACP;MACF;IACD,CAAC;IACDkB,GAAG,EAAEA,CAACpB,MAAM,EAAEc,MAAM,EAAA0O,MAAA,KAAmD;MAAA,IAAjD;QAAElQ,WAAW,EAAE;UAAEgC,UAAU;UAAEQ;QAAY;MAAE,CAAC,GAAA0N,MAAA;MACjExP,MAAM,CAACwB,EAAE,GAAGF,UAAU,CAACI,WAAW,CAACZ,MAAM,CAAC;MAC1C,MAAMsN,MAAM,GAAGtM,WAAW,CAACK,SAAS,CAACrB,MAAM,CAAC;MAC5Cd,MAAM,CAACyP,QAAQ,GAAGrB,MAAM,IAAI9M,UAAU,CAACI,WAAW,CAAC0M,MAAM,CAAC;MAC1DpO,MAAM,CAACiH,MAAM,GAAGzI,KAAK,CAACC,IAAI,CACzB6C,UAAU,CAACoO,8BAA8B,CAAC5O,MAAM,EAAEtD,iBAAiB,CAAC,EACpE8C,KAAK,IAAIA,KAAK,CAACkB,EAAE,CACjB;IACF,CAAC;IACDmO,YAAY,EAAEA,CAAC3P,MAAM,EAAEc,MAAM,KAAK;MACjCd,MAAM,CAAC6G,MAAM,GAAG/F,MAAM,CAACiO,SAAS,CAAClI,MAAM,GACpC5H,MAAM,CAACG,IAAI,CAAC0B,MAAM,CAACiO,SAAS,CAAClI,MAAM,CAAC,GACpC,EAAE;IACN,CAAC;IACD+I,OAAO,EAAEA,CAAC5P,MAAM,EAAEc,MAAM,EAAEZ,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MACvD,MAAM;QACLhC,IAAI;QACJP,WAAW,EAAE;UAAEwC;QAAY;MAC5B,CAAC,GAAG5B,OAAO;MACX,MAAM2P,aAAa,GAAGhO,OAAO,CAAC3C,MAAM,CAClC,GAAEW,IAAI,CAAC2F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,UAAS,EAC9BhH,KAAK,CAACC,IAAI,CAACqD,WAAW,CAACgO,sBAAsB,CAAChP,MAAM,CAAC,CAAC,EACtDZ,OAAO,CACP;MACD,MAAMmI,OAAO,GAAGC,YAAY,CAACuH,aAAa,EAAEjO,OAAO,CAACmO,YAAY,CAAC;MACjE/P,MAAM,CAAC4P,OAAO,GAAGvH,OAAO,CAAC1I,QAAQ;MACjCK,MAAM,CAACgQ,eAAe,GAAG3H,OAAO,CAACI,gBAAgB;IAClD,CAAC;IACDwH,WAAW,EAAEA,CACZjQ,MAAM,EACNc,MAAM,EAAAoP,MAAA,KAEF;MAAA,IADJ;QAAEC,OAAO;QAAE7Q,WAAW,EAAE;UAAEwC;QAAY;MAAE,CAAC,GAAAoO,MAAA;MAEzC,MAAMD,WAAW,GAAGnO,WAAW,CAACsO,cAAc,CAACtP,MAAM,EAAEqP,OAAO,CAAC;MAC/D,IAAIF,WAAW,KAAK,IAAI,EAAE;QACzBjQ,MAAM,CAACiQ,WAAW,GAAG,IAAI;MAC1B,CAAC,MAAM,IAAI,OAAOA,WAAW,KAAK,SAAS,EAAE;QAC5CjQ,MAAM,CAACiQ,WAAW,GAAGA,WAAW;MACjC,CAAC,MAAM;QACNjQ,MAAM,CAACiQ,WAAW,GAAGzR,KAAK,CAACC,IAAI,CAACwR,WAAW,CAAC;MAC7C;IACD,CAAC;IACDI,eAAe,EAAEA,CAACrQ,MAAM,EAAEc,MAAM,EAAAwP,MAAA,KAAuC;MAAA,IAArC;QAAEhR,WAAW,EAAE;UAAEwC;QAAY;MAAE,CAAC,GAAAwO,MAAA;MACjE,MAAMD,eAAe,GAAGvO,WAAW,CAACyO,kBAAkB,CAACzP,MAAM,CAAC;MAC9Dd,MAAM,CAACqQ,eAAe,GAAG7R,KAAK,CAACoJ,OAAO,CAACyI,eAAe,CAAC,GACpDA,eAAe,GACf,IAAI;IACR,CAAC;IACDG,mBAAmB,EAAEA,CACpBxQ,MAAM,EACNc,MAAM,EAAA2P,MAAA,EAAAC,MAAA,KAGF;MAAA,IAFJ;QAAEpR,WAAW,EAAE;UAAEwC;QAAY;MAAE,CAAC,GAAA2O,MAAA;MAAA,IAChC;QAAErQ;MAAiB,CAAC,GAAAsQ,MAAA;MAEpB1Q,MAAM,CAACwQ,mBAAmB,GAAG1O,WAAW,CACtC6O,sBAAsB,CAAC7P,MAAM,CAAC,CAC9BoC,GAAG,CAAC7E,IAAI,IAAI;QACZ,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE,OAAOA,IAAI,CAAC+B,gBAAgB,CAAC;QAC7D,OAAO/B,IAAI;MACZ,CAAC,CAAC;IACJ,CAAC;IACDuS,KAAK,EAAEA,CAAC5Q,MAAM,EAAEc,MAAM,EAAA+P,MAAA,KAAuC;MAAA,IAArC;QAAEvR,WAAW,EAAE;UAAEwC;QAAY;MAAE,CAAC,GAAA+O,MAAA;MACvD7Q,MAAM,CAAC4Q,KAAK,GAAG9O,WAAW,CAACgP,QAAQ,CAAChQ,MAAM,CAAC;IAC5C,CAAC;IACDiQ,aAAa,EAAEA,CAAC/Q,MAAM,EAAEc,MAAM,EAAEZ,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC7D,MAAM;QAAEhC;MAAK,CAAC,GAAGK,OAAO;MACxB,MAAM8Q,YAAY,GAAG,8CACpBlQ,MAAM,CACL4H,OAAO;MACT,IAAIlK,KAAK,CAACoJ,OAAO,CAACoJ,YAAY,CAAC,EAAE;QAChC,MAAMrI,cAAc,GAAG9G,OAAO,CAAC3C,MAAM,CACnC,GAAEW,IAAI,CAAC2F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,UAAS,EAC9BwL,YAAY,EACZ9Q,OAAO,CACP;QACD,MAAMmI,OAAO,GAAGC,YAAY,CAC3BK,cAAc,EACd/G,OAAO,CAACqP,kBAAkB,CAC1B;QACDjR,MAAM,CAAC0I,OAAO,GAAGL,OAAO,CAAC1I,QAAQ;QACjCK,MAAM,CAAC6I,eAAe,GAAGR,OAAO,CAACI,gBAAgB;MAClD;IACD,CAAC;IACDkC,MAAM,EAAEA,CAAC3K,MAAM,EAAEc,MAAM,KAAK;MAC3B,MAAMoQ,cAAc,GAAGpQ,MAAM,CAACoQ,cAAc,EAAE;MAC9C,IAAIA,cAAc,EAAE;QACnBlR,MAAM,CAAC2K,MAAM,GAAGuG,cAAc,CAACvG,MAAM,EAAE;MACxC;IACD;EACD,CAAC;EACDrG,OAAO,EAAE;IACRvE,CAAC,EAAEA,CAACC,MAAM,EAAEsE,OAAO,KAAK;MACvB;MACA,MAAM6M,YAAY,GAAG;QACpB3E,KAAK,EACJlI,OAAO,CAACzC,OAAO,GACfyC,OAAO,CAAC8M,SAAS,GACjB9M,OAAO,CAAC+M,WAAW,GACnB/M,OAAO,CAACgN,QAAQ,GAChBhN,OAAO,CAACiN,OAAO;QAChBC,SAAS,EAAElN,OAAO,CAACzC,OAAO;QAC1BuP,SAAS,EAAE9M,OAAO,CAAC8M,SAAS;QAC5BE,QAAQ,EAAEhN,OAAO,CAACgN,QAAQ;QAC1BD,WAAW,EAAE/M,OAAO,CAAC+M,WAAW;QAChCE,OAAO,EAAEjN,OAAO,CAACiN,OAAO;QACxBE,mBAAmB,EAAEnN,OAAO,CAACoN,mBAAmB;QAChDC,qBAAqB,EAAErN,OAAO,CAACqN,qBAAqB;QACpD;QACA9P,OAAO,EAAEyC,OAAO,CAACzC,OAAO;QACxB;QACA+P,YAAY,EAAEtN,OAAO,CAACoN;MACvB,CAAC;MACDzS,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAEmR,YAAY,CAAC;IACpC;EACD,CAAC;EACDU,YAAY,EAAE;IACb9R,CAAC,EAAEA,CAACC,MAAM,EAAEc,MAAM,EAAEZ,OAAO,EAAA4R,MAAA,EAAwBjQ,OAAO,KAAK;MAAA,IAAlC;QAAEzB;MAAiB,CAAC,GAAA0R,MAAA;MAChD,MAAM;QAAExS,WAAW;QAAEO;MAAK,CAAC,GAAGK,OAAO;MACrC,MAAM;QAAE4B;MAAY,CAAC,GAAGxC,WAAW;MACnC,MAAMgF,OAAO,GAAGxC,WAAW,CAACwM,UAAU,CAACxN,MAAM,CAAC;MAC9C;MACA,MAAMiR,iBAAiB,GAAG;QACzB/Q,UAAU,EAAEF,MAAM,CAACE,UAAU,EAAE;QAC/BR,IAAI,EAAEM,MAAM,CAACI,kBAAkB,CAACd,gBAAgB;MACjD,CAAC;MACDnB,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAE+R,iBAAiB,CAAC;MACxC,IAAIzN,OAAO,EAAE;QACZtE,MAAM,CAACsE,OAAO,GAAGzC,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAK,UAAS,EAAEyE,OAAO,EAAEpE,OAAO,CAAC;MACrE;IACD,CAAC;IACDkB,GAAG,EAAEA,CAACpB,MAAM,EAAEc,MAAM,EAAAkR,MAAA,KAAsC;MAAA,IAApC;QAAE1S,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAA0Q,MAAA;MACpDhS,MAAM,CAACwB,EAAE,GAAGF,UAAU,CAACI,WAAW,CAACZ,MAAM,CAAC;IAC3C;EACD,CAAC;EACDmR,YAAY,EAAE;IACblS,CAAC,EAAEA,CAACC,MAAM,EAAEkS,MAAM,EAAAC,MAAA,EAAAC,MAAA,KAAwC;MAAA,IAAtC;QAAEjC;MAAQ,CAAC,GAAAgC,MAAA;MAAA,IAAE;QAAE/R;MAAiB,CAAC,GAAAgS,MAAA;MACpD,MAAMvK,GAAG,GAAGqK,MAAM,CAACG,UAAU;MAC7B,MAAMC,SAAS,GACdzK,GAAG,IAAIA,GAAG,YAAY5K,gBAAgB,GAAG4K,GAAG,GAAGxC,SAAS;MACzD;MACA,MAAMkN,iBAAiB,GAAG;QACzBxR,gBAAgB,EAAEmR,MAAM,CAACM,YAAY,GAClCN,MAAM,CAACM,YAAY,CAACxR,UAAU,EAAE,GAChC,IAAI;QACPF,MAAM,EAAEoR,MAAM,CAACM,YAAY,GACxBN,MAAM,CAACM,YAAY,CAACtR,kBAAkB,CAACd,gBAAgB,CAAC,GACxD,IAAI;QACPa,UAAU,EAAEiR,MAAM,CAACM,YAAY,GAC5BN,MAAM,CAACM,YAAY,CAACtR,kBAAkB,CAACd,gBAAgB,CAAC,GACxD,IAAI;QACPqS,wBAAwB,EAAEP,MAAM,CAACQ,oBAAoB,GAClDR,MAAM,CAACQ,oBAAoB,CAAC1R,UAAU,EAAE,GACxC,IAAI;QACP2R,cAAc,EAAET,MAAM,CAACQ,oBAAoB,GACxCR,MAAM,CAACQ,oBAAoB,CAACxR,kBAAkB,CAACd,gBAAgB,CAAC,GAChE,IAAI;QACPP,IAAI,EAAEqS,MAAM,CAACG,UAAU,GAAGH,MAAM,CAACG,UAAU,CAACxS,IAAI,GAAG,IAAI;QACvD+S,MAAM,EAAEV,MAAM,CAACW,QAAQ,CAAC1C,OAAO,CAAC;QAChC2C,WAAW,EAAEZ,MAAM,CAACY,WAAW;QAC/BC,WAAW,EAAGT,SAAS,IAAIA,SAAS,CAACS,WAAW,IAAK;MACtD,CAAC;MACD9T,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAEuS,iBAAiB,CAAC;MACxC,IAAIL,MAAM,CAACG,UAAU,EAAE;QACtB,MAAMW,OAAO,GAAG9V,cAAc,CAACgV,MAAM,CAACG,UAAU,CAAClR,GAAG,CAAC;QACrD,IAAI6R,OAAO,EAAE;UACZhT,MAAM,CAACmB,GAAG,GAAG6R,OAAO;QACrB;MACD;IACD,CAAC;IACD5R,GAAG,EAAEA,CAACpB,MAAM,EAAEkS,MAAM,EAAAe,MAAA,KAAsC;MAAA,IAApC;QAAE3T,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAA2R,MAAA;MACpDjT,MAAM,CAACyB,QAAQ,GAAGyQ,MAAM,CAACM,YAAY,GAClClR,UAAU,CAACI,WAAW,CAACwQ,MAAM,CAACM,YAAY,CAAC,GAC3C,IAAI;MACPxS,MAAM,CAACkT,gBAAgB,GAAGhB,MAAM,CAACQ,oBAAoB,GAClDpR,UAAU,CAACI,WAAW,CAACwQ,MAAM,CAACQ,oBAAoB,CAAC,GACnD,IAAI;IACR;EACD,CAAC;EACDpS,KAAK,EAAE;IACNP,CAAC,EAAEA,CAACC,MAAM,EAAEM,KAAK,EAAA6S,MAAA,KAAyD;MAAA,IAAvD;QAAErV,iBAAiB;QAAEwB,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAA6R,MAAA;MACpE,MAAMC,cAAc,GAAG9S,KAAK,CAAC+S,mBAAmB,CAAC/R,UAAU,CAAC;;MAE5D;MACA,MAAMgS,UAAU,GAAG;QAClBC,QAAQ,EAAEjT,KAAK,CAACiT,QAAQ;QACxBC,OAAO,EAAElT,KAAK,CAACM,YAAY,EAAE;QAC7BuE,KAAK,EAAE7E,KAAK,CAACI,UAAU,EAAE;QACzB+S,QAAQ,EAAErW,yBAAyB,CAACsW,gBAAgB,CAACpT,KAAK,CAAC;QAC3D4R,MAAM,EAAE5R,KAAK,CAACqT,WAAW;QACzBnK,IAAI,EAAElI,UAAU,CAACsS,mBAAmB,CAACtT,KAAK,CAAC;QAC3CoN,KAAK,EAAEpM,UAAU,CAACuS,oBAAoB,CAACvT,KAAK,CAAC;QAC7CwT,KAAK,EAAExT,KAAK,CAACE,IAAI,GAAG,CAACF,KAAK,CAACE,IAAI,CAAC,GAAG,EAAE;QACrCuT,OAAO,EAAEvV,KAAK,CAACC,IAAI,CAAC6B,KAAK,CAACkL,WAAW,CAAC;QACtC2E,OAAO,EACN7P,KAAK,CAAC6P,OAAO,KAAK9K,SAAS,GACxBA,SAAS,GACT,OAAO/E,KAAK,CAAC6P,OAAO,KAAK,QAAQ,GACjC,CAACrS,iBAAiB,CAACwC,KAAK,CAAC6P,OAAO,CAAC,CAAC,GAClC3R,KAAK,CAACC,IAAI,CAAC6B,KAAK,CAAC6P,OAAO,CAACvR,IAAI,EAAE,EAAEd,iBAAiB,CAAC;QACvDoJ,KAAK,EAAE1I,KAAK,CAACC,IAAI,CAAC6B,KAAK,CAAC4G,KAAK,CAAC;QAC9BE,cAAc,EAAE5I,KAAK,CAACC,IAAI,CAAC6B,KAAK,CAAC8G,cAAc,CAAC,CAACxI,IAAI,CAAClB,UAAU,CAAC;QACjEqI,IAAI,EAAEzF,KAAK,CAAC0T,YAAY;QACxBC,eAAe,EAAEb;MAClB,CAAC;MACDnU,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAEsT,UAAU,CAAC;IAClC,CAAC;IACDlS,GAAG,EAAEA,CAACpB,MAAM,EAAEM,KAAK,KAAK;MACvBN,MAAM,CAACwB,EAAE,GAAGlB,KAAK,CAACkB,EAAE;IACrB,CAAC;IACD0S,cAAc,EAAEA,CAAClU,MAAM,EAAEM,KAAK,EAAA6T,MAAA,KAAsC;MAAA,IAApC;QAAE7U,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAA6S,MAAA;MAC9D;MACA,MAAMC,OAAO,GAAG,IAAIhW,GAAG,EAAE;MACzB;MACA,MAAMuB,QAAQ,GAAG,IAAIvB,GAAG,EAAE;MAC1B;MACA,MAAMiW,QAAQ,GAAG,IAAIjW,GAAG,EAAE;MAE1B,KAAK,MAAMiL,UAAU,IAAI/I,KAAK,CAACgU,cAAc,EAAE;QAC9C,KAAK,MAAMC,WAAW,IAAIlL,UAAU,CAACmL,eAAe,EAAE;UACrD,KAAK,MAAMlU,KAAK,IAAIiU,WAAW,CAACtN,MAAM,EAAE;YACvCmN,OAAO,CAAC7V,GAAG,CAAC+B,KAAK,CAACkB,EAAE,CAAC;UACtB;QACD;QACA,KAAK,MAAMiT,UAAU,IAAIpL,UAAU,CAACqL,gBAAgB,EAAE;UACrD,KAAK,MAAMpU,KAAK,IAAImU,UAAU,CAACxN,MAAM,EAAE;YACtCtH,QAAQ,CAACpB,GAAG,CAAC+B,KAAK,CAACkB,EAAE,CAAC;UACvB;QACD;QACA,KAAK,MAAMmT,OAAO,IAAItL,UAAU,CAACpC,MAAM,EAAE;UACxC,IAAI0N,OAAO,KAAKrU,KAAK,EAAE+T,QAAQ,CAAC9V,GAAG,CAACoW,OAAO,CAACnT,EAAE,CAAC;QAChD;MACD;MACAxB,MAAM,CAACqU,QAAQ,GAAG7V,KAAK,CAACC,IAAI,CAAC4V,QAAQ,CAAC,CAACzV,IAAI,CAAClB,UAAU,CAAC;MACvDsC,MAAM,CAACoU,OAAO,GAAG5V,KAAK,CAACC,IAAI,CAAC2V,OAAO,CAAC,CAACxV,IAAI,CAAClB,UAAU,CAAC;MACrDsC,MAAM,CAACL,QAAQ,GAAGnB,KAAK,CAACC,IAAI,CAACkB,QAAQ,CAAC,CAACf,IAAI,CAAClB,UAAU,CAAC;IACxD,CAAC;IACDkX,YAAY,EAAEA,CAAC5U,MAAM,EAAEM,KAAK,EAAEJ,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC3D,MAAM;QACLhC,IAAI;QACJP,WAAW,EAAE;UAAEgC;QAAW;MAC3B,CAAC,GAAGpB,OAAO;MACX,MAAMiH,KAAK,GAAG7F,UAAU,CAACuT,eAAe,CAACvU,KAAK,CAAC;MAC/C,MAAMqI,cAAc,GAAG9G,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAK,UAAS,EAAEsH,KAAK,EAAE;QAC/D,GAAGjH,OAAO;QACViQ,OAAO,EAAE7P,KAAK,CAAC6P,OAAO;QACtBhC,WAAW,EAAE,IAAI/P,GAAG,CAACkD,UAAU,CAACwT,mBAAmB,CAACxU,KAAK,CAAC;MAC3D,CAAC,CAAC;MACF,MAAM+H,OAAO,GAAGC,YAAY,CAACK,cAAc,EAAE/G,OAAO,CAACmT,iBAAiB,CAAC;MACvE/U,MAAM,CAAC0I,OAAO,GAAGL,OAAO,CAAC1I,QAAQ;MACjCK,MAAM,CAAC6I,eAAe,GAAGR,OAAO,CAACI,gBAAgB;IAClD,CAAC;IACDuM,YAAY,EAAEA,CAAChV,MAAM,EAAEM,KAAK,EAAEJ,OAAO,EAAE0B,OAAO,EAAEC,OAAO,KAAK;MAC3D,MAAM;QACLhC,IAAI;QACJP,WAAW,EAAE;UAAEgC;QAAW;MAC3B,CAAC,GAAGpB,OAAO;MACX;MACA,MAAM+U,aAAa,GAAG,IAAI7W,GAAG,EAAE;MAC/B,MAAM8W,OAAO,GAAG,EAAE;MAClB,KAAK,MAAMC,CAAC,IAAI7U,KAAK,CAACgU,cAAc,EAAE;QACrCY,OAAO,CAAC9S,IAAI,CAAC,GAAG+S,CAAC,CAACD,OAAO,CAAC;MAC3B;MACA,MAAM/N,KAAK,GAAG+N,OAAO,CAACjL,MAAM,CAAC/H,MAAM,IAAI;QACtC,MAAM/C,GAAG,GAAG,CACX+C,MAAM,CAACpB,MAAM,GAAGQ,UAAU,CAACI,WAAW,CAACQ,MAAM,CAACpB,MAAM,CAAC,GAAGuE,SAAS,EACjEnI,cAAc,CAACgF,MAAM,CAACf,GAAG,CAAC,EAC1Be,MAAM,CAACkT,OAAO,CACd,CAAChL,IAAI,EAAE;QACR,IAAI6K,aAAa,CAAChT,GAAG,CAAC9C,GAAG,CAAC,EAAE,OAAO,KAAK;QACxC8V,aAAa,CAAC1W,GAAG,CAACY,GAAG,CAAC;QACtB,OAAO,IAAI;MACZ,CAAC,CAAC;MACFa,MAAM,CAACkV,OAAO,GAAGrT,OAAO,CAAC3C,MAAM,CAAE,GAAEW,IAAK,UAAS,EAAEsH,KAAK,EAAEjH,OAAO,CAAC;IACnE;EACD,CAAC;EACDmV,WAAW,EAAE;IACZtV,CAAC,EAAEA,CAACC,MAAM,EAAEkC,MAAM,EAAEhC,OAAO,EAAAoV,MAAA,KAA2B;MAAA,IAAzB;QAAElV;MAAiB,CAAC,GAAAkV,MAAA;MAChD;MACA,MAAMC,gBAAgB,GAAG;QACxBzU,MAAM,EAAEoB,MAAM,CAACpB,MAAM,GAAGoB,MAAM,CAACpB,MAAM,CAACE,UAAU,EAAE,GAAG,EAAE;QACvDD,gBAAgB,EAAEmB,MAAM,CAACpB,MAAM,GAAGoB,MAAM,CAACpB,MAAM,CAACE,UAAU,EAAE,GAAG,EAAE;QACjEC,UAAU,EAAEiB,MAAM,CAACpB,MAAM,GACtBoB,MAAM,CAACpB,MAAM,CAACI,kBAAkB,CAACd,gBAAgB,CAAC,GAClD,EAAE;QACLe,GAAG,EAAEjE,cAAc,CAACgF,MAAM,CAACf,GAAG,CAAC;QAC/BiU,OAAO,EAAElT,MAAM,CAACkT;MACjB,CAAC;MACDnW,MAAM,CAACiM,MAAM,CAAClL,MAAM,EAAEuV,gBAAgB,CAAC;IACxC,CAAC;IACDnU,GAAG,EAAEA,CAACpB,MAAM,EAAEkC,MAAM,EAAAsT,MAAA,KAAsC;MAAA,IAApC;QAAElW,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAAkU,MAAA;MACpDxV,MAAM,CAACyB,QAAQ,GAAGS,MAAM,CAACpB,MAAM,GAC5BQ,UAAU,CAACI,WAAW,CAACQ,MAAM,CAACpB,MAAM,CAAC,GACrCuE,SAAS;IACb;EACD,CAAC;EACDpF,KAAK,EAAEH,aAAa;EACpBoK,OAAO,EAAEpK,aAAa;EACtB2V,eAAe,EAAE;IAChB1V,CAAC,EAAEA,CAACC,MAAM,EAAA0V,MAAA,EAAsBxV,OAAO,EAAAyV,MAAA,EAAwB9T,OAAO,KAAK;MAAA,IAA/D;QAAEK,MAAM;QAAEpB;MAAO,CAAC,GAAA4U,MAAA;MAAA,IAAW;QAAEtV;MAAiB,CAAC,GAAAuV,MAAA;MAC5D,MAAM;QACL9V,IAAI;QACJP,WAAW,EAAE;UAAEwC;QAAY;MAC5B,CAAC,GAAG5B,OAAO;MACXF,MAAM,CAAC4V,gBAAgB,GAAG1T,MAAM,CAAClB,UAAU,EAAE;MAC7ChB,MAAM,CAAC6V,UAAU,GAAG3T,MAAM,CAAChB,kBAAkB,CAACd,gBAAgB,CAAC;MAC/DJ,MAAM,CAACe,gBAAgB,GAAGD,MAAM,CAACE,UAAU,EAAE;MAC7ChB,MAAM,CAACiB,UAAU,GAAGH,MAAM,CAACI,kBAAkB,CAACd,gBAAgB,CAAC;MAC/D,MAAMwR,YAAY,GAAGpT,KAAK,CAACC,IAAI,CAC9BqD,WAAW,CAACgO,sBAAsB,CAAChP,MAAM,CAAC,CAC1C,CACCmJ,MAAM,CAACrK,CAAC,IAAIA,CAAC,CAAC8S,oBAAoB,KAAKxQ,MAAM,IAAItC,CAAC,CAACyS,UAAU,CAAC,CAC9DnP,GAAG,CAACtD,CAAC,IAAIA,CAAC,CAACyS,UAAU,CAAC;MACxBrS,MAAM,CAAC4R,YAAY,GAAG/P,OAAO,CAAC3C,MAAM,CAClC,GAAEW,IAAK,eAAc,EACtBrB,KAAK,CAACC,IAAI,CAAC,IAAIL,GAAG,CAACwT,YAAY,CAAC,CAAC,EACjC1R,OAAO,CACP;IACF,CAAC;IACDkB,GAAG,EAAEA,CAACpB,MAAM,EAAA8V,MAAA,EAAAC,MAAA,KAA0D;MAAA,IAAxD;QAAE7T,MAAM;QAAEpB;MAAO,CAAC,GAAAgV,MAAA;MAAA,IAAE;QAAExW,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAAyU,MAAA;MAChE/V,MAAM,CAACgW,QAAQ,GAAG1U,UAAU,CAACI,WAAW,CAACQ,MAAM,CAAC;MAChDlC,MAAM,CAACyB,QAAQ,GAAGH,UAAU,CAACI,WAAW,CAACZ,MAAM,CAAC;IACjD;EACD,CAAC;EACDmV,qBAAqB,EAAE;IACtBlW,CAAC,EAAEA,CAACC,MAAM,EAAEqS,UAAU,KAAK;MAC1BrS,MAAM,CAACmB,GAAG,GAAGjE,cAAc,CAACmV,UAAU,CAAClR,GAAG,CAAC;IAC5C;EACD;AACD,CAAC;;AAED;AACA,MAAM+U,MAAM,GAAG;EACd,gBAAgB,EAAE;IACjB,gBAAgB,EAAEC,CAACjE,MAAM,EAAAkE,MAAA,KAAsC;MAAA,IAApC;QAAE9W,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAA8U,MAAA;MACzD,IACClE,MAAM,CAACM,YAAY,IACnBlR,UAAU,CAAC6N,uBAAuB,CAAC+C,MAAM,CAACM,YAAY,CAAC,KAAK,CAAC,EAC5D;QACD,OAAO,KAAK;MACb;IACD;EACD;AACD,CAAC;;AAED;AACA,MAAM6D,cAAc,GAAG;EACtB,sBAAsB,EAAE;IACvBtM,cAAc,EAAEhN,IAAI,CAACuZ,SAAS,CAC7B,CAACpM,OAAO,EAAEhK,OAAO,EAAAqW,MAAA,KAAyB;MAAA,IAAvB;QAAExM;MAAe,CAAC,GAAAwM,MAAA;MACpC,MAAMpM,aAAa,GAAGlL,MAAM,CAACG,IAAI,CAAC8K,OAAO,CAAC,CACxChH,GAAG,CAAC/D,GAAG,IAAK,GAAE+K,OAAO,CAAC/K,GAAG,CAAE,EAAC,CAAC,CAC7BiL,IAAI,CAAC,IAAI,CAAC;MACZ,OAAO,CAACL,cAAc,CAACjF,IAAI,CAACmF,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAEC,aAAa,CAAC,CAAC;IACtE,CAAC,EACD,6EAA6E,EAC7E,mCAAmC;EAErC;AACD,CAAC;;AAED;AACA,MAAMqM,cAAc,GAAG;EACtBzW,CAAC,EAAEA,CAAC0W,WAAW,EAAAC,MAAA,KAAuC;IAAA,IAArC;MAAEpX,WAAW,EAAE;QAAEwC;MAAY;IAAE,CAAC,GAAA4U,MAAA;IAChDD,WAAW,CAACrU,IAAI,CACfxE,aAAa;IACZ;AACJ;AACA;AACA;IACI+Y,CAAC,IAAI7U,WAAW,CAACgP,QAAQ,CAAC6F,CAAC,CAAC,EAC5BlZ,cAAc,CACd,EACDG,aAAa;IACZ;AACJ;AACA;AACA;IACI+Y,CAAC,IAAI7U,WAAW,CAAC2M,gBAAgB,CAACkI,CAAC,CAAC,EACpClZ,cAAc,CACd,EACDG,aAAa;IACZ;AACJ;AACA;AACA;IACI+Y,CAAC,IAAIA,CAAC,CAAC3V,UAAU,EAAE,EACnBtD,UAAU,CACV,CACD;EACF;AACD,CAAC;;AAED;AACA,MAAMkZ,OAAO,GAAG;EACf,oBAAoB,EAAE;IACrB7W,CAAC,EAAE0W,WAAW,IAAI;MACjBA,WAAW,CAACrU,IAAI,CAACxE,aAAa,CAACgC,CAAC,IAAIA,CAAC,CAAC4B,EAAE,EAAE9D,UAAU,CAAC,CAAC;IACvD;EACD,CAAC;EACD,qBAAqB,EAAE8Y,cAAc;EACrC,mBAAmB,EAAEA,cAAc;EACnC,eAAe,EAAEA,cAAc;EAC/B,gBAAgB,EAAEA,cAAc;EAChC,gBAAgB,EAAE;IACjBzW,CAAC,EAAEA,CAAC0W,WAAW,EAAAI,MAAA,KAAsC;MAAA,IAApC;QAAEvX,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAAuV,MAAA;MAC/CJ,WAAW,CAACrU,IAAI,CACfxE,aAAa,CAACkZ,CAAC,IAAIA,CAAC,CAACtE,YAAY,EAAE3U,0BAA0B,CAAC,CAC9D;MACD4Y,WAAW,CAACrU,IAAI,CACfxE,aAAa,CAACkZ,CAAC,IAAIA,CAAC,CAACpE,oBAAoB,EAAE7U,0BAA0B,CAAC,CACtE;MACD4Y,WAAW,CAACrU,IAAI,CACfxE,aAAa,CACZkZ,CAAC,IAAIA,CAAC,CAACzE,UAAU,EACjB1U,iBAAiB,CAChBC,aAAa;MACZ;AACP;AACA;AACA;MACOkZ,CAAC,IAAIA,CAAC,CAAC3V,GAAG,EACV5D,gBAAgB,CAChB,EACDK,aAAa,CAACkZ,CAAC,IAAIA,CAAC,CAACjX,IAAI,EAAEnC,UAAU,CAAC,CACtC,CACD,CACD;IACF;EACD,CAAC;EACD,eAAe,EAAE;IAChBqC,CAAC,EAAEA,CAAC0W,WAAW,EAAAM,MAAA,KAAsC;MAAA,IAApC;QAAEzX,WAAW,EAAE;UAAEgC;QAAW;MAAE,CAAC,GAAAyV,MAAA;MAC/CN,WAAW,CAACrU,IAAI,CACfxE,aAAa,CACZsE,MAAM,IACLA,MAAM,CAACpB,MAAM,GAAGQ,UAAU,CAACI,WAAW,CAACQ,MAAM,CAACpB,MAAM,CAAC,GAAGuE,SAAS,EAClE3H,UAAU,CACV,EACDE,aAAa,CAACsE,MAAM,IAAIhF,cAAc,CAACgF,MAAM,CAACf,GAAG,CAAC,EAAEzD,UAAU,CAAC,EAC/DE,aAAa,CAACsE,MAAM,IAAIA,MAAM,CAACkT,OAAO,EAAE1X,UAAU,CAAC,CACnD;IACF;EACD;AACD,CAAC;AAED,MAAMsZ,WAAW,GAAG3Y,IAAI,IAAI;EAC3B;EACA;EACA;EACA,OAAO,CAACA,IAAI,CAACsB,QAAQ,GAClB,CAAC,GACDtB,IAAI,CAACoK,gBAAgB,GACrB,CAAC,GAAGwO,YAAY,CAAC5Y,IAAI,CAACsB,QAAQ,CAAC,GAC/B,CAAC,GAAGsX,YAAY,CAAC5Y,IAAI,CAACsB,QAAQ,CAAC;AACnC,CAAC;AAED,MAAMsX,YAAY,GAAGtX,QAAQ,IAAI;EAChC,IAAI6J,IAAI,GAAG,CAAC;EACZ,KAAK,MAAM9J,KAAK,IAAIC,QAAQ,EAAE;IAC7B6J,IAAI,IAAIwN,WAAW,CAACtX,KAAK,CAAC;EAC3B;EACA,OAAO8J,IAAI;AACZ,CAAC;AAED,MAAM0N,aAAa,GAAGvX,QAAQ,IAAI;EACjC,IAAIH,KAAK,GAAG,CAAC;EACb,KAAK,MAAME,KAAK,IAAIC,QAAQ,EAAE;IAC7B,IAAI,CAACD,KAAK,CAACC,QAAQ,IAAI,CAACD,KAAK,CAAC+I,gBAAgB,EAAE;MAC/CjJ,KAAK,EAAE;IACR,CAAC,MAAM;MACN,IAAIE,KAAK,CAACC,QAAQ,EAAEH,KAAK,IAAI0X,aAAa,CAACxX,KAAK,CAACC,QAAQ,CAAC;MAC1D,IAAID,KAAK,CAAC+I,gBAAgB,EAAEjJ,KAAK,IAAIE,KAAK,CAAC+I,gBAAgB;IAC5D;EACD;EACA,OAAOjJ,KAAK;AACb,CAAC;AAED,MAAM2X,QAAQ,GAAGxX,QAAQ,IAAI;EAC5B;EACA,MAAMyX,WAAW,GAAG,EAAE;EACtB,KAAK,MAAM1X,KAAK,IAAIC,QAAQ,EAAE;IAC7B,IAAID,KAAK,CAACC,QAAQ,EAAE;MACnB,IAAI8I,gBAAgB,GAAG/I,KAAK,CAAC+I,gBAAgB,IAAI,CAAC;MAClDA,gBAAgB,IAAIyO,aAAa,CAACxX,KAAK,CAACC,QAAQ,CAAC;MACjDyX,WAAW,CAAChV,IAAI,CAAC;QAChB,GAAG1C,KAAK;QACRC,QAAQ,EAAE0F,SAAS;QACnBoD;MACD,CAAC,CAAC;IACH,CAAC,MAAM;MACN2O,WAAW,CAAChV,IAAI,CAAC1C,KAAK,CAAC;IACxB;EACD;EACA,OAAO0X,WAAW;AACnB,CAAC;AAED,MAAM9O,YAAY,GAAG,SAAAA,CACpB+O,cAAc,EACdC,GAAG,EAEC;EAAA,IADJC,4BAA4B,GAAAC,SAAA,CAAA/X,MAAA,QAAA+X,SAAA,QAAAnS,SAAA,GAAAmS,SAAA,MAAG,KAAK;EAEpC,IAAIF,GAAG,GAAG,CAAC,EAAE;IACZ,OAAO;MACN3X,QAAQ,EAAE0F,SAAS;MACnBoD,gBAAgB,EAAEyO,aAAa,CAACG,cAAc;IAC/C,CAAC;EACF;EACA;EACA,IAAI1X,QAAQ,GAAG0F,SAAS;EACxB;EACA,IAAIoD,gBAAgB,GAAGpD,SAAS;EAChC;EACA,MAAM2H,MAAM,GAAG,EAAE;EACjB;EACA,MAAMyK,UAAU,GAAG,EAAE;EACrB;EACA,MAAMxZ,KAAK,GAAG,EAAE;EAChB;EACA,IAAIyZ,UAAU,GAAG,CAAC;EAElB,KAAK,MAAMC,WAAW,IAAIN,cAAc,EAAE;IACzC;IACA,IAAI,CAACM,WAAW,CAAChY,QAAQ,IAAI,CAACgY,WAAW,CAAClP,gBAAgB,EAAE;MAC3DxK,KAAK,CAACmE,IAAI,CAACuV,WAAW,CAAC;IACxB,CAAC,MAAM;MACN3K,MAAM,CAAC5K,IAAI,CAACuV,WAAW,CAAC;MACxB,MAAMnO,IAAI,GAAGwN,WAAW,CAACW,WAAW,CAAC;MACrCF,UAAU,CAACrV,IAAI,CAACoH,IAAI,CAAC;MACrBkO,UAAU,IAAIlO,IAAI;IACnB;EACD;EAEA,IAAIkO,UAAU,GAAGzZ,KAAK,CAACwB,MAAM,IAAI6X,GAAG,EAAE;IACrC;IACA;IACA3X,QAAQ,GAAGqN,MAAM,CAACvN,MAAM,GAAG,CAAC,GAAGuN,MAAM,CAAC4K,MAAM,CAAC3Z,KAAK,CAAC,GAAGA,KAAK;EAC5D,CAAC,MAAM,IAAI+O,MAAM,CAACvN,MAAM,KAAK,CAAC,EAAE;IAC/B;IACA;IACA,MAAMoY,KAAK,GAAGP,GAAG,IAAIC,4BAA4B,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1D9O,gBAAgB,GAAGxK,KAAK,CAACwB,MAAM,GAAGoY,KAAK;IACvC5Z,KAAK,CAACwB,MAAM,GAAGoY,KAAK;IACpBlY,QAAQ,GAAG1B,KAAK;EACjB,CAAC,MAAM;IACN;IACA,MAAM4Z,KAAK,GACV7K,MAAM,CAACvN,MAAM,IACZ8X,4BAA4B,IAAItZ,KAAK,CAACwB,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7D,IAAIoY,KAAK,GAAGP,GAAG,EAAE;MAChB;MACA;MACA,IAAIQ,QAAQ;MACZ;MACA;MACA,OACC,CAACA,QAAQ,GACRJ,UAAU,GACVzZ,KAAK,CAACwB,MAAM,IACXgJ,gBAAgB,IAAI,CAAC8O,4BAA4B,GAAG,CAAC,GAAG,CAAC,CAAC,GAC3DD,GAAG,IAAI,CAAC,EACR;QACD;QACA,MAAMS,YAAY,GAAGC,IAAI,CAACV,GAAG,CAAC,GAAGG,UAAU,CAAC;QAC5C,IAAIM,YAAY,GAAG9Z,KAAK,CAACwB,MAAM,EAAE;UAChCgJ,gBAAgB,GAAGxK,KAAK,CAACwB,MAAM;UAC/BxB,KAAK,CAACwB,MAAM,GAAG,CAAC;UAChB;QACD;QACA,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0O,MAAM,CAACvN,MAAM,EAAEnB,CAAC,EAAE,EAAE;UACvC,IAAImZ,UAAU,CAACnZ,CAAC,CAAC,KAAKyZ,YAAY,EAAE;YACnC,MAAM7T,KAAK,GAAG8I,MAAM,CAAC1O,CAAC,CAAC;YACvB;YACA;YACA;YACA,MAAM2Z,UAAU,GAAG/T,KAAK,CAACuE,gBAAgB,GAAG,CAAC,GAAG,CAAC;YACjD,MAAMJ,OAAO,GAAGC,YAAY,CAC3BpE,KAAK,CAACvE,QAAQ,EACdoY,YAAY;YACX;YACAC,IAAI,CAACE,IAAI,CAACJ,QAAQ,GAAG9K,MAAM,CAACvN,MAAM,CAAC;YACnC;YACAwY,UAAU,EACXA,UAAU,KAAK,CAAC,CAChB;YACDjL,MAAM,CAAC1O,CAAC,CAAC,GAAG;cACX,GAAG4F,KAAK;cACRvE,QAAQ,EAAE0I,OAAO,CAAC1I,QAAQ;cAC1B8I,gBAAgB,EAAEJ,OAAO,CAACI,gBAAgB,GACvC,CAACvE,KAAK,CAACuE,gBAAgB,IAAI,CAAC,IAAIJ,OAAO,CAACI,gBAAgB,GACxDvE,KAAK,CAACuE;YACV,CAAC;YACD,MAAM0P,OAAO,GAAGnB,WAAW,CAAChK,MAAM,CAAC1O,CAAC,CAAC,CAAC;YACtCoZ,UAAU,IAAIK,YAAY,GAAGI,OAAO;YACpCV,UAAU,CAACnZ,CAAC,CAAC,GAAG6Z,OAAO;YACvB;UACD;QACD;MACD;MACAxY,QAAQ,GAAGqN,MAAM,CAAC4K,MAAM,CAAC3Z,KAAK,CAAC;IAChC,CAAC,MAAM,IAAI4Z,KAAK,KAAKP,GAAG,EAAE;MACzB;MACA;MACA3X,QAAQ,GAAGwX,QAAQ,CAACnK,MAAM,CAAC;MAC3BvE,gBAAgB,GAAGxK,KAAK,CAACwB,MAAM;IAChC,CAAC,MAAM;MACN;MACA;MACAgJ,gBAAgB,GAAGyO,aAAa,CAACG,cAAc,CAAC;IACjD;EACD;EAEA,OAAO;IACN1X,QAAQ;IACR8I;EACD,CAAC;AACF,CAAC;AAED,MAAM2P,UAAU,GAAGA,CAACzY,QAAQ,EAAEkH,MAAM,KAAK;EACxC,IAAI2C,IAAI,GAAG,CAAC;EACZ,KAAK,MAAMlC,KAAK,IAAI3H,QAAQ,EAAE;IAC7B6J,IAAI,IAAIlC,KAAK,CAACkC,IAAI;EACnB;EACA,OAAO;IACNA;EACD,CAAC;AACF,CAAC;AAED,MAAM6O,WAAW,GAAGA,CAAC1Y,QAAQ,EAAE+I,OAAO,KAAK;EAC1C,IAAIc,IAAI,GAAG,CAAC;EACZ,MAAMkE,KAAK,GAAG,CAAC,CAAC;EAChB,KAAK,MAAM5M,MAAM,IAAInB,QAAQ,EAAE;IAC9B6J,IAAI,IAAI1I,MAAM,CAAC0I,IAAI;IACnB,KAAK,MAAMrK,GAAG,IAAIF,MAAM,CAACG,IAAI,CAAC0B,MAAM,CAAC4M,KAAK,CAAC,EAAE;MAC5CA,KAAK,CAACvO,GAAG,CAAC,GAAG,CAACuO,KAAK,CAACvO,GAAG,CAAC,IAAI,CAAC,IAAI2B,MAAM,CAAC4M,KAAK,CAACvO,GAAG,CAAC;IACnD;EACD;EACA,OAAO;IACNqK,IAAI;IACJkE;EACD,CAAC;AACF,CAAC;AAED,MAAM4K,WAAW,GAAGA,CAAC3Y,QAAQ,EAAEiQ,OAAO,KAAK;EAC1C,IAAIgD,MAAM,GAAG,KAAK;EAClB,KAAK,MAAMV,MAAM,IAAIvS,QAAQ,EAAE;IAC9BiT,MAAM,GAAGA,MAAM,IAAIV,MAAM,CAACU,MAAM;EACjC;EACA,OAAO;IACNA;EACD,CAAC;AACF,CAAC;AAED,MAAM2F,sBAAsB,GAAG,yCAAyC;AACxE,MAAMC,iBAAiB,GAAG,gDAAgD;;AAE1E;AACA,MAAMC,eAAe,GAAG;EACvB1Y,CAAC,EAAEA,CAAC2Y,YAAY,EAAExY,OAAO,EAAE0B,OAAO,KAAK;IACtC,MAAM+W,WAAW,GAAGA,CAACnY,IAAI,EAAEoY,OAAO,KAAK;MACtCF,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAEvR,KAAK,IAAI;UACjB,OAAOA,KAAK,CAAC9G,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG6E,SAAS;QACvC,CAAC;QACDyT,UAAU,EAAEA,CAAA,KAAM;UACjB,OAAO;YACNC,aAAa,EAAE,CAACH,OAAO;YACvBI,KAAK,EAAEJ;UACR,CAAC;QACF,CAAC;QACDK,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEkH,MAAM,KAAK;UACvC,OAAO+R,OAAO,GACX;YACA/Y,IAAI,EAAE,kBAAkB;YACxB,CAACW,IAAI,GAAG,CAAC,CAACrB,GAAG;YACbsJ,gBAAgB,EAAE5B,MAAM,CAACpH,MAAM;YAC/B,GAAG2Y,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;UAC9B,CAAC,GACD;YACAhH,IAAI,EAAE,kBAAkB;YACxB,CAACW,IAAI,GAAG,CAAC,CAACrB,GAAG;YACbQ,QAAQ;YACR,GAAGyY,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;UAC9B,CAAC;QACL;MACD,CAAC,CAAC;IACH,CAAC;IACD,MAAM;MACLqS,uBAAuB;MACvBC,iBAAiB;MACjBC;IACD,CAAC,GAAGxX,OAAO;IACX,IAAIsX,uBAAuB,EAAE;MAC5BP,WAAW,CAAC,SAAS,CAAC;MACtBA,WAAW,CAAC,iBAAiB,CAAC;MAC9BA,WAAW,CAAC,iBAAiB,CAAC;IAC/B;IACA,IAAIO,uBAAuB,IAAI,CAACtX,OAAO,CAACqJ,YAAY,EAAE;MACrD0N,WAAW,CAAC,QAAQ,EAAE,CAAC/W,OAAO,CAACqJ,YAAY,CAAC;IAC7C;IACA,IAAIkO,iBAAiB,IAAIC,sBAAsB,EAAE;MAChDV,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAEvR,KAAK,IAAI;UACjB,MAAM+R,cAAc,GACnBD,sBAAsB,IAAIb,sBAAsB,CAACe,IAAI,CAAChS,KAAK,CAAC9G,IAAI,CAAC;UAClE,MAAM+Y,SAAS,GAAGF,cAAc,GAAGA,cAAc,CAAC,CAAC,CAAC,GAAG,EAAE;UACzD,MAAMG,SAAS,GACdL,iBAAiB,IAAIX,iBAAiB,CAACc,IAAI,CAAChS,KAAK,CAAC9G,IAAI,CAAC;UACxD,MAAMoG,IAAI,GAAG4S,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;UACzD,MAAMra,IAAI,GAAG,EAAE;UACf,IAAI+Z,iBAAiB,EAAE;YACtB/Z,IAAI,CAACgD,IAAI,CAAC,GAAG,CAAC;YACd,IAAImX,SAAS,EACZna,IAAI,CAACgD,IAAI,CACRwE,IAAI,CAACnH,MAAM,GACP,GAAEmH,IAAI,CAACwD,IAAI,CAAC,GAAG,CAAE,KAAImP,SAAU,EAAC,GAChC,IAAGA,SAAU,EAAC,CAClB;YACF,OAAO3S,IAAI,CAACnH,MAAM,GAAG,CAAC,EAAE;cACvBL,IAAI,CAACgD,IAAI,CAACwE,IAAI,CAACwD,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;cAC/BxD,IAAI,CAACxB,GAAG,EAAE;YACX;UACD,CAAC,MAAM;YACN,IAAImU,SAAS,EAAEna,IAAI,CAACgD,IAAI,CAAE,IAAGmX,SAAU,EAAC,CAAC;UAC1C;UACA,OAAOna,IAAI;QACZ,CAAC;QACD6Z,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEkH,MAAM,KAAK;UACvC,OAAO;YACNhH,IAAI,EAAEsZ,iBAAiB,GAAG,gBAAgB,GAAG,qBAAqB;YAClE3Y,IAAI,EAAErB,GAAG;YACTQ,QAAQ;YACR,GAAGyY,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;UAC/B,CAAC;QACF;MACD,CAAC,CAAC;IACH;EACD,CAAC;EACD6S,iBAAiB,EAAEA,CAAChB,YAAY,EAAExY,OAAO,EAAE0B,OAAO,KAAK;IACtD,MAAM+X,oBAAoB,GAAGnZ,IAAI,IAAI;MACpCkY,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAEvR,KAAK,IAAI;UACjB,OAAOA,KAAK,CAACtD,IAAI,IAAIsD,KAAK,CAACtD,IAAI,CAACxD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG6E,SAAS;QAC1D,CAAC;QACD4T,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEkH,MAAM,KAAK;UACvC,OAAO;YACNhH,IAAI,EAAE,gBAAgB;YACtBmE,IAAI,EAAE;cACL,CAACxD,IAAI,GAAG,CAAC,CAACrB;YACX,CAAC;YACDQ,QAAQ;YACR,GAAGyY,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;UAC/B,CAAC;QACF;MACD,CAAC,CAAC;IACH,CAAC;IACD8S,oBAAoB,CAAC,WAAW,CAAC;IACjCA,oBAAoB,CAAC,aAAa,CAAC;IACnCA,oBAAoB,CAAC,sBAAsB,CAAC;EAC7C,CAAC;EACDC,kBAAkB,EAAEA,CAAClB,YAAY,EAAExY,OAAO,EAAE0B,OAAO,KAAK;IACvD,MAAMiY,YAAY,GAAGrZ,IAAI,IAAI;MAC5BkY,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAEvR,KAAK,IAAI;UACjB,OAAOA,KAAK,CAAC9G,IAAI,CAAC;QACnB,CAAC;QACDyY,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEkH,MAAM,KAAK;UACvC,OAAO;YACNhH,IAAI,EAAE,iBAAiB;YACvB,CAACW,IAAI,GAAG,CAACrB,GAAG,CAAC;YACbQ,QAAQ;YACR,GAAGyY,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;UAC/B,CAAC;QACF;MACD,CAAC,CAAC;IACH,CAAC;IACDgT,YAAY,CAAC,YAAY,CAAC;IAC1BA,YAAY,CAAC,qBAAqB,CAAC;IACnCA,YAAY,CAAC,cAAc,CAAC;IAC5BA,YAAY,CAAC,uBAAuB,CAAC;EACtC,CAAC;EACDC,aAAa,EAAEA,CAACpB,YAAY,EAAExY,OAAO,EAAA6Z,MAAA,KAAwB;IAAA,IAAtB;MAAED;IAAc,CAAC,GAAAC,MAAA;IACvDrB,YAAY,CAACtW,IAAI,CAAC;MACjByW,OAAO,EAAEvR,KAAK,IAAI;QACjB,MAAM0S,KAAK,GAAG1S,KAAK,CAAC9G,IAAI;QACxB,MAAMyZ,QAAQ,GAAGH,aAAa,CAAChV,IAAI,CAAC/F,EAAE,IAAIA,EAAE,CAACib,KAAK,EAAE1S,KAAK,CAAC,CAAC;QAC3D,IAAI2S,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC;MAClC,CAAC;MACDnB,UAAU,EAAEA,CAAA,MAAO;QAClBC,aAAa,EAAE,KAAK;QACpBC,KAAK,EAAE;MACR,CAAC,CAAC;MACFC,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEkH,MAAM,MAAM;QACxChH,IAAI,EAAE,eAAe;QACrB4I,gBAAgB,EAAE5B,MAAM,CAACpH,MAAM;QAC/B,GAAG2Y,UAAU,CAACzY,QAAQ,EAAEkH,MAAM;MAC/B,CAAC;IACF,CAAC,CAAC;EACH;AACD,CAAC;;AAED;AACA,MAAMqT,gBAAgB,GAAGra,IAAI,KAAK;EACjCE,CAAC,EAAEA,CAAC2Y,YAAY,EAAExY,OAAO,EAAE0B,OAAO,KAAK;IACtC,MAAM+W,WAAW,GAAGA,CAACnY,IAAI,EAAEX,IAAI,EAAE+Y,OAAO,KAAK;MAC5CF,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAE/X,MAAM,IAAI;UAClB,OAAOA,MAAM,CAACN,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG6E,SAAS;QACxC,CAAC;QACDyT,UAAU,EAAEA,CAAA,KAAM;UACjB,OAAO;YACNC,aAAa,EAAE,CAACH,OAAO;YACvBI,KAAK,EAAEJ;UACR,CAAC;QACF,CAAC;QACDK,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAE+I,OAAO,KAAK;UACxC,OAAO;YACN7I,IAAI;YACJ,CAACW,IAAI,GAAG,CAAC,CAACrB,GAAG;YACb,IAAIyZ,OAAO,GAAG;cAAEnQ,gBAAgB,EAAEC,OAAO,CAACjJ;YAAO,CAAC,GAAG;cAAEE;YAAS,CAAC,CAAC;YAClE,GAAG0Y,WAAW,CAAC1Y,QAAQ,EAAE+I,OAAO;UACjC,CAAC;QACF;MACD,CAAC,CAAC;IACH,CAAC;IACD,MAAM;MACLyR,yBAAyB;MACzBC,mBAAmB;MACnBC,wBAAwB;MACxBC,kBAAkB;MAClBC,kBAAkB;MAClBC;IACD,CAAC,GAAG5Y,OAAO;IACX,IAAIyY,wBAAwB,EAAE;MAC7B1B,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC;MAC5CA,WAAW,CAAC,UAAU,EAAE,uBAAuB,CAAC;MAChDA,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC;MAC5CA,WAAW,CAAC,UAAU,EAAE,kBAAkB,CAAC;IAC5C;IACA,IAAIwB,yBAAyB,EAAE;MAC9BxB,WAAW,CAAC,WAAW,EAAE,mBAAmB,CAAC;MAC7CA,WAAW,CAAC,OAAO,EAAE,eAAe,CAAC;MACrCA,WAAW,CAAC,eAAe,EAAE,wBAAwB,CAAC;IACvD;IACA,IAAIwB,yBAAyB,IAAI,CAACvY,OAAO,CAACoM,aAAa,EAAE;MACxD2K,WAAW,CAAC,QAAQ,EAAE,gBAAgB,EAAE,CAAC/W,OAAO,CAACoM,aAAa,CAAC;IAChE;IACA,IAAIqM,wBAAwB,IAAI,CAACzY,OAAO,CAAC6Y,aAAa,EAAE;MACvD9B,WAAW,CAAC,QAAQ,EAAE,gBAAgB,EAAE,CAAC/W,OAAO,CAAC6Y,aAAa,CAAC;IAChE;IACA,IAAIJ,wBAAwB,IAAI,CAACzY,OAAO,CAAC8Y,gBAAgB,EAAE;MAC1D/B,WAAW,CAAC,WAAW,EAAE,mBAAmB,EAAE,CAAC/W,OAAO,CAAC8Y,gBAAgB,CAAC;IACzE;IACA,IAAIJ,kBAAkB,IAAI,CAAC1Y,OAAO,CAAC+Y,cAAc,EAAE;MAClDjC,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAE/X,MAAM,IAAI;UAClB,IAAI,CAACA,MAAM,CAACgN,UAAU,EAAE;UACxB,IAAIwM,kBAAkB,EAAE;YACvB,OAAO,CAACxZ,MAAM,CAACgN,UAAU,CAAC2L,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC5C,CAAC,MAAM,IAAI3Y,MAAM,CAACgN,UAAU,KAAK,SAAS,EAAE;YAC3C,OAAO,CAAC,SAAS,CAAC;UACnB;QACD,CAAC;QACDgL,UAAU,EAAE3Z,GAAG,IAAI;UAClB,MAAMyZ,OAAO,GAAGzZ,GAAG,KAAK,SAAS,IAAI,CAACyC,OAAO,CAAC+Y,cAAc;UAC5D,OAAO;YACN5B,aAAa,EAAE,CAACH,OAAO;YACvBI,KAAK,EAAEJ;UACR,CAAC;QACF,CAAC;QACDK,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAE+I,OAAO,KAAK;UACxC,MAAMkQ,OAAO,GAAGzZ,GAAG,KAAK,SAAS,IAAI,CAACyC,OAAO,CAAC+Y,cAAc;UAC5D,OAAO;YACN9a,IAAI,EAAG,GAAEV,GAAI,UAAS;YACtB2O,UAAU,EAAE3O,GAAG;YACf,IAAIyZ,OAAO,GAAG;cAAEnQ,gBAAgB,EAAEC,OAAO,CAACjJ;YAAO,CAAC,GAAG;cAAEE;YAAS,CAAC,CAAC;YAClE,GAAG0Y,WAAW,CAAC1Y,QAAQ,EAAE+I,OAAO;UACjC,CAAC;QACF;MACD,CAAC,CAAC;IACH;IACA,IAAI0R,mBAAmB,EAAE;MACxB1B,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAE/X,MAAM,IAAI;UAClB,OAAO,CAACA,MAAM,CAACiN,KAAK,CAAC;QACtB,CAAC;QACDkL,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAE+I,OAAO,KAAK;UACxC,OAAO;YACN7I,IAAI,EAAE,kBAAkB;YACxBkO,KAAK,EAAE5O,GAAG;YACVQ,QAAQ;YACR,GAAG0Y,WAAW,CAAC1Y,QAAQ,EAAE+I,OAAO;UACjC,CAAC;QACF;MACD,CAAC,CAAC;IACH;IACA,IAAI6R,kBAAkB,IAAIC,uBAAuB,EAAE;MAClD9B,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAE/X,MAAM,IAAI;UAClB,IAAI,CAACA,MAAM,CAACN,IAAI,EAAE;UAClB,MAAMoa,QAAQ,GAAG7c,aAAa,CAAC+C,MAAM,CAACN,IAAI,CAACiZ,KAAK,CAAC,GAAG,CAAC,CAACrU,GAAG,EAAE,CAAC,CAACwB,IAAI;UACjE,MAAMiU,OAAO,GAAG,cAAc,CAACvB,IAAI,CAACsB,QAAQ,CAAC;UAC7C,IAAIC,OAAO,EAAE,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC;UAChC,MAAMxB,cAAc,GACnBmB,uBAAuB,IAAIjC,sBAAsB,CAACe,IAAI,CAACsB,QAAQ,CAAC;UACjE,MAAMrB,SAAS,GAAGF,cAAc,GAAGA,cAAc,CAAC,CAAC,CAAC,GAAG,EAAE;UACzD,MAAMG,SAAS,GACde,kBAAkB,IAAI/B,iBAAiB,CAACc,IAAI,CAACsB,QAAQ,CAAC;UACvD,MAAMhU,IAAI,GAAG4S,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;UACzD,MAAMra,IAAI,GAAG,EAAE;UACf,IAAImb,kBAAkB,EAAE;YACvB,IAAIhB,SAAS,EACZna,IAAI,CAACgD,IAAI,CACRwE,IAAI,CAACnH,MAAM,GACP,GAAEmH,IAAI,CAACwD,IAAI,CAAC,GAAG,CAAE,KAAImP,SAAU,EAAC,GAChC,IAAGA,SAAU,EAAC,CAClB;YACF,OAAO3S,IAAI,CAACnH,MAAM,GAAG,CAAC,EAAE;cACvBL,IAAI,CAACgD,IAAI,CAACwE,IAAI,CAACwD,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;cAC/BxD,IAAI,CAACxB,GAAG,EAAE;YACX;UACD,CAAC,MAAM;YACN,IAAImU,SAAS,EAAEna,IAAI,CAACgD,IAAI,CAAE,IAAGmX,SAAU,EAAC,CAAC;UAC1C;UACA,OAAOna,IAAI;QACZ,CAAC;QACD6Z,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAE+I,OAAO,KAAK;UACxC,MAAMoS,SAAS,GAAG3b,GAAG,CAAC4b,UAAU,CAAC,OAAO,CAAC;UACzC,OAAO;YACNlb,IAAI,EAAEib,SAAS,GACZ,sBAAsB,GACtBP,kBAAkB,GAClB,iBAAiB,GACjB,sBAAsB;YACzB/Z,IAAI,EAAEsa,SAAS,GAAG3b,GAAG,CAACqG,KAAK,EAAC,oBAAqB,CAAC,CAAC,GAAGrG,GAAG;YACzDQ,QAAQ;YACR,GAAG0Y,WAAW,CAAC1Y,QAAQ,EAAE+I,OAAO;UACjC,CAAC;QACF;MACD,CAAC,CAAC;IACH;EACD,CAAC;EACDsS,cAAc,EAAEA,CAACtC,YAAY,EAAExY,OAAO,EAAA+a,MAAA,KAAyB;IAAA,IAAvB;MAAED;IAAe,CAAC,GAAAC,MAAA;IACzDvC,YAAY,CAACtW,IAAI,CAAC;MACjByW,OAAO,EAAE/X,MAAM,IAAI;QAClB,MAAMN,IAAI,GAAGM,MAAM,CAACN,IAAI;QACxB,IAAIA,IAAI,EAAE;UACT,MAAMyZ,QAAQ,GAAGe,cAAc,CAAClW,IAAI,CAAC/F,EAAE,IAAIA,EAAE,CAACyB,IAAI,EAAEM,MAAM,EAAEjB,IAAI,CAAC,CAAC;UAClE,IAAIoa,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC;QAC3B;MACD,CAAC;MACDnB,UAAU,EAAEA,CAAA,MAAO;QAClBC,aAAa,EAAE,KAAK;QACpBC,KAAK,EAAE;MACR,CAAC,CAAC;MACFC,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAE+I,OAAO,MAAM;QACzC7I,IAAI,EAAE,gBAAgB;QACtB4I,gBAAgB,EAAE9I,QAAQ,CAACF,MAAM;QACjC,GAAG4Y,WAAW,CAAC1Y,QAAQ,EAAE+I,OAAO;MACjC,CAAC;IACF,CAAC,CAAC;EACH;AACD,CAAC,CAAC;;AAEF;AACA,MAAMwS,eAAe,GAAG;EACvB,oBAAoB,EAAEzC,eAAe;EACrC,eAAe,EAAEA,eAAe;EAChC,qBAAqB,EAAEyB,gBAAgB,CAAC,QAAQ,CAAC;EACjD,eAAe,EAAEA,gBAAgB,CAAC,OAAO,CAAC;EAC1C,mBAAmB,EAAEA,gBAAgB,CAAC,eAAe,CAAC;EACtD,gBAAgB,EAAEA,gBAAgB,CAAC,QAAQ,CAAC;EAC5C,gBAAgB,EAAE;IACjBiB,oBAAoB,EAAEzC,YAAY,IAAI;MACrCA,YAAY,CAACtW,IAAI,CAAC;QACjByW,OAAO,EAAE3G,MAAM,IAAI;UAClB,OAAO,CAACA,MAAM,CAACpR,MAAM,CAAC;QACvB,CAAC;QACDmY,WAAW,EAAEA,CAAC9Z,GAAG,EAAEQ,QAAQ,EAAEiQ,OAAO,KAAK;UACxC,OAAO;YACN/P,IAAI,EAAE,aAAa;YACnBiB,MAAM,EAAE3B,GAAG;YACXQ,QAAQ;YACR,GAAG2Y,WAAW,CAAC3Y,QAAQ,EAAEiQ,OAAO;UACjC,CAAC;QACF;MACD,CAAC,CAAC;IACH;EACD;AACD,CAAC;;AAED;AACA,MAAMwL,iBAAiB,GAAGC,KAAK,IAAI;EAClC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACrB,OAAOA,KAAK,CAAC7V,KAAK,CAAC,CAAC,CAAC;EACtB;EACA,OAAO6V,KAAK;AACb,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAGD,KAAK,IAAI;EACjC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACrB,OAAO,KAAK;EACb;EACA,OAAO,IAAI;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAME,WAAW,GAAGF,KAAK,IAAI;EAC5B,IAAI,CAACA,KAAK,EAAE;IACX;AACF;AACA;AACA;AACA;IACE,MAAMG,MAAM,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK,CAAC;IAC1B,OAAOF,MAAM;EACd;EAEA,MAAMG,QAAQ,GAAGP,iBAAiB,CAACC,KAAK,CAAC;EAEzC,IAAIO,MAAM,GAAGhe,aAAa,CAAC+Y,CAAC,IAAIA,CAAC,CAACgF,QAAQ,CAAC,EAAEje,UAAU,CAAC;;EAExD;EACA,MAAMme,aAAa,GAAGP,gBAAgB,CAACD,KAAK,CAAC;EAE7C,IAAI,CAACQ,aAAa,EAAE;IACnB,MAAMC,SAAS,GAAGF,MAAM;IACxBA,MAAM,GAAGA,CAACH,CAAC,EAAEC,CAAC,KAAKI,SAAS,CAACJ,CAAC,EAAED,CAAC,CAAC;EACnC;EAEA,OAAOG,MAAM;AACd,CAAC;AAED,MAAMG,aAAa,GAAG;EACrB;EACAC,UAAU,EAAEA,CAACvF,WAAW,EAAEvW,OAAO,EAAA+b,MAAA,KAAqB;IAAA,IAAnB;MAAED;IAAW,CAAC,GAAAC,MAAA;IAChDxF,WAAW,CAACrU,IAAI,CAACmZ,WAAW,CAACS,UAAU,CAAC,CAAC;EAC1C,CAAC;EACDjc,CAAC,EAAE0W,WAAW,IAAI;IACjBA,WAAW,CAACrU,IAAI,CAACxE,aAAa,CAAC6d,CAAC,IAAIA,CAAC,CAACjb,IAAI,EAAE9C,UAAU,CAAC,CAAC;EACzD;AACD,CAAC;;AAED;AACA,MAAMwe,cAAc,GAAG;EACtB,oBAAoB,EAAE;IACrBC,UAAU,EAAEA,CAAC1F,WAAW,EAAEvW,OAAO,EAAAkc,MAAA,KAAqB;MAAA,IAAnB;QAAED;MAAW,CAAC,GAAAC,MAAA;MAChD3F,WAAW,CAACrU,IAAI,CAACmZ,WAAW,CAACY,UAAU,CAAC,CAAC;IAC1C;EACD,CAAC;EACD,qBAAqB,EAAE;IACtBE,WAAW,EAAEA,CAAC5F,WAAW,EAAEvW,OAAO,EAAAoc,MAAA,KAAsB;MAAA,IAApB;QAAED;MAAY,CAAC,GAAAC,MAAA;MAClD7F,WAAW,CAACrU,IAAI,CAACmZ,WAAW,CAACc,WAAW,CAAC,CAAC;IAC3C;EACD,CAAC;EACD,eAAe,EAAE;IAChBE,gBAAgB,EAAEA,CAAC9F,WAAW,EAAEvW,OAAO,EAAAsc,MAAA,KAA2B;MAAA,IAAzB;QAAED;MAAiB,CAAC,GAAAC,MAAA;MAC5D/F,WAAW,CAACrU,IAAI,CAACmZ,WAAW,CAACgB,gBAAgB,CAAC,CAAC;IAChD;EACD,CAAC;EACD,gBAAgB,EAAE;IACjBE,iBAAiB,EAAEA,CAAChG,WAAW,EAAEvW,OAAO,EAAAwc,MAAA,KAA4B;MAAA,IAA1B;QAAED;MAAkB,CAAC,GAAAC,MAAA;MAC9DjG,WAAW,CAACrU,IAAI,CAACmZ,WAAW,CAACkB,iBAAiB,CAAC,CAAC;IACjD;EACD,CAAC;EACD,oBAAoB,EAAEV,aAAa;EACnC,eAAe,EAAEA;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMY,aAAa,GAAGA,CAACC,MAAM,EAAEhb,OAAO,EAAE7C,EAAE,KAAK;EAC9C,KAAK,MAAM8d,OAAO,IAAI5d,MAAM,CAACG,IAAI,CAACwd,MAAM,CAAC,EAAE;IAC1C,MAAME,SAAS,GAAGF,MAAM,CAACC,OAAO,CAAC;IACjC,KAAK,MAAME,MAAM,IAAI9d,MAAM,CAACG,IAAI,CAAC0d,SAAS,CAAC,EAAE;MAC5C,IAAIC,MAAM,KAAK,GAAG,EAAE;QACnB,IAAIA,MAAM,CAAChC,UAAU,CAAC,GAAG,CAAC,EAAE;UAC3B,IAAInZ,OAAO,CAACmb,MAAM,CAACvX,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/B,CAAC,MAAM;UACN,MAAM4D,KAAK,GAAGxH,OAAO,CAACmb,MAAM,CAAC;UAC7B,IACC3T,KAAK,KAAK,KAAK,IACfA,KAAK,KAAK/D,SAAS,IAClB7G,KAAK,CAACoJ,OAAO,CAACwB,KAAK,CAAC,IAAIA,KAAK,CAAC3J,MAAM,KAAK,CAAE,EAE5C;QACF;MACD;MACAV,EAAE,CAAC8d,OAAO,EAAEC,SAAS,CAACC,MAAM,CAAC,CAAC;IAC/B;EACD;AACD,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG;EAClB,wBAAwB,EAAE,aAAa;EACvC,uBAAuB,EAAE,QAAQ;EACjC,2BAA2B,EAAE,YAAY;EACzC,gCAAgC,EAAE,YAAY;EAC9C,sBAAsB,EAAE,OAAO;EAC/B,wBAAwB,EAAE,SAAS;EACnC,iBAAiB,EAAE,QAAQ;EAC3B,qBAAqB,EAAE,QAAQ;EAC/B,iBAAiB,EAAE,aAAa;EAChC,sBAAsB,EAAE,OAAO;EAC/B,sBAAsB,EAAE,OAAO;EAC/B,iBAAiB,EAAE,OAAO;EAC1B,qBAAqB,EAAE,cAAc;EACrC,kBAAkB,EAAE,cAAc;EAClC,kBAAkB,EAAE,QAAQ;EAC5B,mBAAmB,EAAE,QAAQ;EAC7B,eAAe,EAAE,iBAAiB;EAClC,gCAAgC,EAAE;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGhf,KAAK,IAAI;EAC9B,MAAMa,GAAG,GAAGG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC/B,KAAK,MAAMb,IAAI,IAAIJ,KAAK,EAAE;IACzBa,GAAG,CAACT,IAAI,CAACmC,IAAI,CAAC,GAAGnC,IAAI;EACtB;EACA,OAAOS,GAAG;AACX,CAAC;;AAED;AACA,MAAMoe,MAAM,GAAG;EACd,yBAAyB,EAAED,aAAa;EACxC,8BAA8B,EAAEA;AACjC,CAAC;AAED,MAAME,yBAAyB,CAAC;EAC/B;AACD;AACA;AACA;AACA;EACCC,KAAKA,CAACpa,QAAQ,EAAE;IACfA,QAAQ,CAACqa,KAAK,CAAC/d,WAAW,CAACge,GAAG,CAAC,2BAA2B,EAAEhe,WAAW,IAAI;MAC1EA,WAAW,CAAC+d,KAAK,CAACE,YAAY,CAACD,GAAG,CACjC,2BAA2B,EAC3B,CAACE,KAAK,EAAE5b,OAAO,EAAE1B,OAAO,KAAK;QAC5Byc,aAAa,CAAC7Z,iBAAiB,EAAElB,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UAC1Dye,KAAK,CAACH,KAAK,CAACI,OAAO,CACjBC,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAACxe,GAAG,EAAE6e,IAAI,EAAEC,GAAG,KAChD7e,EAAE,CAACD,GAAG,EAAE6e,IAAI,EAAEC,GAAG,EAAEhc,OAAO,EAAE4b,KAAK,CAAC,CAClC;QACH,CAAC,CAAC;QACFb,aAAa,CAACzG,MAAM,EAAEtU,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UAC/Cye,KAAK,CAACH,KAAK,CAACpT,MAAM,CAChByT,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAACjf,IAAI,EAAEuf,GAAG,EAAEC,GAAG,EAAEvf,CAAC,KACnDS,EAAE,CAACV,IAAI,EAAEuf,GAAG,EAAEhc,OAAO,EAAEic,GAAG,EAAEvf,CAAC,CAAC,CAC9B;QACH,CAAC,CAAC;QACFqe,aAAa,CAACtG,cAAc,EAAEzU,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UACvDye,KAAK,CAACH,KAAK,CAACS,aAAa,CACvBJ,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAACjf,IAAI,EAAEuf,GAAG,EAAEC,GAAG,EAAEvf,CAAC,KACnDS,EAAE,CAACV,IAAI,EAAEuf,GAAG,EAAEhc,OAAO,EAAEic,GAAG,EAAEvf,CAAC,CAAC,CAC9B;QACH,CAAC,CAAC;QACFqe,aAAa,CAAC/F,OAAO,EAAEhV,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UAChDye,KAAK,CAACH,KAAK,CAACze,IAAI,CACd8e,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAAC7G,WAAW,EAAEmH,GAAG,KAClD7e,EAAE,CAAC0X,WAAW,EAAEmH,GAAG,EAAEhc,OAAO,CAAC,CAC7B;QACH,CAAC,CAAC;QACF+a,aAAa,CAACT,cAAc,EAAEta,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UACvDye,KAAK,CAACH,KAAK,CAACU,WAAW,CACrBL,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAAC7G,WAAW,EAAEmH,GAAG,KAClD7e,EAAE,CAAC0X,WAAW,EAAEmH,GAAG,EAAEhc,OAAO,CAAC,CAC7B;QACH,CAAC,CAAC;QACF+a,aAAa,CAACzB,eAAe,EAAEtZ,OAAO,EAAE,CAACib,OAAO,EAAE9d,EAAE,KAAK;UACxDye,KAAK,CAACH,KAAK,CAACW,YAAY,CACtBN,GAAG,CAACb,OAAO,CAAC,CACZS,GAAG,CAAC,2BAA2B,EAAE,CAAC5E,YAAY,EAAEkF,GAAG,KACnD7e,EAAE,CAAC2Z,YAAY,EAAEkF,GAAG,EAAEhc,OAAO,CAAC,CAC9B;QACH,CAAC,CAAC;QACF,KAAK,MAAMzC,GAAG,IAAIF,MAAM,CAACG,IAAI,CAAC4d,UAAU,CAAC,EAAE;UAC1C,MAAMiB,QAAQ,GAAGjB,UAAU,CAAC7d,GAAG,CAAC;UAChCqe,KAAK,CAACH,KAAK,CAACa,WAAW,CACrBR,GAAG,CAACve,GAAG,CAAC,CACRme,GAAG,CAAC,2BAA2B,EAAE,MAAMW,QAAQ,CAAC;QACnD;QACA,KAAK,MAAM9e,GAAG,IAAIF,MAAM,CAACG,IAAI,CAAC8d,MAAM,CAAC,EAAE;UACtC,MAAMiB,MAAM,GAAGjB,MAAM,CAAC/d,GAAG,CAAC;UAC1Bqe,KAAK,CAACH,KAAK,CAACe,KAAK,CAACV,GAAG,CAACve,GAAG,CAAC,CAACme,GAAG,CAAC,2BAA2B,EAAEa,MAAM,CAAC;QACpE;QACA,IAAIvc,OAAO,CAACjC,QAAQ,EAAE;UACrB,IAAInB,KAAK,CAACoJ,OAAO,CAAChG,OAAO,CAACjC,QAAQ,CAAC,EAAE;YACpC6d,KAAK,CAACH,KAAK,CAACgB,cAAc,CACxBX,GAAG,CAAC,oCAAoC,CAAC,CACzCJ,GAAG,CAAC,2BAA2B,EAAE,CAACgB,IAAI,EAAAC,MAAA,KAAsB;cAAA,IAApB;gBAAEC,MAAM,EAAEX;cAAI,CAAC,GAAAU,MAAA;cACvD,IAAIV,GAAG,GAAGjc,OAAO,CAACjC,QAAQ,CAACF,MAAM,EAAE;gBAClC,OAAOH,WAAW,CAACmf,kBAAkB,CACpCnf,WAAW,CAACof,kBAAkB,CAC7B9c,OAAO,CAACjC,QAAQ,CAACke,GAAG,CAAC,EACrB3d,OAAO,CACP,CACD;cACF;YACD,CAAC,CAAC;UACJ,CAAC,MAAM,IAAI0B,OAAO,CAACjC,QAAQ,KAAK,IAAI,EAAE;YACrC,MAAMgf,YAAY,GAAGrf,WAAW,CAACmf,kBAAkB,CAClDnf,WAAW,CAACof,kBAAkB,CAAC9c,OAAO,CAACjC,QAAQ,EAAEO,OAAO,CAAC,CACzD;YACDsd,KAAK,CAACH,KAAK,CAACgB,cAAc,CACxBX,GAAG,CAAC,oCAAoC,CAAC,CACzCJ,GAAG,CAAC,2BAA2B,EAAE,MAAM;cACvC,OAAOqB,YAAY;YACpB,CAAC,CAAC;UACJ;QACD;MACD,CAAC,CACD;IACF,CAAC,CAAC;EACH;AACD;AACA7d,MAAM,CAAC8d,OAAO,GAAGzB,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}