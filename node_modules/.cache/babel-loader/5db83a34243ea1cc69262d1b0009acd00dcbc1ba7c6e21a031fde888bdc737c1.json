{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n  approve,\n  evaluateToIdentifier,\n  evaluateToString,\n  toConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst {\n  AMDDefineRuntimeModule,\n  AMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AMDPlugin {\n  /**\n   * @param {Record<string, any>} amdOptions the AMD options\n   */\n  constructor(amdOptions) {\n    this.amdOptions = amdOptions;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const amdOptions = this.amdOptions;\n    compiler.hooks.compilation.tap(\"AMDPlugin\", (compilation, _ref) => {\n      let {\n        contextModuleFactory,\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n      compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n      compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n      compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n      compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdDefine).tap(\"AMDPlugin\", (module, set) => {\n        set.add(RuntimeGlobals.require);\n      });\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdOptions).tap(\"AMDPlugin\", (module, set) => {\n        set.add(RuntimeGlobals.requireScope);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdDefine).tap(\"AMDPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdOptions).tap(\"AMDPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDOptionsRuntimeModule(amdOptions));\n      });\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n        const tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n          parser.hooks.expression.for(optionExpr).tap(\"AMDPlugin\", toConstantDependency(parser, RuntimeGlobals.amdOptions, [RuntimeGlobals.amdOptions]));\n          parser.hooks.evaluateIdentifier.for(optionExpr).tap(\"AMDPlugin\", evaluateToIdentifier(optionExpr, rootName, getMembers, true));\n          parser.hooks.evaluateTypeof.for(optionExpr).tap(\"AMDPlugin\", evaluateToString(\"object\"));\n          parser.hooks.typeof.for(optionExpr).tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"object\")));\n        };\n        new AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(parser);\n        new AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n        tapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n        tapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n        tapOptionsHooks(\"__webpack_amd_options__\", \"__webpack_amd_options__\", () => []);\n        parser.hooks.expression.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return true;\n        });\n        parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", evaluateToString(\"function\"));\n        parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", approve);\n        parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", evaluateToString(\"function\"));\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n    });\n  }\n}\nmodule.exports = AMDPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","approve","evaluateToIdentifier","evaluateToString","toConstantDependency","AMDDefineDependency","AMDDefineDependencyParserPlugin","AMDRequireArrayDependency","AMDRequireContextDependency","AMDRequireDependenciesBlockParserPlugin","AMDRequireDependency","AMDRequireItemDependency","AMDDefineRuntimeModule","AMDOptionsRuntimeModule","ConstDependency","LocalModuleDependency","UnsupportedDependency","AMDPlugin","constructor","amdOptions","apply","compiler","hooks","compilation","tap","_ref","contextModuleFactory","normalModuleFactory","dependencyTemplates","set","Template","dependencyFactories","runtimeRequirementInModule","for","amdDefine","module","add","requireScope","runtimeRequirementInTree","chunk","addRuntimeModule","handler","parser","parserOptions","amd","undefined","tapOptionsHooks","optionExpr","rootName","getMembers","expression","evaluateIdentifier","evaluateTypeof","typeof","JSON","stringify","expr","dep","range","loc","state","addPresentationalDependency","canRename","rename","exports"],"sources":["/Users/ritasabri/Desktop/PENN/interpretme_v2/node_modules/webpack/lib/dependencies/AMDPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n\tapprove,\n\tevaluateToIdentifier,\n\tevaluateToString,\n\ttoConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst {\n\tAMDDefineRuntimeModule,\n\tAMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AMDPlugin {\n\t/**\n\t * @param {Record<string, any>} amdOptions the AMD options\n\t */\n\tconstructor(amdOptions) {\n\t\tthis.amdOptions = amdOptions;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst amdOptions = this.amdOptions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AMDPlugin\",\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew AMDRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnew AMDRequireItemDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew AMDRequireArrayDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tnew AMDRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew AMDDefineDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew UnsupportedDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew LocalModuleDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(\"AMDPlugin\", (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.require);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(\"AMDPlugin\", (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.requireScope);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(\"AMDPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(\"AMDPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AMDOptionsRuntimeModule(amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n\t\t\t\t\tconst tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, RuntimeGlobals.amdOptions, [\n\t\t\t\t\t\t\t\t\tRuntimeGlobals.amdOptions\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\tevaluateToIdentifier(optionExpr, rootName, getMembers, true)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"object\"));\n\t\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"object\"))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t};\n\n\t\t\t\t\tnew AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(\n\t\t\t\t\t\tparser\n\t\t\t\t\t);\n\t\t\t\t\tnew AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n\n\t\t\t\t\ttapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n\t\t\t\t\ttapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n\t\t\t\t\ttapOptionsHooks(\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t() => []\n\t\t\t\t\t);\n\n\t\t\t\t\tparser.hooks.expression.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"function\"));\n\t\t\t\t\tparser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", approve);\n\t\t\t\t\tparser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"function\"));\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AMDPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}