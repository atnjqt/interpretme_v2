{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  Parser: AcornParser\n} = require(\"acorn\");\nconst {\n  importAssertions\n} = require(\"acorn-import-assertions\");\nconst {\n  SyncBailHook,\n  HookMap\n} = require(\"tapable\");\nconst vm = require(\"vm\");\nconst Parser = require(\"../Parser\");\nconst StackedMap = require(\"../util/StackedMap\");\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nconst memoize = require(\"../util/memoize\");\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpressionNode */\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpressionNode */\n/** @typedef {import(\"estree\").BlockStatement} BlockStatementNode */\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpressionNode */\n/** @typedef {import(\"estree\").CallExpression} CallExpressionNode */\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclarationNode */\n/** @typedef {import(\"estree\").ClassExpression} ClassExpressionNode */\n/** @typedef {import(\"estree\").Comment} CommentNode */\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpressionNode */\n/** @typedef {import(\"estree\").Declaration} DeclarationNode */\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifierNode */\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinitionNode */\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n/** @typedef {import(\"estree\").Identifier} IdentifierNode */\n/** @typedef {import(\"estree\").IfStatement} IfStatementNode */\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatementNode */\n/** @typedef {import(\"estree\").Literal} LiteralNode */\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpressionNode */\n/** @typedef {import(\"estree\").ChainExpression} ChainExpressionNode */\n/** @typedef {import(\"estree\").MemberExpression} MemberExpressionNode */\n/** @typedef {import(\"estree\").MetaProperty} MetaPropertyNode */\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinitionNode */\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclarationNode */\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n/** @typedef {import(\"estree\").Node} AnyNode */\n/** @typedef {import(\"estree\").Program} ProgramNode */\n/** @typedef {import(\"estree\").Statement} StatementNode */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclarationNode */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclarationNode */\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclarationNode */\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclarationNode */\n/** @typedef {import(\"estree\").Super} SuperNode */\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpressionNode */\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteralNode */\n/** @typedef {import(\"estree\").ThisExpression} ThisExpressionNode */\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpressionNode */\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclaratorNode */\n/** @template T @typedef {import(\"tapable\").AsArray<T>} AsArray<T> */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[], getMembersOptionals: () => boolean[] }} GetInfoResult */\n\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11;\n\n// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\nclass VariableInfo {\n  /**\n   * @param {ScopeInfo} declaredScope scope in which the variable is declared\n   * @param {string | true} freeName which free name the variable aliases, or true when none\n   * @param {TagInfo | undefined} tagInfo info about tags\n   */\n  constructor(declaredScope, freeName, tagInfo) {\n    this.declaredScope = declaredScope;\n    this.freeName = freeName;\n    this.tagInfo = tagInfo;\n  }\n}\n\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n/** @typedef {LiteralNode | string | null | undefined} ImportSource */\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean} inShorthand\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n * @property {boolean} inTry\n */\n\nconst joinRanges = (startRange, endRange) => {\n  if (!endRange) return startRange;\n  if (!startRange) return endRange;\n  return [startRange[0], endRange[1]];\n};\nconst objectAndMembersToName = (object, membersReversed) => {\n  let name = object;\n  for (let i = membersReversed.length - 1; i >= 0; i--) {\n    name = name + \".\" + membersReversed[i];\n  }\n  return name;\n};\nconst getRootName = expression => {\n  switch (expression.type) {\n    case \"Identifier\":\n      return expression.name;\n    case \"ThisExpression\":\n      return \"this\";\n    case \"MetaProperty\":\n      return `${expression.meta.name}.${expression.property.name}`;\n    default:\n      return undefined;\n  }\n};\n\n/** @type {AcornOptions} */\nconst defaultParserOptions = {\n  ranges: true,\n  locations: true,\n  ecmaVersion: \"latest\",\n  sourceType: \"module\",\n  // https://github.com/tc39/proposal-hashbang\n  allowHashBang: true,\n  onComment: null\n};\n\n// regexp to match at least one \"magic comment\"\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\nconst EMPTY_COMMENT_OPTIONS = {\n  options: null,\n  errors: null\n};\nclass JavascriptParser extends Parser {\n  /**\n   * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n   */\n  constructor() {\n    let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"auto\";\n    super();\n    this.hooks = Object.freeze({\n      /** @type {HookMap<SyncBailHook<[UnaryExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode | MetaPropertyNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateDefinedIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[NewExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateNewExpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[CallExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateCallExpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[CallExpressionNode, BasicEvaluatedExpression | undefined], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateCallExpressionMember: new HookMap(() => new SyncBailHook([\"expression\", \"param\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode | DeclarationNode | PrivateIdentifierNode, number], boolean | void>>} */\n      isPure: new HookMap(() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])),\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      preStatement: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      blockPreStatement: new SyncBailHook([\"declaration\"]),\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      statement: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[IfStatementNode], boolean | void>} */\n      statementIf: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[ExpressionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classExtendsExpression: new SyncBailHook([\"expression\", \"classDefinition\"]),\n      /** @type {SyncBailHook<[MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n      /** @type {SyncBailHook<[ExpressionNode, MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classBodyValue: new SyncBailHook([\"expression\", \"element\", \"classDefinition\"]),\n      /** @type {HookMap<SyncBailHook<[LabeledStatementNode], boolean | void>>} */\n      label: new HookMap(() => new SyncBailHook([\"statement\"])),\n      /** @type {SyncBailHook<[ImportDeclarationNode, ImportSource], boolean | void>} */\n      import: new SyncBailHook([\"statement\", \"source\"]),\n      /** @type {SyncBailHook<[ImportDeclarationNode, ImportSource, string, string], boolean | void>} */\n      importSpecifier: new SyncBailHook([\"statement\", \"source\", \"exportName\", \"identifierName\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode], boolean | void>} */\n      export: new SyncBailHook([\"statement\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource], boolean | void>} */\n      exportImport: new SyncBailHook([\"statement\", \"source\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, DeclarationNode], boolean | void>} */\n      exportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n      /** @type {SyncBailHook<[ExportDefaultDeclarationNode, DeclarationNode], boolean | void>} */\n      exportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, string, string, number | undefined], boolean | void>} */\n      exportSpecifier: new SyncBailHook([\"statement\", \"identifierName\", \"exportName\", \"index\"]),\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource, string, string, number | undefined], boolean | void>} */\n      exportImportSpecifier: new SyncBailHook([\"statement\", \"source\", \"identifierName\", \"exportName\", \"index\"]),\n      /** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n      preDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n      /** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n      declarator: new SyncBailHook([\"declarator\", \"statement\"]),\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n      /** @type {HookMap<SyncBailHook<[IdentifierNode], boolean | void>>} */\n      pattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      canRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      rename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n      /** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression], boolean | void>>} */\n      assign: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression, string[]], boolean | void>>} */\n      assignMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      typeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      importCall: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      topLevelAwait: new SyncBailHook([\"expression\"]),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      call: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** Something like \"a.b()\" */\n      /** @type {HookMap<SyncBailHook<[CallExpressionNode, string[], boolean[]], boolean | void>>} */\n      callMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\"])),\n      /** Something like \"a.b().c.d\" */\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n      memberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"callExpression\", \"members\"])),\n      /** Something like \"a.b().c.d()\"\" */\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n      callMemberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"innerCallExpression\", \"members\"])),\n      /** @type {SyncBailHook<[ChainExpressionNode], boolean | void>} */\n      optionalChaining: new SyncBailHook([\"optionalChaining\"]),\n      /** @type {HookMap<SyncBailHook<[NewExpressionNode], boolean | void>>} */\n      new: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {SyncBailHook<[BinaryExpressionNode], boolean | void>} */\n      binaryExpression: new SyncBailHook([\"binaryExpression\"]),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      expression: new HookMap(() => new SyncBailHook([\"expression\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[], boolean[]], boolean | void>>} */\n      expressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\"])),\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n      unhandledExpressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      expressionConditionalOperator: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      expressionLogicalOperator: new SyncBailHook([\"expression\"]),\n      /** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n      program: new SyncBailHook([\"ast\", \"comments\"]),\n      /** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n      finish: new SyncBailHook([\"ast\", \"comments\"])\n    });\n    this.sourceType = sourceType;\n    /** @type {ScopeInfo} */\n    this.scope = undefined;\n    /** @type {ParserState} */\n    this.state = undefined;\n    this.comments = undefined;\n    this.semicolons = undefined;\n    /** @type {(StatementNode|ExpressionNode)[]} */\n    this.statementPath = undefined;\n    this.prevStatement = undefined;\n    this.currentTagData = undefined;\n    this._initializeEvaluating();\n  }\n  _initializeEvaluating() {\n    this.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {LiteralNode} */_expr;\n      switch (typeof expr.value) {\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(expr.value).setRange(expr.range);\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(expr.value).setRange(expr.range);\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(expr.value).setRange(expr.range);\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(expr.value).setRange(expr.range);\n      }\n      if (expr.value === null) {\n        return new BasicEvaluatedExpression().setNull().setRange(expr.range);\n      }\n      if (expr.value instanceof RegExp) {\n        return new BasicEvaluatedExpression().setRegExp(expr.value).setRange(expr.range);\n      }\n    });\n    this.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {NewExpressionNode} */_expr;\n      const callee = expr.callee;\n      if (callee.type !== \"Identifier\") return;\n      if (callee.name !== \"RegExp\") {\n        return this.callHooksForName(this.hooks.evaluateNewExpression, callee.name, expr);\n      } else if (expr.arguments.length > 2 || this.getVariableInfo(\"RegExp\") !== \"RegExp\") return;\n      let regExp, flags;\n      const arg1 = expr.arguments[0];\n      if (arg1) {\n        if (arg1.type === \"SpreadElement\") return;\n        const evaluatedRegExp = this.evaluateExpression(arg1);\n        if (!evaluatedRegExp) return;\n        regExp = evaluatedRegExp.asString();\n        if (!regExp) return;\n      } else {\n        return new BasicEvaluatedExpression().setRegExp(new RegExp(\"\")).setRange(expr.range);\n      }\n      const arg2 = expr.arguments[1];\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const evaluatedFlags = this.evaluateExpression(arg2);\n        if (!evaluatedFlags) return;\n        if (!evaluatedFlags.isUndefined()) {\n          flags = evaluatedFlags.asString();\n          if (flags === undefined || !BasicEvaluatedExpression.isValidRegExpFlags(flags)) return;\n        }\n      }\n      return new BasicEvaluatedExpression().setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp)).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"LogicalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {LogicalExpressionNode} */_expr;\n      const left = this.evaluateExpression(expr.left);\n      let returnRight = false;\n      /** @type {boolean|undefined} */\n      let allowedRight;\n      if (expr.operator === \"&&\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === false) return left.setRange(expr.range);\n        returnRight = leftAsBool === true;\n        allowedRight = false;\n      } else if (expr.operator === \"||\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === true) return left.setRange(expr.range);\n        returnRight = leftAsBool === false;\n        allowedRight = true;\n      } else if (expr.operator === \"??\") {\n        const leftAsNullish = left.asNullish();\n        if (leftAsNullish === false) return left.setRange(expr.range);\n        if (leftAsNullish !== true) return;\n        returnRight = true;\n      } else return;\n      const right = this.evaluateExpression(expr.right);\n      if (returnRight) {\n        if (left.couldHaveSideEffects()) right.setSideEffects();\n        return right.setRange(expr.range);\n      }\n      const asBool = right.asBool();\n      if (allowedRight === true && asBool === true) {\n        return new BasicEvaluatedExpression().setRange(expr.range).setTruthy();\n      } else if (allowedRight === false && asBool === false) {\n        return new BasicEvaluatedExpression().setRange(expr.range).setFalsy();\n      }\n    });\n    const valueAsExpression = (value, expr, sideEffects) => {\n      switch (typeof value) {\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(value).setSideEffects(sideEffects).setRange(expr.range);\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(value).setSideEffects(sideEffects).setRange(expr.range);\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(value).setSideEffects(sideEffects).setRange(expr.range);\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(value).setSideEffects(sideEffects).setRange(expr.range);\n      }\n    };\n    this.hooks.evaluate.for(\"BinaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {BinaryExpressionNode} */_expr;\n      const handleConstOperation = fn => {\n        const left = this.evaluateExpression(expr.left);\n        if (!left.isCompileTimeValue()) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right.isCompileTimeValue()) return;\n        const result = fn(left.asCompileTimeValue(), right.asCompileTimeValue());\n        return valueAsExpression(result, expr, left.couldHaveSideEffects() || right.couldHaveSideEffects());\n      };\n      const isAlwaysDifferent = (a, b) => a === true && b === false || a === false && b === true;\n      const handleTemplateStringCompare = (left, right, res, eql) => {\n        const getPrefix = parts => {\n          let value = \"\";\n          for (const p of parts) {\n            const v = p.asString();\n            if (v !== undefined) value += v;else break;\n          }\n          return value;\n        };\n        const getSuffix = parts => {\n          let value = \"\";\n          for (let i = parts.length - 1; i >= 0; i--) {\n            const v = parts[i].asString();\n            if (v !== undefined) value = v + value;else break;\n          }\n          return value;\n        };\n        const leftPrefix = getPrefix(left.parts);\n        const rightPrefix = getPrefix(right.parts);\n        const leftSuffix = getSuffix(left.parts);\n        const rightSuffix = getSuffix(right.parts);\n        const lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n        const lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n        if (leftPrefix.slice(0, lenPrefix) !== rightPrefix.slice(0, lenPrefix) || leftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix)) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n      const handleStrictEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        res.setRange(expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === (left.asCompileTimeValue() === right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n        const leftPrimitive = left.isPrimitiveType();\n        const rightPrimitive = right.isPrimitiveType();\n        if (\n        // Primitive !== Object or\n        // compile-time object types are never equal to something at runtime\n        leftPrimitive === false && (leftConst || rightPrimitive === true) || rightPrimitive === false && (rightConst || leftPrimitive === true) ||\n        // Different nullish or boolish status also means not equal\n        isAlwaysDifferent(left.asBool(), right.asBool()) || isAlwaysDifferent(left.asNullish(), right.asNullish())) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n      const handleAbstractEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        res.setRange(expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === (\n          // eslint-disable-next-line eqeqeq\n          left.asCompileTimeValue() == right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n      };\n      if (expr.operator === \"+\") {\n        const left = this.evaluateExpression(expr.left);\n        const right = this.evaluateExpression(expr.right);\n        const res = new BasicEvaluatedExpression();\n        if (left.isString()) {\n          if (right.isString()) {\n            res.setString(left.string + right.string);\n          } else if (right.isNumber()) {\n            res.setString(left.string + right.number);\n          } else if (right.isWrapped() && right.prefix && right.prefix.isString()) {\n            // \"left\" + (\"prefix\" + inner + \"postfix\")\n            // => (\"leftPrefix\" + inner + \"postfix\")\n            res.setWrapped(new BasicEvaluatedExpression().setString(left.string + right.prefix.string).setRange(joinRanges(left.range, right.prefix.range)), right.postfix, right.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // \"left\" + ([null] + inner + \"postfix\")\n            // => (\"left\" + inner + \"postfix\")\n            res.setWrapped(left, right.postfix, right.wrappedInnerExpressions);\n          } else {\n            // \"left\" + expr\n            // => (\"left\" + expr + \"\")\n            res.setWrapped(left, null, [right]);\n          }\n        } else if (left.isNumber()) {\n          if (right.isString()) {\n            res.setString(left.number + right.string);\n          } else if (right.isNumber()) {\n            res.setNumber(left.number + right.number);\n          } else {\n            return;\n          }\n        } else if (left.isBigInt()) {\n          if (right.isBigInt()) {\n            res.setBigInt(left.bigint + right.bigint);\n          }\n        } else if (left.isWrapped()) {\n          if (left.postfix && left.postfix.isString() && right.isString()) {\n            // (\"prefix\" + inner + \"postfix\") + \"right\"\n            // => (\"prefix\" + inner + \"postfixRight\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(left.postfix.string + right.string).setRange(joinRanges(left.postfix.range, right.range)), left.wrappedInnerExpressions);\n          } else if (left.postfix && left.postfix.isString() && right.isNumber()) {\n            // (\"prefix\" + inner + \"postfix\") + 123\n            // => (\"prefix\" + inner + \"postfix123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(left.postfix.string + right.number).setRange(joinRanges(left.postfix.range, right.range)), left.wrappedInnerExpressions);\n          } else if (right.isString()) {\n            // (\"prefix\" + inner + [null]) + \"right\"\n            // => (\"prefix\" + inner + \"right\")\n            res.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n          } else if (right.isNumber()) {\n            // (\"prefix\" + inner + [null]) + 123\n            // => (\"prefix\" + inner + \"123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(right.number + \"\").setRange(right.range), left.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n            // (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n            res.setWrapped(left.prefix, right.postfix, left.wrappedInnerExpressions && right.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix] : []).concat(right.prefix ? [right.prefix] : []).concat(right.wrappedInnerExpressions));\n          } else {\n            // (\"prefix\" + inner + postfix) + expr\n            // => (\"prefix\" + inner + postfix + expr + [null])\n            res.setWrapped(left.prefix, null, left.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix, right] : [right]));\n          }\n        } else {\n          if (right.isString()) {\n            // left + \"right\"\n            // => ([null] + left + \"right\")\n            res.setWrapped(null, right, [left]);\n          } else if (right.isWrapped()) {\n            // left + (prefix + inner + \"postfix\")\n            // => ([null] + left + prefix + inner + \"postfix\")\n            res.setWrapped(null, right.postfix, right.wrappedInnerExpressions && (right.prefix ? [left, right.prefix] : [left]).concat(right.wrappedInnerExpressions));\n          } else {\n            return;\n          }\n        }\n        if (left.couldHaveSideEffects() || right.couldHaveSideEffects()) res.setSideEffects();\n        res.setRange(expr.range);\n        return res;\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation((l, r) => l - r);\n      } else if (expr.operator === \"*\") {\n        return handleConstOperation((l, r) => l * r);\n      } else if (expr.operator === \"/\") {\n        return handleConstOperation((l, r) => l / r);\n      } else if (expr.operator === \"**\") {\n        return handleConstOperation((l, r) => l ** r);\n      } else if (expr.operator === \"===\") {\n        return handleStrictEqualityComparison(true);\n      } else if (expr.operator === \"==\") {\n        return handleAbstractEqualityComparison(true);\n      } else if (expr.operator === \"!==\") {\n        return handleStrictEqualityComparison(false);\n      } else if (expr.operator === \"!=\") {\n        return handleAbstractEqualityComparison(false);\n      } else if (expr.operator === \"&\") {\n        return handleConstOperation((l, r) => l & r);\n      } else if (expr.operator === \"|\") {\n        return handleConstOperation((l, r) => l | r);\n      } else if (expr.operator === \"^\") {\n        return handleConstOperation((l, r) => l ^ r);\n      } else if (expr.operator === \">>>\") {\n        return handleConstOperation((l, r) => l >>> r);\n      } else if (expr.operator === \">>\") {\n        return handleConstOperation((l, r) => l >> r);\n      } else if (expr.operator === \"<<\") {\n        return handleConstOperation((l, r) => l << r);\n      } else if (expr.operator === \"<\") {\n        return handleConstOperation((l, r) => l < r);\n      } else if (expr.operator === \">\") {\n        return handleConstOperation((l, r) => l > r);\n      } else if (expr.operator === \"<=\") {\n        return handleConstOperation((l, r) => l <= r);\n      } else if (expr.operator === \">=\") {\n        return handleConstOperation((l, r) => l >= r);\n      }\n    });\n    this.hooks.evaluate.for(\"UnaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {UnaryExpressionNode} */_expr;\n      const handleConstOperation = fn => {\n        const argument = this.evaluateExpression(expr.argument);\n        if (!argument.isCompileTimeValue()) return;\n        const result = fn(argument.asCompileTimeValue());\n        return valueAsExpression(result, expr, argument.couldHaveSideEffects());\n      };\n      if (expr.operator === \"typeof\") {\n        switch (expr.argument.type) {\n          case \"Identifier\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, expr.argument.name, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"MetaProperty\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, getRootName(expr.argument), expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"MemberExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"ChainExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument.expression, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n          case \"FunctionExpression\":\n            {\n              return new BasicEvaluatedExpression().setString(\"function\").setRange(expr.range);\n            }\n        }\n        const arg = this.evaluateExpression(expr.argument);\n        if (arg.isUnknown()) return;\n        if (arg.isString()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setRange(expr.range);\n        }\n        if (arg.isWrapped()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setSideEffects().setRange(expr.range);\n        }\n        if (arg.isUndefined()) {\n          return new BasicEvaluatedExpression().setString(\"undefined\").setRange(expr.range);\n        }\n        if (arg.isNumber()) {\n          return new BasicEvaluatedExpression().setString(\"number\").setRange(expr.range);\n        }\n        if (arg.isBigInt()) {\n          return new BasicEvaluatedExpression().setString(\"bigint\").setRange(expr.range);\n        }\n        if (arg.isBoolean()) {\n          return new BasicEvaluatedExpression().setString(\"boolean\").setRange(expr.range);\n        }\n        if (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setRange(expr.range);\n        }\n        if (arg.isArray()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setSideEffects(arg.couldHaveSideEffects()).setRange(expr.range);\n        }\n      } else if (expr.operator === \"!\") {\n        const argument = this.evaluateExpression(expr.argument);\n        const bool = argument.asBool();\n        if (typeof bool !== \"boolean\") return;\n        return new BasicEvaluatedExpression().setBoolean(!bool).setSideEffects(argument.couldHaveSideEffects()).setRange(expr.range);\n      } else if (expr.operator === \"~\") {\n        return handleConstOperation(v => ~v);\n      } else if (expr.operator === \"+\") {\n        return handleConstOperation(v => +v);\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation(v => -v);\n      }\n    });\n    this.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n      return new BasicEvaluatedExpression().setString(\"undefined\").setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n      if ( /** @type {IdentifierNode} */expr.name === \"undefined\") {\n        return new BasicEvaluatedExpression().setUndefined().setRange(expr.range);\n      }\n    });\n    /**\n     * @param {string} exprType expression type name\n     * @param {function(ExpressionNode): GetInfoResult | undefined} getInfo get info\n     * @returns {void}\n     */\n    const tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n      /** @type {ExpressionNode | undefined} */\n      let cachedExpression = undefined;\n      /** @type {GetInfoResult | undefined} */\n      let cachedInfo = undefined;\n      this.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n        const expression = /** @type {MemberExpressionNode} */expr;\n        const info = getInfo(expr);\n        if (info !== undefined) {\n          return this.callHooksForInfoWithFallback(this.hooks.evaluateIdentifier, info.name, name => {\n            cachedExpression = expression;\n            cachedInfo = info;\n          }, name => {\n            const hook = this.hooks.evaluateDefinedIdentifier.get(name);\n            if (hook !== undefined) {\n              return hook.call(expression);\n            }\n          }, expression);\n        }\n      });\n      this.hooks.evaluate.for(exprType).tap({\n        name: \"JavascriptParser\",\n        stage: 100\n      }, expr => {\n        const info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n        if (info !== undefined) {\n          return new BasicEvaluatedExpression().setIdentifier(info.name, info.rootInfo, info.getMembers, info.getMembersOptionals).setRange(expr.range);\n        }\n      });\n      this.hooks.finish.tap(\"JavascriptParser\", () => {\n        // Cleanup for GC\n        cachedExpression = cachedInfo = undefined;\n      });\n    };\n    tapEvaluateWithVariableInfo(\"Identifier\", expr => {\n      const info = this.getVariableInfo( /** @type {IdentifierNode} */expr.name);\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => [],\n          getMembersOptionals: () => []\n        };\n      }\n    });\n    tapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n      const info = this.getVariableInfo(\"this\");\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => [],\n          getMembersOptionals: () => []\n        };\n      }\n    });\n    this.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n      const metaProperty = /** @type {MetaPropertyNode} */expr;\n      return this.callHooksForName(this.hooks.evaluateIdentifier, getRootName(expr), metaProperty);\n    });\n    tapEvaluateWithVariableInfo(\"MemberExpression\", expr => this.getMemberExpressionInfo( /** @type {MemberExpressionNode} */expr, ALLOWED_MEMBER_TYPES_EXPRESSION));\n    this.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {CallExpressionNode} */_expr;\n      if (expr.callee.type === \"MemberExpression\" && expr.callee.property.type === (expr.callee.computed ? \"Literal\" : \"Identifier\")) {\n        // type Super also possible here\n        const param = this.evaluateExpression( /** @type {ExpressionNode} */expr.callee.object);\n        const property = expr.callee.property.type === \"Literal\" ? `${expr.callee.property.value}` : expr.callee.property.name;\n        const hook = this.hooks.evaluateCallExpressionMember.get(property);\n        if (hook !== undefined) {\n          return hook.call(expr, param);\n        }\n      } else if (expr.callee.type === \"Identifier\") {\n        return this.callHooksForName(this.hooks.evaluateCallExpression, expr.callee.name, expr);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"indexOf\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length === 0) return;\n      const [arg1, arg2] = expr.arguments;\n      if (arg1.type === \"SpreadElement\") return;\n      const arg1Eval = this.evaluateExpression(arg1);\n      if (!arg1Eval.isString()) return;\n      const arg1Value = arg1Eval.string;\n      let result;\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const arg2Eval = this.evaluateExpression(arg2);\n        if (!arg2Eval.isNumber()) return;\n        result = param.string.indexOf(arg1Value, arg2Eval.number);\n      } else {\n        result = param.string.indexOf(arg1Value);\n      }\n      return new BasicEvaluatedExpression().setNumber(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"replace\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 2) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      if (expr.arguments[1].type === \"SpreadElement\") return;\n      let arg1 = this.evaluateExpression(expr.arguments[0]);\n      let arg2 = this.evaluateExpression(expr.arguments[1]);\n      if (!arg1.isString() && !arg1.isRegExp()) return;\n      const arg1Value = arg1.regExp || arg1.string;\n      if (!arg2.isString()) return;\n      const arg2Value = arg2.string;\n      return new BasicEvaluatedExpression().setString(param.string.replace(arg1Value, arg2Value)).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    [\"substr\", \"substring\", \"slice\"].forEach(fn => {\n      this.hooks.evaluateCallExpressionMember.for(fn).tap(\"JavascriptParser\", (expr, param) => {\n        if (!param.isString()) return;\n        let arg1;\n        let result,\n          str = param.string;\n        switch (expr.arguments.length) {\n          case 1:\n            if (expr.arguments[0].type === \"SpreadElement\") return;\n            arg1 = this.evaluateExpression(expr.arguments[0]);\n            if (!arg1.isNumber()) return;\n            result = str[fn](arg1.number);\n            break;\n          case 2:\n            {\n              if (expr.arguments[0].type === \"SpreadElement\") return;\n              if (expr.arguments[1].type === \"SpreadElement\") return;\n              arg1 = this.evaluateExpression(expr.arguments[0]);\n              const arg2 = this.evaluateExpression(expr.arguments[1]);\n              if (!arg1.isNumber()) return;\n              if (!arg2.isNumber()) return;\n              result = str[fn](arg1.number, arg2.number);\n              break;\n            }\n          default:\n            return;\n        }\n        return new BasicEvaluatedExpression().setString(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n      });\n    });\n\n    /**\n     * @param {\"cooked\" | \"raw\"} kind kind of values to get\n     * @param {TemplateLiteralNode} templateLiteralExpr TemplateLiteral expr\n     * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n     */\n    const getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n      /** @type {BasicEvaluatedExpression[]} */\n      const quasis = [];\n      /** @type {BasicEvaluatedExpression[]} */\n      const parts = [];\n      for (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n        const quasiExpr = templateLiteralExpr.quasis[i];\n        const quasi = quasiExpr.value[kind];\n        if (i > 0) {\n          const prevExpr = parts[parts.length - 1];\n          const expr = this.evaluateExpression(templateLiteralExpr.expressions[i - 1]);\n          const exprAsString = expr.asString();\n          if (typeof exprAsString === \"string\" && !expr.couldHaveSideEffects()) {\n            // We can merge quasi + expr + quasi when expr\n            // is a const string\n\n            prevExpr.setString(prevExpr.string + exprAsString + quasi);\n            prevExpr.setRange([prevExpr.range[0], quasiExpr.range[1]]);\n            // We unset the expression as it doesn't match to a single expression\n            prevExpr.setExpression(undefined);\n            continue;\n          }\n          parts.push(expr);\n        }\n        const part = new BasicEvaluatedExpression().setString(quasi).setRange(quasiExpr.range).setExpression(quasiExpr);\n        quasis.push(part);\n        parts.push(part);\n      }\n      return {\n        quasis,\n        parts\n      };\n    };\n    this.hooks.evaluate.for(\"TemplateLiteral\").tap(\"JavascriptParser\", _node => {\n      const node = /** @type {TemplateLiteralNode} */_node;\n      const {\n        quasis,\n        parts\n      } = getSimplifiedTemplateResult(\"cooked\", node);\n      if (parts.length === 1) {\n        return parts[0].setRange(node.range);\n      }\n      return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"cooked\").setRange(node.range);\n    });\n    this.hooks.evaluate.for(\"TaggedTemplateExpression\").tap(\"JavascriptParser\", _node => {\n      const node = /** @type {TaggedTemplateExpressionNode} */_node;\n      const tag = this.evaluateExpression(node.tag);\n      if (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n        const {\n          quasis,\n          parts\n        } = getSimplifiedTemplateResult(\"raw\", node.quasi);\n        return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"raw\").setRange(node.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"concat\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString() && !param.isWrapped()) return;\n      let stringSuffix = null;\n      let hasUnknownParams = false;\n      const innerExpressions = [];\n      for (let i = expr.arguments.length - 1; i >= 0; i--) {\n        const arg = expr.arguments[i];\n        if (arg.type === \"SpreadElement\") return;\n        const argExpr = this.evaluateExpression(arg);\n        if (hasUnknownParams || !argExpr.isString() && !argExpr.isNumber()) {\n          hasUnknownParams = true;\n          innerExpressions.push(argExpr);\n          continue;\n        }\n        const value = argExpr.isString() ? argExpr.string : \"\" + argExpr.number;\n        const newString = value + (stringSuffix ? stringSuffix.string : \"\");\n        const newRange = [argExpr.range[0], (stringSuffix || argExpr).range[1]];\n        stringSuffix = new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || argExpr.couldHaveSideEffects()).setRange(newRange);\n      }\n      if (hasUnknownParams) {\n        const prefix = param.isString() ? param : param.prefix;\n        const inner = param.isWrapped() && param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(prefix, stringSuffix, inner).setRange(expr.range);\n      } else if (param.isWrapped()) {\n        const postfix = stringSuffix || param.postfix;\n        const inner = param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(param.prefix, postfix, inner).setRange(expr.range);\n      } else {\n        const newString = param.string + (stringSuffix ? stringSuffix.string : \"\");\n        return new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || param.couldHaveSideEffects()).setRange(expr.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"split\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 1) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      let result;\n      const arg = this.evaluateExpression(expr.arguments[0]);\n      if (arg.isString()) {\n        result = param.string.split(arg.string);\n      } else if (arg.isRegExp()) {\n        result = param.string.split(arg.regExp);\n      } else {\n        return;\n      }\n      return new BasicEvaluatedExpression().setArray(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"ConditionalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ConditionalExpressionNode} */_expr;\n      const condition = this.evaluateExpression(expr.test);\n      const conditionValue = condition.asBool();\n      let res;\n      if (conditionValue === undefined) {\n        const consequent = this.evaluateExpression(expr.consequent);\n        const alternate = this.evaluateExpression(expr.alternate);\n        res = new BasicEvaluatedExpression();\n        if (consequent.isConditional()) {\n          res.setOptions(consequent.options);\n        } else {\n          res.setOptions([consequent]);\n        }\n        if (alternate.isConditional()) {\n          res.addOptions(alternate.options);\n        } else {\n          res.addOptions([alternate]);\n        }\n      } else {\n        res = this.evaluateExpression(conditionValue ? expr.consequent : expr.alternate);\n        if (condition.couldHaveSideEffects()) res.setSideEffects();\n      }\n      res.setRange(expr.range);\n      return res;\n    });\n    this.hooks.evaluate.for(\"ArrayExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ArrayExpressionNode} */_expr;\n      const items = expr.elements.map(element => {\n        return element !== null && element.type !== \"SpreadElement\" && this.evaluateExpression(element);\n      });\n      if (!items.every(Boolean)) return;\n      return new BasicEvaluatedExpression().setItems(items).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"ChainExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr = /** @type {ChainExpressionNode} */_expr;\n      /** @type {ExpressionNode[]} */\n      const optionalExpressionsStack = [];\n      /** @type {ExpressionNode|SuperNode} */\n      let next = expr.expression;\n      while (next.type === \"MemberExpression\" || next.type === \"CallExpression\") {\n        if (next.type === \"MemberExpression\") {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push( /** @type {ExpressionNode} */next.object);\n          }\n          next = next.object;\n        } else {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push( /** @type {ExpressionNode} */next.callee);\n          }\n          next = next.callee;\n        }\n      }\n      while (optionalExpressionsStack.length > 0) {\n        const expression = optionalExpressionsStack.pop();\n        const evaluated = this.evaluateExpression(expression);\n        if (evaluated.asNullish()) {\n          return evaluated.setRange(_expr.range);\n        }\n      }\n      return this.evaluateExpression(expr.expression);\n    });\n  }\n  getRenameIdentifier(expr) {\n    const result = this.evaluateExpression(expr);\n    if (result.isIdentifier()) {\n      return result.identifier;\n    }\n  }\n\n  /**\n   * @param {ClassExpressionNode | ClassDeclarationNode} classy a class node\n   * @returns {void}\n   */\n  walkClass(classy) {\n    if (classy.superClass) {\n      if (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n        this.walkExpression(classy.superClass);\n      }\n    }\n    if (classy.body && classy.body.type === \"ClassBody\") {\n      for (const classElement of /** @type {TODO} */classy.body.body) {\n        if (!this.hooks.classBodyElement.call(classElement, classy)) {\n          if (classElement.computed && classElement.key) {\n            this.walkExpression(classElement.key);\n          }\n          if (classElement.value) {\n            if (!this.hooks.classBodyValue.call(classElement.value, classElement, classy)) {\n              const wasTopLevel = this.scope.topLevelScope;\n              this.scope.topLevelScope = false;\n              this.walkExpression(classElement.value);\n              this.scope.topLevelScope = wasTopLevel;\n            }\n          } else if (classElement.type === \"StaticBlock\") {\n            const wasTopLevel = this.scope.topLevelScope;\n            this.scope.topLevelScope = false;\n            this.walkBlockStatement(classElement);\n            this.scope.topLevelScope = wasTopLevel;\n          }\n        }\n      }\n    }\n  }\n\n  // Pre walking iterates the scope for variable declarations\n  preWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.preWalkStatement(statement);\n    }\n  }\n\n  // Block pre walking iterates the scope for block variable declarations\n  blockPreWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.blockPreWalkStatement(statement);\n    }\n  }\n\n  // Walking iterates the statements and expressions and processes them\n  walkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.walkStatement(statement);\n    }\n  }\n  preWalkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.preStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.preWalkBlockStatement(statement);\n        break;\n      case \"DoWhileStatement\":\n        this.preWalkDoWhileStatement(statement);\n        break;\n      case \"ForInStatement\":\n        this.preWalkForInStatement(statement);\n        break;\n      case \"ForOfStatement\":\n        this.preWalkForOfStatement(statement);\n        break;\n      case \"ForStatement\":\n        this.preWalkForStatement(statement);\n        break;\n      case \"FunctionDeclaration\":\n        this.preWalkFunctionDeclaration(statement);\n        break;\n      case \"IfStatement\":\n        this.preWalkIfStatement(statement);\n        break;\n      case \"LabeledStatement\":\n        this.preWalkLabeledStatement(statement);\n        break;\n      case \"SwitchStatement\":\n        this.preWalkSwitchStatement(statement);\n        break;\n      case \"TryStatement\":\n        this.preWalkTryStatement(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.preWalkVariableDeclaration(statement);\n        break;\n      case \"WhileStatement\":\n        this.preWalkWhileStatement(statement);\n        break;\n      case \"WithStatement\":\n        this.preWalkWithStatement(statement);\n        break;\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n  blockPreWalkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.blockPreStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"ImportDeclaration\":\n        this.blockPreWalkImportDeclaration(statement);\n        break;\n      case \"ExportAllDeclaration\":\n        this.blockPreWalkExportAllDeclaration(statement);\n        break;\n      case \"ExportDefaultDeclaration\":\n        this.blockPreWalkExportDefaultDeclaration(statement);\n        break;\n      case \"ExportNamedDeclaration\":\n        this.blockPreWalkExportNamedDeclaration(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.blockPreWalkVariableDeclaration(statement);\n        break;\n      case \"ClassDeclaration\":\n        this.blockPreWalkClassDeclaration(statement);\n        break;\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n  walkStatement(statement) {\n    this.statementPath.push(statement);\n    if (this.hooks.statement.call(statement) !== undefined) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.walkBlockStatement(statement);\n        break;\n      case \"ClassDeclaration\":\n        this.walkClassDeclaration(statement);\n        break;\n      case \"DoWhileStatement\":\n        this.walkDoWhileStatement(statement);\n        break;\n      case \"ExportDefaultDeclaration\":\n        this.walkExportDefaultDeclaration(statement);\n        break;\n      case \"ExportNamedDeclaration\":\n        this.walkExportNamedDeclaration(statement);\n        break;\n      case \"ExpressionStatement\":\n        this.walkExpressionStatement(statement);\n        break;\n      case \"ForInStatement\":\n        this.walkForInStatement(statement);\n        break;\n      case \"ForOfStatement\":\n        this.walkForOfStatement(statement);\n        break;\n      case \"ForStatement\":\n        this.walkForStatement(statement);\n        break;\n      case \"FunctionDeclaration\":\n        this.walkFunctionDeclaration(statement);\n        break;\n      case \"IfStatement\":\n        this.walkIfStatement(statement);\n        break;\n      case \"LabeledStatement\":\n        this.walkLabeledStatement(statement);\n        break;\n      case \"ReturnStatement\":\n        this.walkReturnStatement(statement);\n        break;\n      case \"SwitchStatement\":\n        this.walkSwitchStatement(statement);\n        break;\n      case \"ThrowStatement\":\n        this.walkThrowStatement(statement);\n        break;\n      case \"TryStatement\":\n        this.walkTryStatement(statement);\n        break;\n      case \"VariableDeclaration\":\n        this.walkVariableDeclaration(statement);\n        break;\n      case \"WhileStatement\":\n        this.walkWhileStatement(statement);\n        break;\n      case \"WithStatement\":\n        this.walkWithStatement(statement);\n        break;\n    }\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  /**\n   * Walks a statements that is nested within a parent statement\n   * and can potentially be a non-block statement.\n   * This enforces the nested statement to never be in ASI position.\n   * @param {StatementNode} statement the nested statement\n   * @returns {void}\n   */\n  walkNestedStatement(statement) {\n    this.prevStatement = undefined;\n    this.walkStatement(statement);\n  }\n\n  // Real Statements\n  preWalkBlockStatement(statement) {\n    this.preWalkStatements(statement.body);\n  }\n  walkBlockStatement(statement) {\n    this.inBlockScope(() => {\n      const body = statement.body;\n      const prev = this.prevStatement;\n      this.blockPreWalkStatements(body);\n      this.prevStatement = prev;\n      this.walkStatements(body);\n    });\n  }\n  walkExpressionStatement(statement) {\n    this.walkExpression(statement.expression);\n  }\n  preWalkIfStatement(statement) {\n    this.preWalkStatement(statement.consequent);\n    if (statement.alternate) {\n      this.preWalkStatement(statement.alternate);\n    }\n  }\n  walkIfStatement(statement) {\n    const result = this.hooks.statementIf.call(statement);\n    if (result === undefined) {\n      this.walkExpression(statement.test);\n      this.walkNestedStatement(statement.consequent);\n      if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkNestedStatement(statement.consequent);\n      } else if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    }\n  }\n  preWalkLabeledStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n  walkLabeledStatement(statement) {\n    const hook = this.hooks.label.get(statement.label.name);\n    if (hook !== undefined) {\n      const result = hook.call(statement);\n      if (result === true) return;\n    }\n    this.walkNestedStatement(statement.body);\n  }\n  preWalkWithStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n  walkWithStatement(statement) {\n    this.walkExpression(statement.object);\n    this.walkNestedStatement(statement.body);\n  }\n  preWalkSwitchStatement(statement) {\n    this.preWalkSwitchCases(statement.cases);\n  }\n  walkSwitchStatement(statement) {\n    this.walkExpression(statement.discriminant);\n    this.walkSwitchCases(statement.cases);\n  }\n  walkTerminatingStatement(statement) {\n    if (statement.argument) this.walkExpression(statement.argument);\n  }\n  walkReturnStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n  walkThrowStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n  preWalkTryStatement(statement) {\n    this.preWalkStatement(statement.block);\n    if (statement.handler) this.preWalkCatchClause(statement.handler);\n    if (statement.finializer) this.preWalkStatement(statement.finializer);\n  }\n  walkTryStatement(statement) {\n    if (this.scope.inTry) {\n      this.walkStatement(statement.block);\n    } else {\n      this.scope.inTry = true;\n      this.walkStatement(statement.block);\n      this.scope.inTry = false;\n    }\n    if (statement.handler) this.walkCatchClause(statement.handler);\n    if (statement.finalizer) this.walkStatement(statement.finalizer);\n  }\n  preWalkWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n  walkWhileStatement(statement) {\n    this.walkExpression(statement.test);\n    this.walkNestedStatement(statement.body);\n  }\n  preWalkDoWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n  walkDoWhileStatement(statement) {\n    this.walkNestedStatement(statement.body);\n    this.walkExpression(statement.test);\n  }\n  preWalkForStatement(statement) {\n    if (statement.init) {\n      if (statement.init.type === \"VariableDeclaration\") {\n        this.preWalkStatement(statement.init);\n      }\n    }\n    this.preWalkStatement(statement.body);\n  }\n  walkForStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.init) {\n        if (statement.init.type === \"VariableDeclaration\") {\n          this.blockPreWalkVariableDeclaration(statement.init);\n          this.prevStatement = undefined;\n          this.walkStatement(statement.init);\n        } else {\n          this.walkExpression(statement.init);\n        }\n      }\n      if (statement.test) {\n        this.walkExpression(statement.test);\n      }\n      if (statement.update) {\n        this.walkExpression(statement.update);\n      }\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n  preWalkForInStatement(statement) {\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n    this.preWalkStatement(statement.body);\n  }\n  walkForInStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n      this.walkExpression(statement.right);\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n  preWalkForOfStatement(statement) {\n    if (statement.await && this.scope.topLevelScope === true) {\n      this.hooks.topLevelAwait.call(statement);\n    }\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n    this.preWalkStatement(statement.body);\n  }\n  walkForOfStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n      this.walkExpression(statement.right);\n      const body = statement.body;\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  // Declarations\n  preWalkFunctionDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n  walkFunctionDeclaration(statement) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    this.inFunctionScope(true, statement.params, () => {\n      for (const param of statement.params) {\n        this.walkPattern(param);\n      }\n      if (statement.body.type === \"BlockStatement\") {\n        this.detectMode(statement.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.body);\n        this.prevStatement = prev;\n        this.walkStatement(statement.body);\n      } else {\n        this.walkExpression(statement.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n  blockPreWalkImportDeclaration(statement) {\n    const source = statement.source.value;\n    this.hooks.import.call(statement, source);\n    for (const specifier of statement.specifiers) {\n      const name = specifier.local.name;\n      switch (specifier.type) {\n        case \"ImportDefaultSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, \"default\", name)) {\n            this.defineVariable(name);\n          }\n          break;\n        case \"ImportSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, specifier.imported.name || specifier.imported.value, name)) {\n            this.defineVariable(name);\n          }\n          break;\n        case \"ImportNamespaceSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n            this.defineVariable(name);\n          }\n          break;\n        default:\n          this.defineVariable(name);\n      }\n    }\n  }\n  enterDeclaration(declaration, onIdent) {\n    switch (declaration.type) {\n      case \"VariableDeclaration\":\n        for (const declarator of declaration.declarations) {\n          switch (declarator.type) {\n            case \"VariableDeclarator\":\n              {\n                this.enterPattern(declarator.id, onIdent);\n                break;\n              }\n          }\n        }\n        break;\n      case \"FunctionDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n      case \"ClassDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n    }\n  }\n  blockPreWalkExportNamedDeclaration(statement) {\n    let source;\n    if (statement.source) {\n      source = statement.source.value;\n      this.hooks.exportImport.call(statement, source);\n    } else {\n      this.hooks.export.call(statement);\n    }\n    if (statement.declaration) {\n      if (!this.hooks.exportDeclaration.call(statement, statement.declaration)) {\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.declaration);\n        this.prevStatement = prev;\n        this.blockPreWalkStatement(statement.declaration);\n        let index = 0;\n        this.enterDeclaration(statement.declaration, def => {\n          this.hooks.exportSpecifier.call(statement, def, def, index++);\n        });\n      }\n    }\n    if (statement.specifiers) {\n      for (let specifierIndex = 0; specifierIndex < statement.specifiers.length; specifierIndex++) {\n        const specifier = statement.specifiers[specifierIndex];\n        switch (specifier.type) {\n          case \"ExportSpecifier\":\n            {\n              const name = specifier.exported.name || specifier.exported.value;\n              if (source) {\n                this.hooks.exportImportSpecifier.call(statement, source, specifier.local.name, name, specifierIndex);\n              } else {\n                this.hooks.exportSpecifier.call(statement, specifier.local.name, name, specifierIndex);\n              }\n              break;\n            }\n        }\n      }\n    }\n  }\n  walkExportNamedDeclaration(statement) {\n    if (statement.declaration) {\n      this.walkStatement(statement.declaration);\n    }\n  }\n  blockPreWalkExportDefaultDeclaration(statement) {\n    const prev = this.prevStatement;\n    this.preWalkStatement(statement.declaration);\n    this.prevStatement = prev;\n    this.blockPreWalkStatement(statement.declaration);\n    if (statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      this.hooks.exportSpecifier.call(statement, statement.declaration.id.name, \"default\", undefined);\n    }\n  }\n  walkExportDefaultDeclaration(statement) {\n    this.hooks.export.call(statement);\n    if (statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      if (!this.hooks.exportDeclaration.call(statement, statement.declaration)) {\n        this.walkStatement(statement.declaration);\n      }\n    } else {\n      // Acorn parses `export default function() {}` as `FunctionDeclaration` and\n      // `export default class {}` as `ClassDeclaration`, both with `id = null`.\n      // These nodes must be treated as expressions.\n      if (statement.declaration.type === \"FunctionDeclaration\" || statement.declaration.type === \"ClassDeclaration\") {\n        this.walkStatement(statement.declaration);\n      } else {\n        this.walkExpression(statement.declaration);\n      }\n      if (!this.hooks.exportExpression.call(statement, statement.declaration)) {\n        this.hooks.exportSpecifier.call(statement, statement.declaration, \"default\", undefined);\n      }\n    }\n  }\n  blockPreWalkExportAllDeclaration(statement) {\n    const source = statement.source.value;\n    const name = statement.exported ? statement.exported.name : null;\n    this.hooks.exportImport.call(statement, source);\n    this.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n  }\n  preWalkVariableDeclaration(statement) {\n    if (statement.kind !== \"var\") return;\n    this._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n  }\n  blockPreWalkVariableDeclaration(statement) {\n    if (statement.kind === \"var\") return;\n    const hookMap = statement.kind === \"const\" ? this.hooks.varDeclarationConst : this.hooks.varDeclarationLet;\n    this._preWalkVariableDeclaration(statement, hookMap);\n  }\n  _preWalkVariableDeclaration(statement, hookMap) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            if (!this.hooks.preDeclarator.call(declarator, statement)) {\n              this.enterPattern(declarator.id, (name, decl) => {\n                let hook = hookMap.get(name);\n                if (hook === undefined || !hook.call(decl)) {\n                  hook = this.hooks.varDeclaration.get(name);\n                  if (hook === undefined || !hook.call(decl)) {\n                    this.defineVariable(name);\n                  }\n                }\n              });\n            }\n            break;\n          }\n      }\n    }\n  }\n  walkVariableDeclaration(statement) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            const renameIdentifier = declarator.init && this.getRenameIdentifier(declarator.init);\n            if (renameIdentifier && declarator.id.type === \"Identifier\") {\n              const hook = this.hooks.canRename.get(renameIdentifier);\n              if (hook !== undefined && hook.call(declarator.init)) {\n                // renaming with \"var a = b;\"\n                const hook = this.hooks.rename.get(renameIdentifier);\n                if (hook === undefined || !hook.call(declarator.init)) {\n                  this.setVariable(declarator.id.name, renameIdentifier);\n                }\n                break;\n              }\n            }\n            if (!this.hooks.declarator.call(declarator, statement)) {\n              this.walkPattern(declarator.id);\n              if (declarator.init) this.walkExpression(declarator.init);\n            }\n            break;\n          }\n      }\n    }\n  }\n  blockPreWalkClassDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n  walkClassDeclaration(statement) {\n    this.walkClass(statement);\n  }\n  preWalkSwitchCases(switchCases) {\n    for (let index = 0, len = switchCases.length; index < len; index++) {\n      const switchCase = switchCases[index];\n      this.preWalkStatements(switchCase.consequent);\n    }\n  }\n  walkSwitchCases(switchCases) {\n    this.inBlockScope(() => {\n      const len = switchCases.length;\n\n      // we need to pre walk all statements first since we can have invalid code\n      // import A from \"module\";\n      // switch(1) {\n      //    case 1:\n      //      console.log(A); // should fail at runtime\n      //    case 2:\n      //      const A = 1;\n      // }\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n        if (switchCase.consequent.length > 0) {\n          const prev = this.prevStatement;\n          this.blockPreWalkStatements(switchCase.consequent);\n          this.prevStatement = prev;\n        }\n      }\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n        if (switchCase.test) {\n          this.walkExpression(switchCase.test);\n        }\n        if (switchCase.consequent.length > 0) {\n          this.walkStatements(switchCase.consequent);\n        }\n      }\n    });\n  }\n  preWalkCatchClause(catchClause) {\n    this.preWalkStatement(catchClause.body);\n  }\n  walkCatchClause(catchClause) {\n    this.inBlockScope(() => {\n      // Error binding is optional in catch clause since ECMAScript 2019\n      if (catchClause.param !== null) {\n        this.enterPattern(catchClause.param, ident => {\n          this.defineVariable(ident);\n        });\n        this.walkPattern(catchClause.param);\n      }\n      const prev = this.prevStatement;\n      this.blockPreWalkStatement(catchClause.body);\n      this.prevStatement = prev;\n      this.walkStatement(catchClause.body);\n    });\n  }\n  walkPattern(pattern) {\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.walkArrayPattern(pattern);\n        break;\n      case \"AssignmentPattern\":\n        this.walkAssignmentPattern(pattern);\n        break;\n      case \"MemberExpression\":\n        this.walkMemberExpression(pattern);\n        break;\n      case \"ObjectPattern\":\n        this.walkObjectPattern(pattern);\n        break;\n      case \"RestElement\":\n        this.walkRestElement(pattern);\n        break;\n    }\n  }\n  walkAssignmentPattern(pattern) {\n    this.walkExpression(pattern.right);\n    this.walkPattern(pattern.left);\n  }\n  walkObjectPattern(pattern) {\n    for (let i = 0, len = pattern.properties.length; i < len; i++) {\n      const prop = pattern.properties[i];\n      if (prop) {\n        if (prop.computed) this.walkExpression(prop.key);\n        if (prop.value) this.walkPattern(prop.value);\n      }\n    }\n  }\n  walkArrayPattern(pattern) {\n    for (let i = 0, len = pattern.elements.length; i < len; i++) {\n      const element = pattern.elements[i];\n      if (element) this.walkPattern(element);\n    }\n  }\n  walkRestElement(pattern) {\n    this.walkPattern(pattern.argument);\n  }\n  walkExpressions(expressions) {\n    for (const expression of expressions) {\n      if (expression) {\n        this.walkExpression(expression);\n      }\n    }\n  }\n  walkExpression(expression) {\n    switch (expression.type) {\n      case \"ArrayExpression\":\n        this.walkArrayExpression(expression);\n        break;\n      case \"ArrowFunctionExpression\":\n        this.walkArrowFunctionExpression(expression);\n        break;\n      case \"AssignmentExpression\":\n        this.walkAssignmentExpression(expression);\n        break;\n      case \"AwaitExpression\":\n        this.walkAwaitExpression(expression);\n        break;\n      case \"BinaryExpression\":\n        this.walkBinaryExpression(expression);\n        break;\n      case \"CallExpression\":\n        this.walkCallExpression(expression);\n        break;\n      case \"ChainExpression\":\n        this.walkChainExpression(expression);\n        break;\n      case \"ClassExpression\":\n        this.walkClassExpression(expression);\n        break;\n      case \"ConditionalExpression\":\n        this.walkConditionalExpression(expression);\n        break;\n      case \"FunctionExpression\":\n        this.walkFunctionExpression(expression);\n        break;\n      case \"Identifier\":\n        this.walkIdentifier(expression);\n        break;\n      case \"ImportExpression\":\n        this.walkImportExpression(expression);\n        break;\n      case \"LogicalExpression\":\n        this.walkLogicalExpression(expression);\n        break;\n      case \"MetaProperty\":\n        this.walkMetaProperty(expression);\n        break;\n      case \"MemberExpression\":\n        this.walkMemberExpression(expression);\n        break;\n      case \"NewExpression\":\n        this.walkNewExpression(expression);\n        break;\n      case \"ObjectExpression\":\n        this.walkObjectExpression(expression);\n        break;\n      case \"SequenceExpression\":\n        this.walkSequenceExpression(expression);\n        break;\n      case \"SpreadElement\":\n        this.walkSpreadElement(expression);\n        break;\n      case \"TaggedTemplateExpression\":\n        this.walkTaggedTemplateExpression(expression);\n        break;\n      case \"TemplateLiteral\":\n        this.walkTemplateLiteral(expression);\n        break;\n      case \"ThisExpression\":\n        this.walkThisExpression(expression);\n        break;\n      case \"UnaryExpression\":\n        this.walkUnaryExpression(expression);\n        break;\n      case \"UpdateExpression\":\n        this.walkUpdateExpression(expression);\n        break;\n      case \"YieldExpression\":\n        this.walkYieldExpression(expression);\n        break;\n    }\n  }\n  walkAwaitExpression(expression) {\n    if (this.scope.topLevelScope === true) this.hooks.topLevelAwait.call(expression);\n    this.walkExpression(expression.argument);\n  }\n  walkArrayExpression(expression) {\n    if (expression.elements) {\n      this.walkExpressions(expression.elements);\n    }\n  }\n  walkSpreadElement(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n  walkObjectExpression(expression) {\n    for (let propIndex = 0, len = expression.properties.length; propIndex < len; propIndex++) {\n      const prop = expression.properties[propIndex];\n      this.walkProperty(prop);\n    }\n  }\n  walkProperty(prop) {\n    if (prop.type === \"SpreadElement\") {\n      this.walkExpression(prop.argument);\n      return;\n    }\n    if (prop.computed) {\n      this.walkExpression(prop.key);\n    }\n    if (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n      this.scope.inShorthand = prop.value.name;\n      this.walkIdentifier(prop.value);\n      this.scope.inShorthand = false;\n    } else {\n      this.walkExpression(prop.value);\n    }\n  }\n  walkFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    const scopeParams = expression.params;\n\n    // Add function name in scope for recursive calls\n    if (expression.id) {\n      scopeParams.push(expression.id.name);\n    }\n    this.inFunctionScope(true, scopeParams, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n  walkArrowFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n    this.inFunctionScope(false, expression.params, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  /**\n   * @param {SequenceExpressionNode} expression the sequence\n   */\n  walkSequenceExpression(expression) {\n    if (!expression.expressions) return;\n    // We treat sequence expressions like statements when they are one statement level\n    // This has some benefits for optimizations that only work on statement level\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    if (currentStatement === expression || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expression) {\n      const old = this.statementPath.pop();\n      for (const expr of expression.expressions) {\n        this.statementPath.push(expr);\n        this.walkExpression(expr);\n        this.statementPath.pop();\n      }\n      this.statementPath.push(old);\n    } else {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n  walkUpdateExpression(expression) {\n    this.walkExpression(expression.argument);\n  }\n  walkUnaryExpression(expression) {\n    if (expression.operator === \"typeof\") {\n      const result = this.callHooksForExpression(this.hooks.typeof, expression.argument, expression);\n      if (result === true) return;\n      if (expression.argument.type === \"ChainExpression\") {\n        const result = this.callHooksForExpression(this.hooks.typeof, expression.argument.expression, expression);\n        if (result === true) return;\n      }\n    }\n    this.walkExpression(expression.argument);\n  }\n  walkLeftRightExpression(expression) {\n    this.walkExpression(expression.left);\n    this.walkExpression(expression.right);\n  }\n  walkBinaryExpression(expression) {\n    if (this.hooks.binaryExpression.call(expression) === undefined) {\n      this.walkLeftRightExpression(expression);\n    }\n  }\n  walkLogicalExpression(expression) {\n    const result = this.hooks.expressionLogicalOperator.call(expression);\n    if (result === undefined) {\n      this.walkLeftRightExpression(expression);\n    } else {\n      if (result) {\n        this.walkExpression(expression.right);\n      }\n    }\n  }\n  walkAssignmentExpression(expression) {\n    if (expression.left.type === \"Identifier\") {\n      const renameIdentifier = this.getRenameIdentifier(expression.right);\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, expression.right)) {\n          // renaming \"a = b;\"\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, expression.right)) {\n            this.setVariable(expression.left.name, typeof renameIdentifier === \"string\" ? this.getVariableInfo(renameIdentifier) : renameIdentifier);\n          }\n          return;\n        }\n      }\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.walkExpression(expression.left);\n        }\n      });\n      return;\n    }\n    if (expression.left.type.endsWith(\"Pattern\")) {\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.defineVariable(name);\n        }\n      });\n      this.walkPattern(expression.left);\n    } else if (expression.left.type === \"MemberExpression\") {\n      const exprName = this.getMemberExpressionInfo(expression.left, ALLOWED_MEMBER_TYPES_EXPRESSION);\n      if (exprName) {\n        if (this.callHooksForInfo(this.hooks.assignMemberChain, exprName.rootInfo, expression, exprName.getMembers())) {\n          return;\n        }\n      }\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    } else {\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    }\n  }\n  walkConditionalExpression(expression) {\n    const result = this.hooks.expressionConditionalOperator.call(expression);\n    if (result === undefined) {\n      this.walkExpression(expression.test);\n      this.walkExpression(expression.consequent);\n      if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkExpression(expression.consequent);\n      } else if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    }\n  }\n  walkNewExpression(expression) {\n    const result = this.callHooksForExpression(this.hooks.new, expression.callee, expression);\n    if (result === true) return;\n    this.walkExpression(expression.callee);\n    if (expression.arguments) {\n      this.walkExpressions(expression.arguments);\n    }\n  }\n  walkYieldExpression(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n  walkTemplateLiteral(expression) {\n    if (expression.expressions) {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n  walkTaggedTemplateExpression(expression) {\n    if (expression.tag) {\n      this.walkExpression(expression.tag);\n    }\n    if (expression.quasi && expression.quasi.expressions) {\n      this.walkExpressions(expression.quasi.expressions);\n    }\n  }\n  walkClassExpression(expression) {\n    this.walkClass(expression);\n  }\n\n  /**\n   * @param {ChainExpressionNode} expression expression\n   */\n  walkChainExpression(expression) {\n    const result = this.hooks.optionalChaining.call(expression);\n    if (result === undefined) {\n      if (expression.expression.type === \"CallExpression\") {\n        this.walkCallExpression(expression.expression);\n      } else {\n        this.walkMemberExpression(expression.expression);\n      }\n    }\n  }\n  _walkIIFE(functionExpression, options, currentThis) {\n    const getVarInfo = argOrThis => {\n      const renameIdentifier = this.getRenameIdentifier(argOrThis);\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, argOrThis)) {\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, argOrThis)) {\n            return typeof renameIdentifier === \"string\" ? this.getVariableInfo(renameIdentifier) : renameIdentifier;\n          }\n        }\n      }\n      this.walkExpression(argOrThis);\n    };\n    const {\n      params,\n      type\n    } = functionExpression;\n    const arrow = type === \"ArrowFunctionExpression\";\n    const renameThis = currentThis ? getVarInfo(currentThis) : null;\n    const varInfoForArgs = options.map(getVarInfo);\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n    const scopeParams = params.filter((identifier, idx) => !varInfoForArgs[idx]);\n\n    // Add function name in scope for recursive calls\n    if (functionExpression.id) {\n      scopeParams.push(functionExpression.id.name);\n    }\n    this.inFunctionScope(true, scopeParams, () => {\n      if (renameThis && !arrow) {\n        this.setVariable(\"this\", renameThis);\n      }\n      for (let i = 0; i < varInfoForArgs.length; i++) {\n        const varInfo = varInfoForArgs[i];\n        if (!varInfo) continue;\n        if (!params[i] || params[i].type !== \"Identifier\") continue;\n        this.setVariable(params[i].name, varInfo);\n      }\n      if (functionExpression.body.type === \"BlockStatement\") {\n        this.detectMode(functionExpression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(functionExpression.body);\n        this.prevStatement = prev;\n        this.walkStatement(functionExpression.body);\n      } else {\n        this.walkExpression(functionExpression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n  walkImportExpression(expression) {\n    let result = this.hooks.importCall.call(expression);\n    if (result === true) return;\n    this.walkExpression(expression.source);\n  }\n  walkCallExpression(expression) {\n    const isSimpleFunction = fn => {\n      return fn.params.every(p => p.type === \"Identifier\");\n    };\n    if (expression.callee.type === \"MemberExpression\" && expression.callee.object.type.endsWith(\"FunctionExpression\") && !expression.callee.computed && (expression.callee.property.name === \"call\" || expression.callee.property.name === \"bind\") && expression.arguments.length > 0 && isSimpleFunction(expression.callee.object)) {\n      // (function(…) { }.call/bind(?, …))\n      this._walkIIFE(expression.callee.object, expression.arguments.slice(1), expression.arguments[0]);\n    } else if (expression.callee.type.endsWith(\"FunctionExpression\") && isSimpleFunction(expression.callee)) {\n      // (function(…) { }(…))\n      this._walkIIFE(expression.callee, expression.arguments, null);\n    } else {\n      if (expression.callee.type === \"MemberExpression\") {\n        const exprInfo = this.getMemberExpressionInfo(expression.callee, ALLOWED_MEMBER_TYPES_CALL_EXPRESSION);\n        if (exprInfo && exprInfo.type === \"call\") {\n          const result = this.callHooksForInfo(this.hooks.callMemberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers());\n          if (result === true) return;\n        }\n      }\n      const callee = this.evaluateExpression(expression.callee);\n      if (callee.isIdentifier()) {\n        const result1 = this.callHooksForInfo(this.hooks.callMemberChain, callee.rootInfo, expression, callee.getMembers(), callee.getMembersOptionals ? callee.getMembersOptionals() : callee.getMembers().map(() => false));\n        if (result1 === true) return;\n        const result2 = this.callHooksForInfo(this.hooks.call, callee.identifier, expression);\n        if (result2 === true) return;\n      }\n      if (expression.callee) {\n        if (expression.callee.type === \"MemberExpression\") {\n          // because of call context we need to walk the call context as expression\n          this.walkExpression(expression.callee.object);\n          if (expression.callee.computed === true) this.walkExpression(expression.callee.property);\n        } else {\n          this.walkExpression(expression.callee);\n        }\n      }\n      if (expression.arguments) this.walkExpressions(expression.arguments);\n    }\n  }\n  walkMemberExpression(expression) {\n    const exprInfo = this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_ALL);\n    if (exprInfo) {\n      switch (exprInfo.type) {\n        case \"expression\":\n          {\n            const result1 = this.callHooksForInfo(this.hooks.expression, exprInfo.name, expression);\n            if (result1 === true) return;\n            const members = exprInfo.getMembers();\n            const membersOptionals = exprInfo.getMembersOptionals();\n            const result2 = this.callHooksForInfo(this.hooks.expressionMemberChain, exprInfo.rootInfo, expression, members, membersOptionals);\n            if (result2 === true) return;\n            this.walkMemberExpressionWithExpressionName(expression, exprInfo.name, exprInfo.rootInfo, members.slice(), () => this.callHooksForInfo(this.hooks.unhandledExpressionMemberChain, exprInfo.rootInfo, expression, members));\n            return;\n          }\n        case \"call\":\n          {\n            const result = this.callHooksForInfo(this.hooks.memberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers());\n            if (result === true) return;\n            // Fast skip over the member chain as we already called memberChainOfCallMemberChain\n            // and call computed property are literals anyway\n            this.walkExpression(exprInfo.call);\n            return;\n          }\n      }\n    }\n    this.walkExpression(expression.object);\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n  walkMemberExpressionWithExpressionName(expression, name, rootInfo, members, onUnhandled) {\n    if (expression.object.type === \"MemberExpression\") {\n      // optimize the case where expression.object is a MemberExpression too.\n      // we can keep info here when calling walkMemberExpression directly\n      const property = expression.property.name || `${expression.property.value}`;\n      name = name.slice(0, -property.length - 1);\n      members.pop();\n      const result = this.callHooksForInfo(this.hooks.expression, name, expression.object);\n      if (result === true) return;\n      this.walkMemberExpressionWithExpressionName(expression.object, name, rootInfo, members, onUnhandled);\n    } else if (!onUnhandled || !onUnhandled()) {\n      this.walkExpression(expression.object);\n    }\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n  walkThisExpression(expression) {\n    this.callHooksForName(this.hooks.expression, \"this\", expression);\n  }\n  walkIdentifier(expression) {\n    this.callHooksForName(this.hooks.expression, expression.name, expression);\n  }\n\n  /**\n   * @param {MetaPropertyNode} metaProperty meta property\n   */\n  walkMetaProperty(metaProperty) {\n    this.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n  }\n  callHooksForExpression(hookMap, expr) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    return this.callHooksForExpressionWithFallback(hookMap, expr, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {MemberExpressionNode} expr expression info\n   * @param {function(string, string | ScopeInfo | VariableInfo, function(): string[]): any} fallback callback when variable in not handled by hooks\n   * @param {function(string): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n  callHooksForExpressionWithFallback(hookMap, expr, fallback, defined) {\n    const exprName = this.getMemberExpressionInfo(expr, ALLOWED_MEMBER_TYPES_EXPRESSION);\n    if (exprName !== undefined) {\n      const members = exprName.getMembers();\n      for (var _len2 = arguments.length, args = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {\n        args[_key2 - 4] = arguments[_key2];\n      }\n      return this.callHooksForInfoWithFallback(hookMap, members.length === 0 ? exprName.rootInfo : exprName.name, fallback && (name => fallback(name, exprName.rootInfo, exprName.getMembers)), defined && (() => defined(exprName.name)), ...args);\n    }\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n  callHooksForName(hookMap, name) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n    return this.callHooksForNameWithFallback(hookMap, name, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param  {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n  callHooksForInfo(hookMap, info) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      args[_key4 - 2] = arguments[_key4];\n    }\n    return this.callHooksForInfoWithFallback(hookMap, info, undefined, undefined, ...args);\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param {function(string): any} fallback callback when variable in not handled by hooks\n   * @param {function(): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n  callHooksForInfoWithFallback(hookMap, info, fallback, defined) {\n    let name;\n    for (var _len5 = arguments.length, args = new Array(_len5 > 4 ? _len5 - 4 : 0), _key5 = 4; _key5 < _len5; _key5++) {\n      args[_key5 - 4] = arguments[_key5];\n    }\n    if (typeof info === \"string\") {\n      name = info;\n    } else {\n      if (!(info instanceof VariableInfo)) {\n        if (defined !== undefined) {\n          return defined();\n        }\n        return;\n      }\n      let tagInfo = info.tagInfo;\n      while (tagInfo !== undefined) {\n        const hook = hookMap.get(tagInfo.tag);\n        if (hook !== undefined) {\n          this.currentTagData = tagInfo.data;\n          const result = hook.call(...args);\n          this.currentTagData = undefined;\n          if (result !== undefined) return result;\n        }\n        tagInfo = tagInfo.next;\n      }\n      if (info.freeName === true) {\n        if (defined !== undefined) {\n          return defined();\n        }\n        return;\n      }\n      name = info.freeName;\n    }\n    const hook = hookMap.get(name);\n    if (hook !== undefined) {\n      const result = hook.call(...args);\n      if (result !== undefined) return result;\n    }\n    if (fallback !== undefined) {\n      return fallback(name);\n    }\n  }\n\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {function(string): any} fallback callback when variable in not handled by hooks\n   * @param {function(): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n  callHooksForNameWithFallback(hookMap, name, fallback, defined) {\n    for (var _len6 = arguments.length, args = new Array(_len6 > 4 ? _len6 - 4 : 0), _key6 = 4; _key6 < _len6; _key6++) {\n      args[_key6 - 4] = arguments[_key6];\n    }\n    return this.callHooksForInfoWithFallback(hookMap, this.getVariableInfo(name), fallback, defined, ...args);\n  }\n\n  /**\n   * @deprecated\n   * @param {any} params scope params\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n  inScope(params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    this.undefineVariable(\"this\");\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n  inFunctionScope(hasThis, params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    if (hasThis) {\n      this.undefineVariable(\"this\");\n    }\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n  inBlockScope(fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: oldScope.inTry,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    fn();\n    this.scope = oldScope;\n  }\n  detectMode(statements) {\n    const isLiteral = statements.length >= 1 && statements[0].type === \"ExpressionStatement\" && statements[0].expression.type === \"Literal\";\n    if (isLiteral && statements[0].expression.value === \"use strict\") {\n      this.scope.isStrict = true;\n    }\n    if (isLiteral && statements[0].expression.value === \"use asm\") {\n      this.scope.isAsmJs = true;\n    }\n  }\n  enterPatterns(patterns, onIdent) {\n    for (const pattern of patterns) {\n      if (typeof pattern !== \"string\") {\n        this.enterPattern(pattern, onIdent);\n      } else if (pattern) {\n        onIdent(pattern);\n      }\n    }\n  }\n  enterPattern(pattern, onIdent) {\n    if (!pattern) return;\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.enterArrayPattern(pattern, onIdent);\n        break;\n      case \"AssignmentPattern\":\n        this.enterAssignmentPattern(pattern, onIdent);\n        break;\n      case \"Identifier\":\n        this.enterIdentifier(pattern, onIdent);\n        break;\n      case \"ObjectPattern\":\n        this.enterObjectPattern(pattern, onIdent);\n        break;\n      case \"RestElement\":\n        this.enterRestElement(pattern, onIdent);\n        break;\n      case \"Property\":\n        if (pattern.shorthand && pattern.value.type === \"Identifier\") {\n          this.scope.inShorthand = pattern.value.name;\n          this.enterIdentifier(pattern.value, onIdent);\n          this.scope.inShorthand = false;\n        } else {\n          this.enterPattern(pattern.value, onIdent);\n        }\n        break;\n    }\n  }\n  enterIdentifier(pattern, onIdent) {\n    if (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n      onIdent(pattern.name, pattern);\n    }\n  }\n  enterObjectPattern(pattern, onIdent) {\n    for (let propIndex = 0, len = pattern.properties.length; propIndex < len; propIndex++) {\n      const prop = pattern.properties[propIndex];\n      this.enterPattern(prop, onIdent);\n    }\n  }\n  enterArrayPattern(pattern, onIdent) {\n    for (let elementIndex = 0, len = pattern.elements.length; elementIndex < len; elementIndex++) {\n      const element = pattern.elements[elementIndex];\n      this.enterPattern(element, onIdent);\n    }\n  }\n  enterRestElement(pattern, onIdent) {\n    this.enterPattern(pattern.argument, onIdent);\n  }\n  enterAssignmentPattern(pattern, onIdent) {\n    this.enterPattern(pattern.left, onIdent);\n  }\n\n  /**\n   * @param {ExpressionNode} expression expression node\n   * @returns {BasicEvaluatedExpression} evaluation result\n   */\n  evaluateExpression(expression) {\n    try {\n      const hook = this.hooks.evaluate.get(expression.type);\n      if (hook !== undefined) {\n        const result = hook.call(expression);\n        if (result !== undefined && result !== null) {\n          result.setExpression(expression);\n          return result;\n        }\n      }\n    } catch (e) {\n      console.warn(e);\n      // ignore error\n    }\n\n    return new BasicEvaluatedExpression().setRange(expression.range).setExpression(expression);\n  }\n  parseString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          return this.parseString(expression.left) + this.parseString(expression.right);\n        }\n        break;\n      case \"Literal\":\n        return expression.value + \"\";\n    }\n    throw new Error(expression.type + \" is not supported as parameter for require\");\n  }\n  parseCalculatedString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          const left = this.parseCalculatedString(expression.left);\n          const right = this.parseCalculatedString(expression.right);\n          if (left.code) {\n            return {\n              range: left.range,\n              value: left.value,\n              code: true,\n              conditional: false\n            };\n          } else if (right.code) {\n            return {\n              range: [left.range[0], right.range ? right.range[1] : left.range[1]],\n              value: left.value + right.value,\n              code: true,\n              conditional: false\n            };\n          } else {\n            return {\n              range: [left.range[0], right.range[1]],\n              value: left.value + right.value,\n              code: false,\n              conditional: false\n            };\n          }\n        }\n        break;\n      case \"ConditionalExpression\":\n        {\n          const consequent = this.parseCalculatedString(expression.consequent);\n          const alternate = this.parseCalculatedString(expression.alternate);\n          const items = [];\n          if (consequent.conditional) {\n            items.push(...consequent.conditional);\n          } else if (!consequent.code) {\n            items.push(consequent);\n          } else {\n            break;\n          }\n          if (alternate.conditional) {\n            items.push(...alternate.conditional);\n          } else if (!alternate.code) {\n            items.push(alternate);\n          } else {\n            break;\n          }\n          return {\n            range: undefined,\n            value: \"\",\n            code: true,\n            conditional: items\n          };\n        }\n      case \"Literal\":\n        return {\n          range: expression.range,\n          value: expression.value + \"\",\n          code: false,\n          conditional: false\n        };\n    }\n    return {\n      range: undefined,\n      value: \"\",\n      code: true,\n      conditional: false\n    };\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    let ast;\n    let comments;\n    const semicolons = new Set();\n    if (source === null) {\n      throw new Error(\"source must not be null\");\n    }\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n    if (typeof source === \"object\") {\n      ast = /** @type {ProgramNode} */source;\n      comments = source.comments;\n    } else {\n      comments = [];\n      ast = JavascriptParser._parse(source, {\n        sourceType: this.sourceType,\n        onComment: comments,\n        onInsertedSemicolon: pos => semicolons.add(pos)\n      });\n    }\n    const oldScope = this.scope;\n    const oldState = this.state;\n    const oldComments = this.comments;\n    const oldSemicolons = this.semicolons;\n    const oldStatementPath = this.statementPath;\n    const oldPrevStatement = this.prevStatement;\n    this.scope = {\n      topLevelScope: true,\n      inTry: false,\n      inShorthand: false,\n      isStrict: false,\n      isAsmJs: false,\n      definitions: new StackedMap()\n    };\n    /** @type {ParserState} */\n    this.state = state;\n    this.comments = comments;\n    this.semicolons = semicolons;\n    this.statementPath = [];\n    this.prevStatement = undefined;\n    if (this.hooks.program.call(ast, comments) === undefined) {\n      this.detectMode(ast.body);\n      this.preWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.blockPreWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.walkStatements(ast.body);\n    }\n    this.hooks.finish.call(ast, comments);\n    this.scope = oldScope;\n    /** @type {ParserState} */\n    this.state = oldState;\n    this.comments = oldComments;\n    this.semicolons = oldSemicolons;\n    this.statementPath = oldStatementPath;\n    this.prevStatement = oldPrevStatement;\n    return state;\n  }\n\n  /**\n   * @param {string} source source code\n   * @returns {BasicEvaluatedExpression} evaluation result\n   */\n  evaluate(source) {\n    const ast = JavascriptParser._parse(\"(\" + source + \")\", {\n      sourceType: this.sourceType,\n      locations: false\n    });\n    if (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n      throw new Error(\"evaluate: Source is not a expression\");\n    }\n    return this.evaluateExpression(ast.body[0].expression);\n  }\n\n  /**\n   * @param {ExpressionNode | DeclarationNode | PrivateIdentifierNode | null | undefined} expr an expression\n   * @param {number} commentsStartPos source position from which annotation comments are checked\n   * @returns {boolean} true, when the expression is pure\n   */\n  isPure(expr, commentsStartPos) {\n    if (!expr) return true;\n    const result = this.hooks.isPure.for(expr.type).call(expr, commentsStartPos);\n    if (typeof result === \"boolean\") return result;\n    switch (expr.type) {\n      case \"ClassDeclaration\":\n      case \"ClassExpression\":\n        {\n          if (expr.body.type !== \"ClassBody\") return false;\n          if (expr.superClass && !this.isPure(expr.superClass, expr.range[0])) {\n            return false;\n          }\n          const items = /** @type {(MethodDefinitionNode | PropertyDefinitionNode)[]} */\n          expr.body.body;\n          return items.every(item => (!item.computed || !item.key || this.isPure(item.key, item.range[0])) && (!item.static || !item.value || this.isPure(item.value, item.key ? item.key.range[1] : item.range[0])));\n        }\n      case \"FunctionDeclaration\":\n      case \"FunctionExpression\":\n      case \"ArrowFunctionExpression\":\n      case \"Literal\":\n      case \"PrivateIdentifier\":\n        return true;\n      case \"VariableDeclaration\":\n        return expr.declarations.every(decl => this.isPure(decl.init, decl.range[0]));\n      case \"ConditionalExpression\":\n        return this.isPure(expr.test, commentsStartPos) && this.isPure(expr.consequent, expr.test.range[1]) && this.isPure(expr.alternate, expr.consequent.range[1]);\n      case \"SequenceExpression\":\n        return expr.expressions.every(expr => {\n          const pureFlag = this.isPure(expr, commentsStartPos);\n          commentsStartPos = expr.range[1];\n          return pureFlag;\n        });\n      case \"CallExpression\":\n        {\n          const pureFlag = expr.range[0] - commentsStartPos > 12 && this.getComments([commentsStartPos, expr.range[0]]).some(comment => comment.type === \"Block\" && /^\\s*(#|@)__PURE__\\s*$/.test(comment.value));\n          if (!pureFlag) return false;\n          commentsStartPos = expr.callee.range[1];\n          return expr.arguments.every(arg => {\n            if (arg.type === \"SpreadElement\") return false;\n            const pureFlag = this.isPure(arg, commentsStartPos);\n            commentsStartPos = arg.range[1];\n            return pureFlag;\n          });\n        }\n    }\n    const evaluated = this.evaluateExpression(expr);\n    return !evaluated.couldHaveSideEffects();\n  }\n  getComments(range) {\n    const [rangeStart, rangeEnd] = range;\n    const compare = (comment, needle) => comment.range[0] - needle;\n    let idx = binarySearchBounds.ge(this.comments, rangeStart, compare);\n    let commentsInRange = [];\n    while (this.comments[idx] && this.comments[idx].range[1] <= rangeEnd) {\n      commentsInRange.push(this.comments[idx]);\n      idx++;\n    }\n    return commentsInRange;\n  }\n\n  /**\n   * @param {number} pos source code position\n   * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n   */\n  isAsiPosition(pos) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    if (currentStatement === undefined) throw new Error(\"Not in statement\");\n    return (\n      // Either asking directly for the end position of the current statement\n      currentStatement.range[1] === pos && this.semicolons.has(pos) ||\n      // Or asking for the start position of the current statement,\n      // here we have to check multiple things\n      currentStatement.range[0] === pos &&\n      // is there a previous statement which might be relevant?\n      this.prevStatement !== undefined &&\n      // is the end position of the previous statement an ASI position?\n      this.semicolons.has(this.prevStatement.range[1])\n    );\n  }\n\n  /**\n   * @param {number} pos source code position\n   * @returns {void}\n   */\n  unsetAsiPosition(pos) {\n    this.semicolons.delete(pos);\n  }\n  isStatementLevelExpression(expr) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    return expr === currentStatement || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expr;\n  }\n  getTagData(name, tag) {\n    const info = this.scope.definitions.get(name);\n    if (info instanceof VariableInfo) {\n      let tagInfo = info.tagInfo;\n      while (tagInfo !== undefined) {\n        if (tagInfo.tag === tag) return tagInfo.data;\n        tagInfo = tagInfo.next;\n      }\n    }\n  }\n  tagVariable(name, tag, data) {\n    const oldInfo = this.scope.definitions.get(name);\n    /** @type {VariableInfo} */\n    let newInfo;\n    if (oldInfo === undefined) {\n      newInfo = new VariableInfo(this.scope, name, {\n        tag,\n        data,\n        next: undefined\n      });\n    } else if (oldInfo instanceof VariableInfo) {\n      newInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n        tag,\n        data,\n        next: oldInfo.tagInfo\n      });\n    } else {\n      newInfo = new VariableInfo(oldInfo, true, {\n        tag,\n        data,\n        next: undefined\n      });\n    }\n    this.scope.definitions.set(name, newInfo);\n  }\n  defineVariable(name) {\n    const oldInfo = this.scope.definitions.get(name);\n    // Don't redefine variable in same scope to keep existing tags\n    if (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope) return;\n    this.scope.definitions.set(name, this.scope);\n  }\n  undefineVariable(name) {\n    this.scope.definitions.delete(name);\n  }\n  isVariableDefined(name) {\n    const info = this.scope.definitions.get(name);\n    if (info === undefined) return false;\n    if (info instanceof VariableInfo) {\n      return info.freeName === true;\n    }\n    return true;\n  }\n\n  /**\n   * @param {string} name variable name\n   * @returns {ExportedVariableInfo} info for this variable\n   */\n  getVariableInfo(name) {\n    const value = this.scope.definitions.get(name);\n    if (value === undefined) {\n      return name;\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * @param {string} name variable name\n   * @param {ExportedVariableInfo} variableInfo new info for this variable\n   * @returns {void}\n   */\n  setVariable(name, variableInfo) {\n    if (typeof variableInfo === \"string\") {\n      if (variableInfo === name) {\n        this.scope.definitions.delete(name);\n      } else {\n        this.scope.definitions.set(name, new VariableInfo(this.scope, variableInfo, undefined));\n      }\n    } else {\n      this.scope.definitions.set(name, variableInfo);\n    }\n  }\n  evaluatedVariable(tagInfo) {\n    return new VariableInfo(this.scope, undefined, tagInfo);\n  }\n  parseCommentOptions(range) {\n    const comments = this.getComments(range);\n    if (comments.length === 0) {\n      return EMPTY_COMMENT_OPTIONS;\n    }\n    let options = {};\n    /** @type {unknown[]} */\n    let errors = [];\n    for (const comment of comments) {\n      const {\n        value\n      } = comment;\n      if (value && webpackCommentRegExp.test(value)) {\n        // try compile only if webpack options comment is present\n        try {\n          for (let [key, val] of Object.entries(vm.runInNewContext(`(function(){return {${value}};})()`))) {\n            if (typeof val === \"object\" && val !== null) {\n              if (val.constructor.name === \"RegExp\") val = new RegExp(val);else val = JSON.parse(JSON.stringify(val));\n            }\n            options[key] = val;\n          }\n        } catch (e) {\n          const newErr = new Error(String(e.message));\n          newErr.stack = String(e.stack);\n          Object.assign(newErr, {\n            comment\n          });\n          errors.push(newErr);\n        }\n      }\n    }\n    return {\n      options,\n      errors\n    };\n  }\n\n  /**\n   * @param {MemberExpressionNode} expression a member expression\n   * @returns {{ members: string[], object: ExpressionNode | SuperNode, membersOptionals: boolean[] }} member names (reverse order) and remaining object\n   */\n  extractMemberExpressionChain(expression) {\n    /** @type {AnyNode} */\n    let expr = expression;\n    const members = [];\n    const membersOptionals = [];\n    while (expr.type === \"MemberExpression\") {\n      if (expr.computed) {\n        if (expr.property.type !== \"Literal\") break;\n        members.push(`${expr.property.value}`);\n      } else {\n        if (expr.property.type !== \"Identifier\") break;\n        members.push(expr.property.name);\n      }\n      membersOptionals.push(expr.optional);\n      expr = expr.object;\n    }\n    return {\n      members,\n      membersOptionals,\n      object: expr\n    };\n  }\n\n  /**\n   * @param {string} varName variable name\n   * @returns {{name: string, info: VariableInfo | string}} name of the free variable and variable info for that\n   */\n  getFreeInfoFromVariable(varName) {\n    const info = this.getVariableInfo(varName);\n    let name;\n    if (info instanceof VariableInfo) {\n      name = info.freeName;\n      if (typeof name !== \"string\") return undefined;\n    } else if (typeof info !== \"string\") {\n      return undefined;\n    } else {\n      name = info;\n    }\n    return {\n      info,\n      name\n    };\n  }\n\n  /** @typedef {{ type: \"call\", call: CallExpressionNode, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[], getMembersOptionals: () => boolean[]}} CallExpressionInfo */\n  /** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[], getMembersOptionals: () => boolean[]}} ExpressionExpressionInfo */\n\n  /**\n   * @param {MemberExpressionNode} expression a member expression\n   * @param {number} allowedTypes which types should be returned, presented in bit mask\n   * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n   */\n  getMemberExpressionInfo(expression, allowedTypes) {\n    const {\n      object,\n      members,\n      membersOptionals\n    } = this.extractMemberExpressionChain(expression);\n    switch (object.type) {\n      case \"CallExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0) return undefined;\n          let callee = object.callee;\n          let rootMembers = EMPTY_ARRAY;\n          if (callee.type === \"MemberExpression\") {\n            ({\n              object: callee,\n              members: rootMembers\n            } = this.extractMemberExpressionChain(callee));\n          }\n          const rootName = getRootName(callee);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          const calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n          return {\n            type: \"call\",\n            call: object,\n            calleeName,\n            rootInfo,\n            getCalleeMembers: memoize(() => rootMembers.reverse()),\n            name: objectAndMembersToName(`${calleeName}()`, members),\n            getMembers: memoize(() => members.reverse()),\n            getMembersOptionals: memoize(() => membersOptionals.reverse())\n          };\n        }\n      case \"Identifier\":\n      case \"MetaProperty\":\n      case \"ThisExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0) return undefined;\n          const rootName = getRootName(object);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          return {\n            type: \"expression\",\n            name: objectAndMembersToName(resolvedRoot, members),\n            rootInfo,\n            getMembers: memoize(() => members.reverse()),\n            getMembersOptionals: memoize(() => membersOptionals.reverse())\n          };\n        }\n    }\n  }\n\n  /**\n   * @param {MemberExpressionNode} expression an expression\n   * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]}} name info\n   */\n  getNameForExpression(expression) {\n    return this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_EXPRESSION);\n  }\n\n  /**\n   * @param {string} code source code\n   * @param {ParseOptions} options parsing options\n   * @returns {ProgramNode} parsed ast\n   */\n  static _parse(code, options) {\n    const type = options ? options.sourceType : \"module\";\n    /** @type {AcornOptions} */\n    const parserOptions = {\n      ...defaultParserOptions,\n      allowReturnOutsideFunction: type === \"script\",\n      ...options,\n      sourceType: type === \"auto\" ? \"module\" : type\n    };\n\n    /** @type {AnyNode} */\n    let ast;\n    let error;\n    let threw = false;\n    try {\n      ast = /** @type {AnyNode} */parser.parse(code, parserOptions);\n    } catch (e) {\n      error = e;\n      threw = true;\n    }\n    if (threw && type === \"auto\") {\n      parserOptions.sourceType = \"script\";\n      if (!(\"allowReturnOutsideFunction\" in options)) {\n        parserOptions.allowReturnOutsideFunction = true;\n      }\n      if (Array.isArray(parserOptions.onComment)) {\n        parserOptions.onComment.length = 0;\n      }\n      try {\n        ast = /** @type {AnyNode} */parser.parse(code, parserOptions);\n        threw = false;\n      } catch (e) {\n        // we use the error from first parse try\n        // so nothing to do here\n      }\n    }\n    if (threw) {\n      throw error;\n    }\n    return (/** @type {ProgramNode} */ast\n    );\n  }\n}\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION = ALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = ALLOWED_MEMBER_TYPES_CALL_EXPRESSION;","map":{"version":3,"names":["Parser","AcornParser","require","importAssertions","SyncBailHook","HookMap","vm","StackedMap","binarySearchBounds","memoize","BasicEvaluatedExpression","EMPTY_ARRAY","ALLOWED_MEMBER_TYPES_CALL_EXPRESSION","ALLOWED_MEMBER_TYPES_EXPRESSION","ALLOWED_MEMBER_TYPES_ALL","parser","extend","VariableInfo","constructor","declaredScope","freeName","tagInfo","joinRanges","startRange","endRange","objectAndMembersToName","object","membersReversed","name","i","length","getRootName","expression","type","meta","property","undefined","defaultParserOptions","ranges","locations","ecmaVersion","sourceType","allowHashBang","onComment","webpackCommentRegExp","RegExp","EMPTY_COMMENT_OPTIONS","options","errors","JavascriptParser","arguments","hooks","Object","freeze","evaluateTypeof","evaluate","evaluateIdentifier","evaluateDefinedIdentifier","evaluateNewExpression","evaluateCallExpression","evaluateCallExpressionMember","isPure","preStatement","blockPreStatement","statement","statementIf","classExtendsExpression","classBodyElement","classBodyValue","label","import","importSpecifier","export","exportImport","exportDeclaration","exportExpression","exportSpecifier","exportImportSpecifier","preDeclarator","declarator","varDeclaration","varDeclarationLet","varDeclarationConst","varDeclarationVar","pattern","canRename","rename","assign","assignMemberChain","typeof","importCall","topLevelAwait","call","callMemberChain","memberChainOfCallMemberChain","callMemberChainOfCallMemberChain","optionalChaining","new","binaryExpression","expressionMemberChain","unhandledExpressionMemberChain","expressionConditionalOperator","expressionLogicalOperator","program","finish","scope","state","comments","semicolons","statementPath","prevStatement","currentTagData","_initializeEvaluating","for","tap","_expr","expr","value","setNumber","setRange","range","setBigInt","setString","setBoolean","setNull","setRegExp","callee","callHooksForName","getVariableInfo","regExp","flags","arg1","evaluatedRegExp","evaluateExpression","asString","arg2","evaluatedFlags","isUndefined","isValidRegExpFlags","left","returnRight","allowedRight","operator","leftAsBool","asBool","leftAsNullish","asNullish","right","couldHaveSideEffects","setSideEffects","setTruthy","setFalsy","valueAsExpression","sideEffects","handleConstOperation","fn","isCompileTimeValue","result","asCompileTimeValue","isAlwaysDifferent","a","b","handleTemplateStringCompare","res","eql","getPrefix","parts","p","v","getSuffix","leftPrefix","rightPrefix","leftSuffix","rightSuffix","lenPrefix","Math","min","lenSuffix","slice","handleStrictEqualityComparison","leftConst","rightConst","isArray","isTemplateString","leftPrimitive","isPrimitiveType","rightPrimitive","handleAbstractEqualityComparison","isString","string","isNumber","number","isWrapped","prefix","setWrapped","postfix","wrappedInnerExpressions","isBigInt","bigint","concat","l","r","argument","callHooksForExpression","arg","isUnknown","isBoolean","isConstArray","isRegExp","isNull","bool","setUndefined","tapEvaluateWithVariableInfo","exprType","getInfo","cachedExpression","cachedInfo","info","callHooksForInfoWithFallback","hook","get","stage","setIdentifier","rootInfo","getMembers","getMembersOptionals","metaProperty","getMemberExpressionInfo","computed","param","arg1Eval","arg1Value","arg2Eval","indexOf","arg2Value","replace","forEach","str","getSimplifiedTemplateResult","kind","templateLiteralExpr","quasis","quasiExpr","quasi","prevExpr","expressions","exprAsString","setExpression","push","part","_node","node","setTemplateString","tag","isIdentifier","identifier","stringSuffix","hasUnknownParams","innerExpressions","argExpr","newString","newRange","inner","reverse","split","setArray","condition","test","conditionValue","consequent","alternate","isConditional","setOptions","addOptions","items","elements","map","element","every","Boolean","setItems","optionalExpressionsStack","next","optional","pop","evaluated","getRenameIdentifier","walkClass","classy","superClass","walkExpression","body","classElement","key","wasTopLevel","topLevelScope","walkBlockStatement","preWalkStatements","statements","index","len","preWalkStatement","blockPreWalkStatements","blockPreWalkStatement","walkStatements","walkStatement","preWalkBlockStatement","preWalkDoWhileStatement","preWalkForInStatement","preWalkForOfStatement","preWalkForStatement","preWalkFunctionDeclaration","preWalkIfStatement","preWalkLabeledStatement","preWalkSwitchStatement","preWalkTryStatement","preWalkVariableDeclaration","preWalkWhileStatement","preWalkWithStatement","blockPreWalkImportDeclaration","blockPreWalkExportAllDeclaration","blockPreWalkExportDefaultDeclaration","blockPreWalkExportNamedDeclaration","blockPreWalkVariableDeclaration","blockPreWalkClassDeclaration","walkClassDeclaration","walkDoWhileStatement","walkExportDefaultDeclaration","walkExportNamedDeclaration","walkExpressionStatement","walkForInStatement","walkForOfStatement","walkForStatement","walkFunctionDeclaration","walkIfStatement","walkLabeledStatement","walkReturnStatement","walkSwitchStatement","walkThrowStatement","walkTryStatement","walkVariableDeclaration","walkWhileStatement","walkWithStatement","walkNestedStatement","inBlockScope","prev","preWalkSwitchCases","cases","discriminant","walkSwitchCases","walkTerminatingStatement","block","handler","preWalkCatchClause","finializer","inTry","walkCatchClause","finalizer","init","update","walkPattern","await","id","defineVariable","inFunctionScope","params","detectMode","source","specifier","specifiers","local","imported","enterDeclaration","declaration","onIdent","declarations","enterPattern","def","specifierIndex","exported","_preWalkVariableDeclaration","hookMap","decl","renameIdentifier","setVariable","switchCases","switchCase","catchClause","ident","walkArrayPattern","walkAssignmentPattern","walkMemberExpression","walkObjectPattern","walkRestElement","properties","prop","walkExpressions","walkArrayExpression","walkArrowFunctionExpression","walkAssignmentExpression","walkAwaitExpression","walkBinaryExpression","walkCallExpression","walkChainExpression","walkClassExpression","walkConditionalExpression","walkFunctionExpression","walkIdentifier","walkImportExpression","walkLogicalExpression","walkMetaProperty","walkNewExpression","walkObjectExpression","walkSequenceExpression","walkSpreadElement","walkTaggedTemplateExpression","walkTemplateLiteral","walkThisExpression","walkUnaryExpression","walkUpdateExpression","walkYieldExpression","propIndex","walkProperty","shorthand","inShorthand","scopeParams","currentStatement","old","walkLeftRightExpression","callHooksForInfo","endsWith","exprName","_walkIIFE","functionExpression","currentThis","getVarInfo","argOrThis","arrow","renameThis","varInfoForArgs","filter","idx","varInfo","isSimpleFunction","exprInfo","getCalleeMembers","result1","result2","members","membersOptionals","walkMemberExpressionWithExpressionName","onUnhandled","_len","args","Array","_key","callHooksForExpressionWithFallback","fallback","defined","_len2","_key2","_len3","_key3","callHooksForNameWithFallback","_len4","_key4","_len5","_key5","data","_len6","_key6","inScope","oldScope","isStrict","isAsmJs","definitions","createChild","undefineVariable","enterPatterns","hasThis","isLiteral","patterns","enterArrayPattern","enterAssignmentPattern","enterIdentifier","enterObjectPattern","enterRestElement","elementIndex","e","console","warn","parseString","Error","parseCalculatedString","code","conditional","parse","ast","Set","Buffer","isBuffer","toString","_parse","onInsertedSemicolon","pos","add","oldState","oldComments","oldSemicolons","oldStatementPath","oldPrevStatement","commentsStartPos","item","static","pureFlag","getComments","some","comment","rangeStart","rangeEnd","compare","needle","ge","commentsInRange","isAsiPosition","has","unsetAsiPosition","delete","isStatementLevelExpression","getTagData","tagVariable","oldInfo","newInfo","set","isVariableDefined","variableInfo","evaluatedVariable","parseCommentOptions","val","entries","runInNewContext","JSON","stringify","newErr","String","message","stack","extractMemberExpressionChain","getFreeInfoFromVariable","varName","allowedTypes","rootMembers","rootName","resolvedRoot","calleeName","getNameForExpression","parserOptions","allowReturnOutsideFunction","error","threw","module","exports"],"sources":["/Users/ritasabri/Desktop/PENN/interpretme_v2/node_modules/webpack/lib/javascript/JavascriptParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { Parser: AcornParser } = require(\"acorn\");\nconst { importAssertions } = require(\"acorn-import-assertions\");\nconst { SyncBailHook, HookMap } = require(\"tapable\");\nconst vm = require(\"vm\");\nconst Parser = require(\"../Parser\");\nconst StackedMap = require(\"../util/StackedMap\");\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nconst memoize = require(\"../util/memoize\");\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpressionNode */\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpressionNode */\n/** @typedef {import(\"estree\").BlockStatement} BlockStatementNode */\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpressionNode */\n/** @typedef {import(\"estree\").CallExpression} CallExpressionNode */\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclarationNode */\n/** @typedef {import(\"estree\").ClassExpression} ClassExpressionNode */\n/** @typedef {import(\"estree\").Comment} CommentNode */\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpressionNode */\n/** @typedef {import(\"estree\").Declaration} DeclarationNode */\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifierNode */\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinitionNode */\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n/** @typedef {import(\"estree\").Identifier} IdentifierNode */\n/** @typedef {import(\"estree\").IfStatement} IfStatementNode */\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatementNode */\n/** @typedef {import(\"estree\").Literal} LiteralNode */\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpressionNode */\n/** @typedef {import(\"estree\").ChainExpression} ChainExpressionNode */\n/** @typedef {import(\"estree\").MemberExpression} MemberExpressionNode */\n/** @typedef {import(\"estree\").MetaProperty} MetaPropertyNode */\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinitionNode */\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclarationNode */\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n/** @typedef {import(\"estree\").Node} AnyNode */\n/** @typedef {import(\"estree\").Program} ProgramNode */\n/** @typedef {import(\"estree\").Statement} StatementNode */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclarationNode */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclarationNode */\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclarationNode */\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclarationNode */\n/** @typedef {import(\"estree\").Super} SuperNode */\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpressionNode */\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteralNode */\n/** @typedef {import(\"estree\").ThisExpression} ThisExpressionNode */\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpressionNode */\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclaratorNode */\n/** @template T @typedef {import(\"tapable\").AsArray<T>} AsArray<T> */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[], getMembersOptionals: () => boolean[] }} GetInfoResult */\n\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11;\n\n// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\n\nclass VariableInfo {\n\t/**\n\t * @param {ScopeInfo} declaredScope scope in which the variable is declared\n\t * @param {string | true} freeName which free name the variable aliases, or true when none\n\t * @param {TagInfo | undefined} tagInfo info about tags\n\t */\n\tconstructor(declaredScope, freeName, tagInfo) {\n\t\tthis.declaredScope = declaredScope;\n\t\tthis.freeName = freeName;\n\t\tthis.tagInfo = tagInfo;\n\t}\n}\n\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n/** @typedef {LiteralNode | string | null | undefined} ImportSource */\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean} inShorthand\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n * @property {boolean} inTry\n */\n\nconst joinRanges = (startRange, endRange) => {\n\tif (!endRange) return startRange;\n\tif (!startRange) return endRange;\n\treturn [startRange[0], endRange[1]];\n};\n\nconst objectAndMembersToName = (object, membersReversed) => {\n\tlet name = object;\n\tfor (let i = membersReversed.length - 1; i >= 0; i--) {\n\t\tname = name + \".\" + membersReversed[i];\n\t}\n\treturn name;\n};\n\nconst getRootName = expression => {\n\tswitch (expression.type) {\n\t\tcase \"Identifier\":\n\t\t\treturn expression.name;\n\t\tcase \"ThisExpression\":\n\t\t\treturn \"this\";\n\t\tcase \"MetaProperty\":\n\t\t\treturn `${expression.meta.name}.${expression.property.name}`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\n/** @type {AcornOptions} */\nconst defaultParserOptions = {\n\tranges: true,\n\tlocations: true,\n\tecmaVersion: \"latest\",\n\tsourceType: \"module\",\n\t// https://github.com/tc39/proposal-hashbang\n\tallowHashBang: true,\n\tonComment: null\n};\n\n// regexp to match at least one \"magic comment\"\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\n\nconst EMPTY_COMMENT_OPTIONS = {\n\toptions: null,\n\terrors: null\n};\n\nclass JavascriptParser extends Parser {\n\t/**\n\t * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n\t */\n\tconstructor(sourceType = \"auto\") {\n\t\tsuper();\n\t\tthis.hooks = Object.freeze({\n\t\t\t/** @type {HookMap<SyncBailHook<[UnaryExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode | MetaPropertyNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateDefinedIdentifier: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[NewExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateNewExpression: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateCallExpression: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpressionNode, BasicEvaluatedExpression | undefined], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateCallExpressionMember: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"param\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode | DeclarationNode | PrivateIdentifierNode, number], boolean | void>>} */\n\t\t\tisPure: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tpreStatement: new SyncBailHook([\"statement\"]),\n\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tblockPreStatement: new SyncBailHook([\"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tstatement: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[IfStatementNode], boolean | void>} */\n\t\t\tstatementIf: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassExtendsExpression: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode, MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassBodyValue: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"element\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {HookMap<SyncBailHook<[LabeledStatementNode], boolean | void>>} */\n\t\t\tlabel: new HookMap(() => new SyncBailHook([\"statement\"])),\n\t\t\t/** @type {SyncBailHook<[ImportDeclarationNode, ImportSource], boolean | void>} */\n\t\t\timport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ImportDeclarationNode, ImportSource, string, string], boolean | void>} */\n\t\t\timportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"identifierName\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode], boolean | void>} */\n\t\t\texport: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource], boolean | void>} */\n\t\t\texportImport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, DeclarationNode], boolean | void>} */\n\t\t\texportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclarationNode, DeclarationNode], boolean | void>} */\n\t\t\texportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, string, string, number | undefined], boolean | void>} */\n\t\t\texportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource, string, string, number | undefined], boolean | void>} */\n\t\t\texportImportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n\t\t\tpreDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n\t\t\tdeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode], boolean | void>>} */\n\t\t\tpattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\tcanRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\trename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression], boolean | void>>} */\n\t\t\tassign: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression, string[]], boolean | void>>} */\n\t\t\tassignMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\ttypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\timportCall: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\ttopLevelAwait: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\tcall: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** Something like \"a.b()\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpressionNode, string[], boolean[]], boolean | void>>} */\n\t\t\tcallMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\"])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n\t\t\tmemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"callExpression\",\n\t\t\t\t\t\t\"members\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d()\"\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n\t\t\tcallMemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"innerCallExpression\",\n\t\t\t\t\t\t\"members\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ChainExpressionNode], boolean | void>} */\n\t\t\toptionalChaining: new SyncBailHook([\"optionalChaining\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[NewExpressionNode], boolean | void>>} */\n\t\t\tnew: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {SyncBailHook<[BinaryExpressionNode], boolean | void>} */\n\t\t\tbinaryExpression: new SyncBailHook([\"binaryExpression\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\texpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[], boolean[]], boolean | void>>} */\n\t\t\texpressionMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\", \"membersOptionals\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n\t\t\tunhandledExpressionMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\texpressionConditionalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\texpressionLogicalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n\t\t\tprogram: new SyncBailHook([\"ast\", \"comments\"]),\n\t\t\t/** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n\t\t\tfinish: new SyncBailHook([\"ast\", \"comments\"])\n\t\t});\n\t\tthis.sourceType = sourceType;\n\t\t/** @type {ScopeInfo} */\n\t\tthis.scope = undefined;\n\t\t/** @type {ParserState} */\n\t\tthis.state = undefined;\n\t\tthis.comments = undefined;\n\t\tthis.semicolons = undefined;\n\t\t/** @type {(StatementNode|ExpressionNode)[]} */\n\t\tthis.statementPath = undefined;\n\t\tthis.prevStatement = undefined;\n\t\tthis.currentTagData = undefined;\n\t\tthis._initializeEvaluating();\n\t}\n\n\t_initializeEvaluating() {\n\t\tthis.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {LiteralNode} */ (_expr);\n\n\t\t\tswitch (typeof expr.value) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t\tif (expr.value === null) {\n\t\t\t\treturn new BasicEvaluatedExpression().setNull().setRange(expr.range);\n\t\t\t}\n\t\t\tif (expr.value instanceof RegExp) {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(expr.value)\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\n\t\t\tconst callee = expr.callee;\n\t\t\tif (callee.type !== \"Identifier\") return;\n\t\t\tif (callee.name !== \"RegExp\") {\n\t\t\t\treturn this.callHooksForName(\n\t\t\t\t\tthis.hooks.evaluateNewExpression,\n\t\t\t\t\tcallee.name,\n\t\t\t\t\texpr\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\texpr.arguments.length > 2 ||\n\t\t\t\tthis.getVariableInfo(\"RegExp\") !== \"RegExp\"\n\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tlet regExp, flags;\n\t\t\tconst arg1 = expr.arguments[0];\n\n\t\t\tif (arg1) {\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedRegExp = this.evaluateExpression(arg1);\n\n\t\t\t\tif (!evaluatedRegExp) return;\n\n\t\t\t\tregExp = evaluatedRegExp.asString();\n\n\t\t\t\tif (!regExp) return;\n\t\t\t} else {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(new RegExp(\"\"))\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\n\t\t\tconst arg2 = expr.arguments[1];\n\n\t\t\tif (arg2) {\n\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedFlags = this.evaluateExpression(arg2);\n\n\t\t\t\tif (!evaluatedFlags) return;\n\n\t\t\t\tif (!evaluatedFlags.isUndefined()) {\n\t\t\t\t\tflags = evaluatedFlags.asString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tflags === undefined ||\n\t\t\t\t\t\t!BasicEvaluatedExpression.isValidRegExpFlags(flags)\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp))\n\t\t\t\t.setRange(expr.range);\n\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"LogicalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {LogicalExpressionNode} */ (_expr);\n\n\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\tlet returnRight = false;\n\t\t\t\t/** @type {boolean|undefined} */\n\t\t\t\tlet allowedRight;\n\t\t\t\tif (expr.operator === \"&&\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === false) return left.setRange(expr.range);\n\t\t\t\t\treturnRight = leftAsBool === true;\n\t\t\t\t\tallowedRight = false;\n\t\t\t\t} else if (expr.operator === \"||\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === true) return left.setRange(expr.range);\n\t\t\t\t\treturnRight = leftAsBool === false;\n\t\t\t\t\tallowedRight = true;\n\t\t\t\t} else if (expr.operator === \"??\") {\n\t\t\t\t\tconst leftAsNullish = left.asNullish();\n\t\t\t\t\tif (leftAsNullish === false) return left.setRange(expr.range);\n\t\t\t\t\tif (leftAsNullish !== true) return;\n\t\t\t\t\treturnRight = true;\n\t\t\t\t} else return;\n\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\tif (returnRight) {\n\t\t\t\t\tif (left.couldHaveSideEffects()) right.setSideEffects();\n\t\t\t\t\treturn right.setRange(expr.range);\n\t\t\t\t}\n\n\t\t\t\tconst asBool = right.asBool();\n\n\t\t\t\tif (allowedRight === true && asBool === true) {\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setRange(expr.range)\n\t\t\t\t\t\t.setTruthy();\n\t\t\t\t} else if (allowedRight === false && asBool === false) {\n\t\t\t\t\treturn new BasicEvaluatedExpression().setRange(expr.range).setFalsy();\n\t\t\t\t}\n\t\t\t});\n\n\t\tconst valueAsExpression = (value, expr, sideEffects) => {\n\t\t\tswitch (typeof value) {\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"BinaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {BinaryExpressionNode} */ (_expr);\n\n\t\t\t\tconst handleConstOperation = fn => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst result = fn(\n\t\t\t\t\t\tleft.asCompileTimeValue(),\n\t\t\t\t\t\tright.asCompileTimeValue()\n\t\t\t\t\t);\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst isAlwaysDifferent = (a, b) =>\n\t\t\t\t\t(a === true && b === false) || (a === false && b === true);\n\n\t\t\t\tconst handleTemplateStringCompare = (left, right, res, eql) => {\n\t\t\t\t\tconst getPrefix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (const p of parts) {\n\t\t\t\t\t\t\tconst v = p.asString();\n\t\t\t\t\t\t\tif (v !== undefined) value += v;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\tconst getSuffix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tconst v = parts[i].asString();\n\t\t\t\t\t\t\tif (v !== undefined) value = v + value;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\tconst leftPrefix = getPrefix(left.parts);\n\t\t\t\t\tconst rightPrefix = getPrefix(right.parts);\n\t\t\t\t\tconst leftSuffix = getSuffix(left.parts);\n\t\t\t\t\tconst rightSuffix = getSuffix(right.parts);\n\t\t\t\t\tconst lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n\t\t\t\t\tconst lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n\t\t\t\t\tif (\n\t\t\t\t\t\tleftPrefix.slice(0, lenPrefix) !==\n\t\t\t\t\t\t\trightPrefix.slice(0, lenPrefix) ||\n\t\t\t\t\t\tleftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst handleStrictEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(expr.range);\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() === right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst leftPrimitive = left.isPrimitiveType();\n\t\t\t\t\tconst rightPrimitive = right.isPrimitiveType();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// Primitive !== Object or\n\t\t\t\t\t\t// compile-time object types are never equal to something at runtime\n\t\t\t\t\t\t(leftPrimitive === false &&\n\t\t\t\t\t\t\t(leftConst || rightPrimitive === true)) ||\n\t\t\t\t\t\t(rightPrimitive === false &&\n\t\t\t\t\t\t\t(rightConst || leftPrimitive === true)) ||\n\t\t\t\t\t\t// Different nullish or boolish status also means not equal\n\t\t\t\t\t\tisAlwaysDifferent(left.asBool(), right.asBool()) ||\n\t\t\t\t\t\tisAlwaysDifferent(left.asNullish(), right.asNullish())\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst handleAbstractEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(expr.range);\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() == right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"+\") {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tif (left.isString()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(left.string + right.string);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setString(left.string + right.number);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tright.isWrapped() &&\n\t\t\t\t\t\t\tright.prefix &&\n\t\t\t\t\t\t\tright.prefix.isString()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// \"left\" + (\"prefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"leftPrefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.string + right.prefix.string)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.range, right.prefix.range)),\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// \"left\" + ([null] + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"left\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// \"left\" + expr\n\t\t\t\t\t\t\t// => (\"left\" + expr + \"\")\n\t\t\t\t\t\t\tres.setWrapped(left, null, [right]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isNumber()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(left.number + right.string);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setNumber(left.number + right.number);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isBigInt()) {\n\t\t\t\t\t\tif (right.isBigInt()) {\n\t\t\t\t\t\t\tres.setBigInt(left.bigint + right.bigint);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isWrapped()) {\n\t\t\t\t\t\tif (left.postfix && left.postfix.isString() && right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfixRight\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.postfix.string + right.string)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.postfix.range, right.range)),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tleft.postfix &&\n\t\t\t\t\t\t\tleft.postfix.isString() &&\n\t\t\t\t\t\t\tright.isNumber()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfix123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.postfix.string + right.number)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.postfix.range, right.range)),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(right.number + \"\")\n\t\t\t\t\t\t\t\t\t.setRange(right.range),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t\t.concat(left.postfix ? [left.postfix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.prefix ? [right.prefix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.wrappedInnerExpressions)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + postfix) + expr\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + postfix + expr + [null])\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions.concat(\n\t\t\t\t\t\t\t\t\t\tleft.postfix ? [left.postfix, right] : [right]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\t// left + \"right\"\n\t\t\t\t\t\t\t// => ([null] + left + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(null, right, [left]);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// left + (prefix + inner + \"postfix\")\n\t\t\t\t\t\t\t// => ([null] + left + prefix + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\t(right.prefix ? [left, right.prefix] : [left]).concat(\n\t\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (left.couldHaveSideEffects() || right.couldHaveSideEffects())\n\t\t\t\t\t\tres.setSideEffects();\n\t\t\t\t\tres.setRange(expr.range);\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l - r);\n\t\t\t\t} else if (expr.operator === \"*\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l * r);\n\t\t\t\t} else if (expr.operator === \"/\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l / r);\n\t\t\t\t} else if (expr.operator === \"**\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ** r);\n\t\t\t\t} else if (expr.operator === \"===\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"==\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"!==\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"!=\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"&\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l & r);\n\t\t\t\t} else if (expr.operator === \"|\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l | r);\n\t\t\t\t} else if (expr.operator === \"^\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ^ r);\n\t\t\t\t} else if (expr.operator === \">>>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >>> r);\n\t\t\t\t} else if (expr.operator === \">>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >> r);\n\t\t\t\t} else if (expr.operator === \"<<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l << r);\n\t\t\t\t} else if (expr.operator === \"<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l < r);\n\t\t\t\t} else if (expr.operator === \">\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l > r);\n\t\t\t\t} else if (expr.operator === \"<=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l <= r);\n\t\t\t\t} else if (expr.operator === \">=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >= r);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"UnaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {UnaryExpressionNode} */ (_expr);\n\n\t\t\t\tconst handleConstOperation = fn => {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (!argument.isCompileTimeValue()) return;\n\t\t\t\t\tconst result = fn(argument.asCompileTimeValue());\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\targument.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"typeof\") {\n\t\t\t\t\tswitch (expr.argument.type) {\n\t\t\t\t\t\tcase \"Identifier\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.name,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MetaProperty\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\tgetRootName(expr.argument),\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MemberExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"ChainExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.expression,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FunctionExpression\": {\n\t\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t.setString(\"function\")\n\t\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst arg = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (arg.isUnknown()) return;\n\t\t\t\t\tif (arg.isString()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isWrapped()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setSideEffects()\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isUndefined()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"undefined\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isNumber()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"number\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBigInt()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"bigint\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBoolean()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"boolean\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isArray()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setSideEffects(arg.couldHaveSideEffects())\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t} else if (expr.operator === \"!\") {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tconst bool = argument.asBool();\n\t\t\t\t\tif (typeof bool !== \"boolean\") return;\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(!bool)\n\t\t\t\t\t\t.setSideEffects(argument.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else if (expr.operator === \"~\") {\n\t\t\t\t\treturn handleConstOperation(v => ~v);\n\t\t\t\t} else if (expr.operator === \"+\") {\n\t\t\t\t\treturn handleConstOperation(v => +v);\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation(v => -v);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setString(\"undefined\")\n\t\t\t\t.setRange(expr.range);\n\t\t});\n\t\tthis.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n\t\t\tif (/** @type {IdentifierNode} */ (expr).name === \"undefined\") {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setUndefined()\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t * @param {string} exprType expression type name\n\t\t * @param {function(ExpressionNode): GetInfoResult | undefined} getInfo get info\n\t\t * @returns {void}\n\t\t */\n\t\tconst tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n\t\t\t/** @type {ExpressionNode | undefined} */\n\t\t\tlet cachedExpression = undefined;\n\t\t\t/** @type {GetInfoResult | undefined} */\n\t\t\tlet cachedInfo = undefined;\n\t\t\tthis.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n\t\t\t\tconst expression = /** @type {MemberExpressionNode} */ (expr);\n\n\t\t\t\tconst info = getInfo(expr);\n\t\t\t\tif (info !== undefined) {\n\t\t\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\t\t\tinfo.name,\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tcachedExpression = expression;\n\t\t\t\t\t\t\tcachedInfo = info;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tconst hook = this.hooks.evaluateDefinedIdentifier.get(name);\n\t\t\t\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\t\t\t\treturn hook.call(expression);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.hooks.evaluate\n\t\t\t\t.for(exprType)\n\t\t\t\t.tap({ name: \"JavascriptParser\", stage: 100 }, expr => {\n\t\t\t\t\tconst info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n\t\t\t\t\tif (info !== undefined) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setIdentifier(\n\t\t\t\t\t\t\t\tinfo.name,\n\t\t\t\t\t\t\t\tinfo.rootInfo,\n\t\t\t\t\t\t\t\tinfo.getMembers,\n\t\t\t\t\t\t\t\tinfo.getMembersOptionals\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tthis.hooks.finish.tap(\"JavascriptParser\", () => {\n\t\t\t\t// Cleanup for GC\n\t\t\t\tcachedExpression = cachedInfo = undefined;\n\t\t\t});\n\t\t};\n\t\ttapEvaluateWithVariableInfo(\"Identifier\", expr => {\n\t\t\tconst info = this.getVariableInfo(\n\t\t\t\t/** @type {IdentifierNode} */ (expr).name\n\t\t\t);\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tname: info,\n\t\t\t\t\trootInfo: info,\n\t\t\t\t\tgetMembers: () => [],\n\t\t\t\t\tgetMembersOptionals: () => []\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n\t\t\tconst info = this.getVariableInfo(\"this\");\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tname: info,\n\t\t\t\t\trootInfo: info,\n\t\t\t\t\tgetMembers: () => [],\n\t\t\t\t\tgetMembersOptionals: () => []\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n\t\t\tconst metaProperty = /** @type {MetaPropertyNode} */ (expr);\n\n\t\t\treturn this.callHooksForName(\n\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\tgetRootName(expr),\n\t\t\t\tmetaProperty\n\t\t\t);\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"MemberExpression\", expr =>\n\t\t\tthis.getMemberExpressionInfo(\n\t\t\t\t/** @type {MemberExpressionNode} */ (expr),\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t)\n\t\t);\n\n\t\tthis.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {CallExpressionNode} */ (_expr);\n\t\t\tif (\n\t\t\t\texpr.callee.type === \"MemberExpression\" &&\n\t\t\t\texpr.callee.property.type ===\n\t\t\t\t\t(expr.callee.computed ? \"Literal\" : \"Identifier\")\n\t\t\t) {\n\t\t\t\t// type Super also possible here\n\t\t\t\tconst param = this.evaluateExpression(\n\t\t\t\t\t/** @type {ExpressionNode} */ (expr.callee.object)\n\t\t\t\t);\n\t\t\t\tconst property =\n\t\t\t\t\texpr.callee.property.type === \"Literal\"\n\t\t\t\t\t\t? `${expr.callee.property.value}`\n\t\t\t\t\t\t: expr.callee.property.name;\n\t\t\t\tconst hook = this.hooks.evaluateCallExpressionMember.get(property);\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\treturn hook.call(expr, param);\n\t\t\t\t}\n\t\t\t} else if (expr.callee.type === \"Identifier\") {\n\t\t\t\treturn this.callHooksForName(\n\t\t\t\t\tthis.hooks.evaluateCallExpression,\n\t\t\t\t\texpr.callee.name,\n\t\t\t\t\texpr\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"indexOf\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length === 0) return;\n\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\t\t\t\tconst arg1Eval = this.evaluateExpression(arg1);\n\t\t\t\tif (!arg1Eval.isString()) return;\n\t\t\t\tconst arg1Value = arg1Eval.string;\n\n\t\t\t\tlet result;\n\t\t\t\tif (arg2) {\n\t\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\t\t\t\t\tconst arg2Eval = this.evaluateExpression(arg2);\n\t\t\t\t\tif (!arg2Eval.isNumber()) return;\n\t\t\t\t\tresult = param.string.indexOf(arg1Value, arg2Eval.number);\n\t\t\t\t} else {\n\t\t\t\t\tresult = param.string.indexOf(arg1Value);\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setNumber(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"replace\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 2) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\tlet arg1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tlet arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\tif (!arg1.isString() && !arg1.isRegExp()) return;\n\t\t\t\tconst arg1Value = arg1.regExp || arg1.string;\n\t\t\t\tif (!arg2.isString()) return;\n\t\t\t\tconst arg2Value = arg2.string;\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(param.string.replace(arg1Value, arg2Value))\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\t[\"substr\", \"substring\", \"slice\"].forEach(fn => {\n\t\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t\t.for(fn)\n\t\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\t\tif (!param.isString()) return;\n\t\t\t\t\tlet arg1;\n\t\t\t\t\tlet result,\n\t\t\t\t\t\tstr = param.string;\n\t\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[fn](arg1.number);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: {\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tconst arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tif (!arg2.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[fn](arg1.number, arg2.number);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(result)\n\t\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {\"cooked\" | \"raw\"} kind kind of values to get\n\t\t * @param {TemplateLiteralNode} templateLiteralExpr TemplateLiteral expr\n\t\t * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n\t\t */\n\t\tconst getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst quasis = [];\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst parts = [];\n\n\t\t\tfor (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n\t\t\t\tconst quasiExpr = templateLiteralExpr.quasis[i];\n\t\t\t\tconst quasi = quasiExpr.value[kind];\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tconst prevExpr = parts[parts.length - 1];\n\t\t\t\t\tconst expr = this.evaluateExpression(\n\t\t\t\t\t\ttemplateLiteralExpr.expressions[i - 1]\n\t\t\t\t\t);\n\t\t\t\t\tconst exprAsString = expr.asString();\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof exprAsString === \"string\" &&\n\t\t\t\t\t\t!expr.couldHaveSideEffects()\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We can merge quasi + expr + quasi when expr\n\t\t\t\t\t\t// is a const string\n\n\t\t\t\t\t\tprevExpr.setString(prevExpr.string + exprAsString + quasi);\n\t\t\t\t\t\tprevExpr.setRange([prevExpr.range[0], quasiExpr.range[1]]);\n\t\t\t\t\t\t// We unset the expression as it doesn't match to a single expression\n\t\t\t\t\t\tprevExpr.setExpression(undefined);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tparts.push(expr);\n\t\t\t\t}\n\n\t\t\t\tconst part = new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(quasi)\n\t\t\t\t\t.setRange(quasiExpr.range)\n\t\t\t\t\t.setExpression(quasiExpr);\n\t\t\t\tquasis.push(part);\n\t\t\t\tparts.push(part);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tquasis,\n\t\t\t\tparts\n\t\t\t};\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TemplateLiteral\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TemplateLiteralNode} */ (_node);\n\n\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\"cooked\", node);\n\t\t\t\tif (parts.length === 1) {\n\t\t\t\t\treturn parts[0].setRange(node.range);\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setTemplateString(quasis, parts, \"cooked\")\n\t\t\t\t\t.setRange(node.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TaggedTemplateExpression\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TaggedTemplateExpressionNode} */ (_node);\n\t\t\t\tconst tag = this.evaluateExpression(node.tag);\n\n\t\t\t\tif (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n\t\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\n\t\t\t\t\t\t\"raw\",\n\t\t\t\t\t\tnode.quasi\n\t\t\t\t\t);\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setTemplateString(quasis, parts, \"raw\")\n\t\t\t\t\t\t.setRange(node.range);\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"concat\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString() && !param.isWrapped()) return;\n\n\t\t\t\tlet stringSuffix = null;\n\t\t\t\tlet hasUnknownParams = false;\n\t\t\t\tconst innerExpressions = [];\n\t\t\t\tfor (let i = expr.arguments.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst arg = expr.arguments[i];\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return;\n\t\t\t\t\tconst argExpr = this.evaluateExpression(arg);\n\t\t\t\t\tif (\n\t\t\t\t\t\thasUnknownParams ||\n\t\t\t\t\t\t(!argExpr.isString() && !argExpr.isNumber())\n\t\t\t\t\t) {\n\t\t\t\t\t\thasUnknownParams = true;\n\t\t\t\t\t\tinnerExpressions.push(argExpr);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = argExpr.isString()\n\t\t\t\t\t\t? argExpr.string\n\t\t\t\t\t\t: \"\" + argExpr.number;\n\n\t\t\t\t\tconst newString = value + (stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\tconst newRange = [\n\t\t\t\t\t\targExpr.range[0],\n\t\t\t\t\t\t(stringSuffix || argExpr).range[1]\n\t\t\t\t\t];\n\t\t\t\t\tstringSuffix = new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\targExpr.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(newRange);\n\t\t\t\t}\n\n\t\t\t\tif (hasUnknownParams) {\n\t\t\t\t\tconst prefix = param.isString() ? param : param.prefix;\n\t\t\t\t\tconst inner =\n\t\t\t\t\t\tparam.isWrapped() && param.wrappedInnerExpressions\n\t\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(prefix, stringSuffix, inner)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else if (param.isWrapped()) {\n\t\t\t\t\tconst postfix = stringSuffix || param.postfix;\n\t\t\t\t\tconst inner = param.wrappedInnerExpressions\n\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(param.prefix, postfix, inner)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else {\n\t\t\t\t\tconst newString =\n\t\t\t\t\t\tparam.string + (stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\tparam.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"split\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 1) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tlet result;\n\t\t\t\tconst arg = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tif (arg.isString()) {\n\t\t\t\t\tresult = param.string.split(arg.string);\n\t\t\t\t} else if (arg.isRegExp()) {\n\t\t\t\t\tresult = param.string.split(arg.regExp);\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setArray(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ConditionalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ConditionalExpressionNode} */ (_expr);\n\n\t\t\t\tconst condition = this.evaluateExpression(expr.test);\n\t\t\t\tconst conditionValue = condition.asBool();\n\t\t\t\tlet res;\n\t\t\t\tif (conditionValue === undefined) {\n\t\t\t\t\tconst consequent = this.evaluateExpression(expr.consequent);\n\t\t\t\t\tconst alternate = this.evaluateExpression(expr.alternate);\n\t\t\t\t\tres = new BasicEvaluatedExpression();\n\t\t\t\t\tif (consequent.isConditional()) {\n\t\t\t\t\t\tres.setOptions(consequent.options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.setOptions([consequent]);\n\t\t\t\t\t}\n\t\t\t\t\tif (alternate.isConditional()) {\n\t\t\t\t\t\tres.addOptions(alternate.options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.addOptions([alternate]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres = this.evaluateExpression(\n\t\t\t\t\t\tconditionValue ? expr.consequent : expr.alternate\n\t\t\t\t\t);\n\t\t\t\t\tif (condition.couldHaveSideEffects()) res.setSideEffects();\n\t\t\t\t}\n\t\t\t\tres.setRange(expr.range);\n\t\t\t\treturn res;\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ArrayExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ArrayExpressionNode} */ (_expr);\n\n\t\t\t\tconst items = expr.elements.map(element => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\telement !== null &&\n\t\t\t\t\t\telement.type !== \"SpreadElement\" &&\n\t\t\t\t\t\tthis.evaluateExpression(element)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tif (!items.every(Boolean)) return;\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setItems(items)\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ChainExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ChainExpressionNode} */ (_expr);\n\t\t\t\t/** @type {ExpressionNode[]} */\n\t\t\t\tconst optionalExpressionsStack = [];\n\t\t\t\t/** @type {ExpressionNode|SuperNode} */\n\t\t\t\tlet next = expr.expression;\n\n\t\t\t\twhile (\n\t\t\t\t\tnext.type === \"MemberExpression\" ||\n\t\t\t\t\tnext.type === \"CallExpression\"\n\t\t\t\t) {\n\t\t\t\t\tif (next.type === \"MemberExpression\") {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.object)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.object;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.callee)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.callee;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twhile (optionalExpressionsStack.length > 0) {\n\t\t\t\t\tconst expression = optionalExpressionsStack.pop();\n\t\t\t\t\tconst evaluated = this.evaluateExpression(expression);\n\n\t\t\t\t\tif (evaluated.asNullish()) {\n\t\t\t\t\t\treturn evaluated.setRange(_expr.range);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.evaluateExpression(expr.expression);\n\t\t\t});\n\t}\n\n\tgetRenameIdentifier(expr) {\n\t\tconst result = this.evaluateExpression(expr);\n\t\tif (result.isIdentifier()) {\n\t\t\treturn result.identifier;\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassExpressionNode | ClassDeclarationNode} classy a class node\n\t * @returns {void}\n\t */\n\twalkClass(classy) {\n\t\tif (classy.superClass) {\n\t\t\tif (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n\t\t\t\tthis.walkExpression(classy.superClass);\n\t\t\t}\n\t\t}\n\t\tif (classy.body && classy.body.type === \"ClassBody\") {\n\t\t\tfor (const classElement of /** @type {TODO} */ (classy.body.body)) {\n\t\t\t\tif (!this.hooks.classBodyElement.call(classElement, classy)) {\n\t\t\t\t\tif (classElement.computed && classElement.key) {\n\t\t\t\t\t\tthis.walkExpression(classElement.key);\n\t\t\t\t\t}\n\t\t\t\t\tif (classElement.value) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!this.hooks.classBodyValue.call(\n\t\t\t\t\t\t\t\tclassElement.value,\n\t\t\t\t\t\t\t\tclassElement,\n\t\t\t\t\t\t\t\tclassy\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\t\t\t\t\t\tthis.scope.topLevelScope = false;\n\t\t\t\t\t\t\tthis.walkExpression(classElement.value);\n\t\t\t\t\t\t\tthis.scope.topLevelScope = wasTopLevel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (classElement.type === \"StaticBlock\") {\n\t\t\t\t\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\t\t\t\t\tthis.scope.topLevelScope = false;\n\t\t\t\t\t\tthis.walkBlockStatement(classElement);\n\t\t\t\t\t\tthis.scope.topLevelScope = wasTopLevel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Pre walking iterates the scope for variable declarations\n\tpreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.preWalkStatement(statement);\n\t\t}\n\t}\n\n\t// Block pre walking iterates the scope for block variable declarations\n\tblockPreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.blockPreWalkStatement(statement);\n\t\t}\n\t}\n\n\t// Walking iterates the statements and expressions and processes them\n\twalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.walkStatement(statement);\n\t\t}\n\t}\n\n\tpreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.preStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.preWalkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.preWalkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.preWalkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.preWalkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.preWalkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.preWalkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.preWalkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.preWalkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.preWalkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.preWalkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.preWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.preWalkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.preWalkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\tblockPreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.blockPreStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"ImportDeclaration\":\n\t\t\t\tthis.blockPreWalkImportDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportAllDeclaration\":\n\t\t\t\tthis.blockPreWalkExportAllDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.blockPreWalkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.blockPreWalkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.blockPreWalkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\twalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.statement.call(statement) !== undefined) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.walkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.walkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.walkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.walkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.walkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.walkExpressionStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.walkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.walkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.walkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.walkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.walkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.walkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.walkReturnStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.walkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ThrowStatement\":\n\t\t\t\tthis.walkThrowStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.walkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.walkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.walkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.walkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\t/**\n\t * Walks a statements that is nested within a parent statement\n\t * and can potentially be a non-block statement.\n\t * This enforces the nested statement to never be in ASI position.\n\t * @param {StatementNode} statement the nested statement\n\t * @returns {void}\n\t */\n\twalkNestedStatement(statement) {\n\t\tthis.prevStatement = undefined;\n\t\tthis.walkStatement(statement);\n\t}\n\n\t// Real Statements\n\tpreWalkBlockStatement(statement) {\n\t\tthis.preWalkStatements(statement.body);\n\t}\n\n\twalkBlockStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst body = statement.body;\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatements(body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatements(body);\n\t\t});\n\t}\n\n\twalkExpressionStatement(statement) {\n\t\tthis.walkExpression(statement.expression);\n\t}\n\n\tpreWalkIfStatement(statement) {\n\t\tthis.preWalkStatement(statement.consequent);\n\t\tif (statement.alternate) {\n\t\t\tthis.preWalkStatement(statement.alternate);\n\t\t}\n\t}\n\n\twalkIfStatement(statement) {\n\t\tconst result = this.hooks.statementIf.call(statement);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(statement.test);\n\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\tif (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\t} else if (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\tpreWalkLabeledStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkLabeledStatement(statement) {\n\t\tconst hook = this.hooks.label.get(statement.label.name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(statement);\n\t\t\tif (result === true) return;\n\t\t}\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkWithStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkWithStatement(statement) {\n\t\tthis.walkExpression(statement.object);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkSwitchStatement(statement) {\n\t\tthis.preWalkSwitchCases(statement.cases);\n\t}\n\n\twalkSwitchStatement(statement) {\n\t\tthis.walkExpression(statement.discriminant);\n\t\tthis.walkSwitchCases(statement.cases);\n\t}\n\n\twalkTerminatingStatement(statement) {\n\t\tif (statement.argument) this.walkExpression(statement.argument);\n\t}\n\n\twalkReturnStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\twalkThrowStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\tpreWalkTryStatement(statement) {\n\t\tthis.preWalkStatement(statement.block);\n\t\tif (statement.handler) this.preWalkCatchClause(statement.handler);\n\t\tif (statement.finializer) this.preWalkStatement(statement.finializer);\n\t}\n\n\twalkTryStatement(statement) {\n\t\tif (this.scope.inTry) {\n\t\t\tthis.walkStatement(statement.block);\n\t\t} else {\n\t\t\tthis.scope.inTry = true;\n\t\t\tthis.walkStatement(statement.block);\n\t\t\tthis.scope.inTry = false;\n\t\t}\n\t\tif (statement.handler) this.walkCatchClause(statement.handler);\n\t\tif (statement.finalizer) this.walkStatement(statement.finalizer);\n\t}\n\n\tpreWalkWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkWhileStatement(statement) {\n\t\tthis.walkExpression(statement.test);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkDoWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkDoWhileStatement(statement) {\n\t\tthis.walkNestedStatement(statement.body);\n\t\tthis.walkExpression(statement.test);\n\t}\n\n\tpreWalkForStatement(statement) {\n\t\tif (statement.init) {\n\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\tthis.preWalkStatement(statement.init);\n\t\t\t}\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.init) {\n\t\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.init);\n\t\t\t\t\tthis.prevStatement = undefined;\n\t\t\t\t\tthis.walkStatement(statement.init);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(statement.init);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (statement.test) {\n\t\t\t\tthis.walkExpression(statement.test);\n\t\t\t}\n\t\t\tif (statement.update) {\n\t\t\t\tthis.walkExpression(statement.update);\n\t\t\t}\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkForInStatement(statement) {\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForInStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkForOfStatement(statement) {\n\t\tif (statement.await && this.scope.topLevelScope === true) {\n\t\t\tthis.hooks.topLevelAwait.call(statement);\n\t\t}\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForOfStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Declarations\n\tpreWalkFunctionDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\twalkFunctionDeclaration(statement) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tthis.inFunctionScope(true, statement.params, () => {\n\t\t\tfor (const param of statement.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (statement.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(statement.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(statement.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\tblockPreWalkImportDeclaration(statement) {\n\t\tconst source = statement.source.value;\n\t\tthis.hooks.import.call(statement, source);\n\t\tfor (const specifier of statement.specifiers) {\n\t\t\tconst name = specifier.local.name;\n\t\t\tswitch (specifier.type) {\n\t\t\t\tcase \"ImportDefaultSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(statement, source, \"default\", name)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(\n\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tspecifier.imported.name || specifier.imported.value,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportNamespaceSpecifier\":\n\t\t\t\t\tif (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t}\n\t\t}\n\t}\n\n\tenterDeclaration(declaration, onIdent) {\n\t\tswitch (declaration.type) {\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tfor (const declarator of declaration.declarations) {\n\t\t\t\t\tswitch (declarator.type) {\n\t\t\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\t\t\tthis.enterPattern(declarator.id, onIdent);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tblockPreWalkExportNamedDeclaration(statement) {\n\t\tlet source;\n\t\tif (statement.source) {\n\t\t\tsource = statement.source.value;\n\t\t\tthis.hooks.exportImport.call(statement, source);\n\t\t} else {\n\t\t\tthis.hooks.export.call(statement);\n\t\t}\n\t\tif (statement.declaration) {\n\t\t\tif (\n\t\t\t\t!this.hooks.exportDeclaration.call(statement, statement.declaration)\n\t\t\t) {\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.declaration);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\t\t\tlet index = 0;\n\t\t\t\tthis.enterDeclaration(statement.declaration, def => {\n\t\t\t\t\tthis.hooks.exportSpecifier.call(statement, def, def, index++);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (statement.specifiers) {\n\t\t\tfor (\n\t\t\t\tlet specifierIndex = 0;\n\t\t\t\tspecifierIndex < statement.specifiers.length;\n\t\t\t\tspecifierIndex++\n\t\t\t) {\n\t\t\t\tconst specifier = statement.specifiers[specifierIndex];\n\t\t\t\tswitch (specifier.type) {\n\t\t\t\t\tcase \"ExportSpecifier\": {\n\t\t\t\t\t\tconst name = specifier.exported.name || specifier.exported.value;\n\t\t\t\t\t\tif (source) {\n\t\t\t\t\t\t\tthis.hooks.exportImportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkExportNamedDeclaration(statement) {\n\t\tif (statement.declaration) {\n\t\t\tthis.walkStatement(statement.declaration);\n\t\t}\n\t}\n\n\tblockPreWalkExportDefaultDeclaration(statement) {\n\t\tconst prev = this.prevStatement;\n\t\tthis.preWalkStatement(statement.declaration);\n\t\tthis.prevStatement = prev;\n\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\tif (\n\t\t\tstatement.declaration.id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\tstatement,\n\t\t\t\tstatement.declaration.id.name,\n\t\t\t\t\"default\",\n\t\t\t\tundefined\n\t\t\t);\n\t\t}\n\t}\n\n\twalkExportDefaultDeclaration(statement) {\n\t\tthis.hooks.export.call(statement);\n\t\tif (\n\t\t\tstatement.declaration.id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tif (\n\t\t\t\t!this.hooks.exportDeclaration.call(statement, statement.declaration)\n\t\t\t) {\n\t\t\t\tthis.walkStatement(statement.declaration);\n\t\t\t}\n\t\t} else {\n\t\t\t// Acorn parses `export default function() {}` as `FunctionDeclaration` and\n\t\t\t// `export default class {}` as `ClassDeclaration`, both with `id = null`.\n\t\t\t// These nodes must be treated as expressions.\n\t\t\tif (\n\t\t\t\tstatement.declaration.type === \"FunctionDeclaration\" ||\n\t\t\t\tstatement.declaration.type === \"ClassDeclaration\"\n\t\t\t) {\n\t\t\t\tthis.walkStatement(statement.declaration);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.declaration);\n\t\t\t}\n\t\t\tif (!this.hooks.exportExpression.call(statement, statement.declaration)) {\n\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\tstatement,\n\t\t\t\t\tstatement.declaration,\n\t\t\t\t\t\"default\",\n\t\t\t\t\tundefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tblockPreWalkExportAllDeclaration(statement) {\n\t\tconst source = statement.source.value;\n\t\tconst name = statement.exported ? statement.exported.name : null;\n\t\tthis.hooks.exportImport.call(statement, source);\n\t\tthis.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n\t}\n\n\tpreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind !== \"var\") return;\n\t\tthis._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n\t}\n\n\tblockPreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind === \"var\") return;\n\t\tconst hookMap =\n\t\t\tstatement.kind === \"const\"\n\t\t\t\t? this.hooks.varDeclarationConst\n\t\t\t\t: this.hooks.varDeclarationLet;\n\t\tthis._preWalkVariableDeclaration(statement, hookMap);\n\t}\n\n\t_preWalkVariableDeclaration(statement, hookMap) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tif (!this.hooks.preDeclarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.enterPattern(declarator.id, (name, decl) => {\n\t\t\t\t\t\t\tlet hook = hookMap.get(name);\n\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\thook = this.hooks.varDeclaration.get(name);\n\t\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkVariableDeclaration(statement) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tconst renameIdentifier =\n\t\t\t\t\t\tdeclarator.init && this.getRenameIdentifier(declarator.init);\n\t\t\t\t\tif (renameIdentifier && declarator.id.type === \"Identifier\") {\n\t\t\t\t\t\tconst hook = this.hooks.canRename.get(renameIdentifier);\n\t\t\t\t\t\tif (hook !== undefined && hook.call(declarator.init)) {\n\t\t\t\t\t\t\t// renaming with \"var a = b;\"\n\t\t\t\t\t\t\tconst hook = this.hooks.rename.get(renameIdentifier);\n\t\t\t\t\t\t\tif (hook === undefined || !hook.call(declarator.init)) {\n\t\t\t\t\t\t\t\tthis.setVariable(declarator.id.name, renameIdentifier);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.hooks.declarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.walkPattern(declarator.id);\n\t\t\t\t\t\tif (declarator.init) this.walkExpression(declarator.init);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tblockPreWalkClassDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\twalkClassDeclaration(statement) {\n\t\tthis.walkClass(statement);\n\t}\n\n\tpreWalkSwitchCases(switchCases) {\n\t\tfor (let index = 0, len = switchCases.length; index < len; index++) {\n\t\t\tconst switchCase = switchCases[index];\n\t\t\tthis.preWalkStatements(switchCase.consequent);\n\t\t}\n\t}\n\n\twalkSwitchCases(switchCases) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst len = switchCases.length;\n\n\t\t\t// we need to pre walk all statements first since we can have invalid code\n\t\t\t// import A from \"module\";\n\t\t\t// switch(1) {\n\t\t\t//    case 1:\n\t\t\t//      console.log(A); // should fail at runtime\n\t\t\t//    case 2:\n\t\t\t//      const A = 1;\n\t\t\t// }\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\t\tthis.blockPreWalkStatements(switchCase.consequent);\n\t\t\t\t\tthis.prevStatement = prev;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.test) {\n\t\t\t\t\tthis.walkExpression(switchCase.test);\n\t\t\t\t}\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tthis.walkStatements(switchCase.consequent);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkCatchClause(catchClause) {\n\t\tthis.preWalkStatement(catchClause.body);\n\t}\n\n\twalkCatchClause(catchClause) {\n\t\tthis.inBlockScope(() => {\n\t\t\t// Error binding is optional in catch clause since ECMAScript 2019\n\t\t\tif (catchClause.param !== null) {\n\t\t\t\tthis.enterPattern(catchClause.param, ident => {\n\t\t\t\t\tthis.defineVariable(ident);\n\t\t\t\t});\n\t\t\t\tthis.walkPattern(catchClause.param);\n\t\t\t}\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatement(catchClause.body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatement(catchClause.body);\n\t\t});\n\t}\n\n\twalkPattern(pattern) {\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.walkArrayPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.walkAssignmentPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.walkObjectPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.walkRestElement(pattern);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\twalkAssignmentPattern(pattern) {\n\t\tthis.walkExpression(pattern.right);\n\t\tthis.walkPattern(pattern.left);\n\t}\n\n\twalkObjectPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.properties.length; i < len; i++) {\n\t\t\tconst prop = pattern.properties[i];\n\t\t\tif (prop) {\n\t\t\t\tif (prop.computed) this.walkExpression(prop.key);\n\t\t\t\tif (prop.value) this.walkPattern(prop.value);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkArrayPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.elements.length; i < len; i++) {\n\t\t\tconst element = pattern.elements[i];\n\t\t\tif (element) this.walkPattern(element);\n\t\t}\n\t}\n\n\twalkRestElement(pattern) {\n\t\tthis.walkPattern(pattern.argument);\n\t}\n\n\twalkExpressions(expressions) {\n\t\tfor (const expression of expressions) {\n\t\t\tif (expression) {\n\t\t\t\tthis.walkExpression(expression);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkExpression(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"ArrayExpression\":\n\t\t\t\tthis.walkArrayExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\t\tthis.walkArrowFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.walkAssignmentExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AwaitExpression\":\n\t\t\t\tthis.walkAwaitExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.walkBinaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.walkCallExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ChainExpression\":\n\t\t\t\tthis.walkChainExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassExpression\":\n\t\t\t\tthis.walkClassExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\tthis.walkConditionalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionExpression\":\n\t\t\t\tthis.walkFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.walkIdentifier(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ImportExpression\":\n\t\t\t\tthis.walkImportExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.walkLogicalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MetaProperty\":\n\t\t\t\tthis.walkMetaProperty(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"NewExpression\":\n\t\t\t\tthis.walkNewExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectExpression\":\n\t\t\t\tthis.walkObjectExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\tthis.walkSequenceExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SpreadElement\":\n\t\t\t\tthis.walkSpreadElement(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TaggedTemplateExpression\":\n\t\t\t\tthis.walkTaggedTemplateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TemplateLiteral\":\n\t\t\t\tthis.walkTemplateLiteral(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ThisExpression\":\n\t\t\t\tthis.walkThisExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.walkUnaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.walkUpdateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"YieldExpression\":\n\t\t\t\tthis.walkYieldExpression(expression);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\twalkAwaitExpression(expression) {\n\t\tif (this.scope.topLevelScope === true)\n\t\t\tthis.hooks.topLevelAwait.call(expression);\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkArrayExpression(expression) {\n\t\tif (expression.elements) {\n\t\t\tthis.walkExpressions(expression.elements);\n\t\t}\n\t}\n\n\twalkSpreadElement(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\twalkObjectExpression(expression) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = expression.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = expression.properties[propIndex];\n\t\t\tthis.walkProperty(prop);\n\t\t}\n\t}\n\n\twalkProperty(prop) {\n\t\tif (prop.type === \"SpreadElement\") {\n\t\t\tthis.walkExpression(prop.argument);\n\t\t\treturn;\n\t\t}\n\t\tif (prop.computed) {\n\t\t\tthis.walkExpression(prop.key);\n\t\t}\n\t\tif (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n\t\t\tthis.scope.inShorthand = prop.value.name;\n\t\t\tthis.walkIdentifier(prop.value);\n\t\t\tthis.scope.inShorthand = false;\n\t\t} else {\n\t\t\tthis.walkExpression(prop.value);\n\t\t}\n\t}\n\n\twalkFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tconst scopeParams = expression.params;\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (expression.id) {\n\t\t\tscopeParams.push(expression.id.name);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\twalkArrowFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n\t\tthis.inFunctionScope(false, expression.params, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {SequenceExpressionNode} expression the sequence\n\t */\n\twalkSequenceExpression(expression) {\n\t\tif (!expression.expressions) return;\n\t\t// We treat sequence expressions like statements when they are one statement level\n\t\t// This has some benefits for optimizations that only work on statement level\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (\n\t\t\tcurrentStatement === expression ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expression)\n\t\t) {\n\t\t\tconst old = this.statementPath.pop();\n\t\t\tfor (const expr of expression.expressions) {\n\t\t\t\tthis.statementPath.push(expr);\n\t\t\t\tthis.walkExpression(expr);\n\t\t\t\tthis.statementPath.pop();\n\t\t\t}\n\t\t\tthis.statementPath.push(old);\n\t\t} else {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\twalkUpdateExpression(expression) {\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkUnaryExpression(expression) {\n\t\tif (expression.operator === \"typeof\") {\n\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\tthis.hooks.typeof,\n\t\t\t\texpression.argument,\n\t\t\t\texpression\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tif (expression.argument.type === \"ChainExpression\") {\n\t\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\t\tthis.hooks.typeof,\n\t\t\t\t\texpression.argument.expression,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result === true) return;\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkLeftRightExpression(expression) {\n\t\tthis.walkExpression(expression.left);\n\t\tthis.walkExpression(expression.right);\n\t}\n\n\twalkBinaryExpression(expression) {\n\t\tif (this.hooks.binaryExpression.call(expression) === undefined) {\n\t\t\tthis.walkLeftRightExpression(expression);\n\t\t}\n\t}\n\n\twalkLogicalExpression(expression) {\n\t\tconst result = this.hooks.expressionLogicalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkLeftRightExpression(expression);\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.right);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkAssignmentExpression(expression) {\n\t\tif (expression.left.type === \"Identifier\") {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(expression.right);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\texpression.right\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// renaming \"a = b;\"\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\texpression.right\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.setVariable(\n\t\t\t\t\t\t\texpression.left.name,\n\t\t\t\t\t\t\ttypeof renameIdentifier === \"string\"\n\t\t\t\t\t\t\t\t? this.getVariableInfo(renameIdentifier)\n\t\t\t\t\t\t\t\t: renameIdentifier\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.walkExpression(expression.left);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (expression.left.type.endsWith(\"Pattern\")) {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.walkPattern(expression.left);\n\t\t} else if (expression.left.type === \"MemberExpression\") {\n\t\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\t\texpression.left,\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t);\n\t\t\tif (exprName) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.assignMemberChain,\n\t\t\t\t\t\texprName.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprName.getMembers()\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t} else {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t}\n\t}\n\n\twalkConditionalExpression(expression) {\n\t\tconst result = this.hooks.expressionConditionalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(expression.test);\n\t\t\tthis.walkExpression(expression.consequent);\n\t\t\tif (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.consequent);\n\t\t\t} else if (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkNewExpression(expression) {\n\t\tconst result = this.callHooksForExpression(\n\t\t\tthis.hooks.new,\n\t\t\texpression.callee,\n\t\t\texpression\n\t\t);\n\t\tif (result === true) return;\n\t\tthis.walkExpression(expression.callee);\n\t\tif (expression.arguments) {\n\t\t\tthis.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\twalkYieldExpression(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\twalkTemplateLiteral(expression) {\n\t\tif (expression.expressions) {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\twalkTaggedTemplateExpression(expression) {\n\t\tif (expression.tag) {\n\t\t\tthis.walkExpression(expression.tag);\n\t\t}\n\t\tif (expression.quasi && expression.quasi.expressions) {\n\t\t\tthis.walkExpressions(expression.quasi.expressions);\n\t\t}\n\t}\n\n\twalkClassExpression(expression) {\n\t\tthis.walkClass(expression);\n\t}\n\n\t/**\n\t * @param {ChainExpressionNode} expression expression\n\t */\n\twalkChainExpression(expression) {\n\t\tconst result = this.hooks.optionalChaining.call(expression);\n\n\t\tif (result === undefined) {\n\t\t\tif (expression.expression.type === \"CallExpression\") {\n\t\t\t\tthis.walkCallExpression(expression.expression);\n\t\t\t} else {\n\t\t\t\tthis.walkMemberExpression(expression.expression);\n\t\t\t}\n\t\t}\n\t}\n\n\t_walkIIFE(functionExpression, options, currentThis) {\n\t\tconst getVarInfo = argOrThis => {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(argOrThis);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\targOrThis\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\targOrThis\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn typeof renameIdentifier === \"string\"\n\t\t\t\t\t\t\t? this.getVariableInfo(renameIdentifier)\n\t\t\t\t\t\t\t: renameIdentifier;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(argOrThis);\n\t\t};\n\t\tconst { params, type } = functionExpression;\n\t\tconst arrow = type === \"ArrowFunctionExpression\";\n\t\tconst renameThis = currentThis ? getVarInfo(currentThis) : null;\n\t\tconst varInfoForArgs = options.map(getVarInfo);\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n\t\tconst scopeParams = params.filter(\n\t\t\t(identifier, idx) => !varInfoForArgs[idx]\n\t\t);\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (functionExpression.id) {\n\t\t\tscopeParams.push(functionExpression.id.name);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tif (renameThis && !arrow) {\n\t\t\t\tthis.setVariable(\"this\", renameThis);\n\t\t\t}\n\t\t\tfor (let i = 0; i < varInfoForArgs.length; i++) {\n\t\t\t\tconst varInfo = varInfoForArgs[i];\n\t\t\t\tif (!varInfo) continue;\n\t\t\t\tif (!params[i] || params[i].type !== \"Identifier\") continue;\n\t\t\t\tthis.setVariable(params[i].name, varInfo);\n\t\t\t}\n\t\t\tif (functionExpression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(functionExpression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(functionExpression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(functionExpression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(functionExpression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\twalkImportExpression(expression) {\n\t\tlet result = this.hooks.importCall.call(expression);\n\t\tif (result === true) return;\n\n\t\tthis.walkExpression(expression.source);\n\t}\n\n\twalkCallExpression(expression) {\n\t\tconst isSimpleFunction = fn => {\n\t\t\treturn fn.params.every(p => p.type === \"Identifier\");\n\t\t};\n\t\tif (\n\t\t\texpression.callee.type === \"MemberExpression\" &&\n\t\t\texpression.callee.object.type.endsWith(\"FunctionExpression\") &&\n\t\t\t!expression.callee.computed &&\n\t\t\t(expression.callee.property.name === \"call\" ||\n\t\t\t\texpression.callee.property.name === \"bind\") &&\n\t\t\texpression.arguments.length > 0 &&\n\t\t\tisSimpleFunction(expression.callee.object)\n\t\t) {\n\t\t\t// (function(…) { }.call/bind(?, …))\n\t\t\tthis._walkIIFE(\n\t\t\t\texpression.callee.object,\n\t\t\t\texpression.arguments.slice(1),\n\t\t\t\texpression.arguments[0]\n\t\t\t);\n\t\t} else if (\n\t\t\texpression.callee.type.endsWith(\"FunctionExpression\") &&\n\t\t\tisSimpleFunction(expression.callee)\n\t\t) {\n\t\t\t// (function(…) { }(…))\n\t\t\tthis._walkIIFE(expression.callee, expression.arguments, null);\n\t\t} else {\n\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\t\t\texpression.callee,\n\t\t\t\t\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION\n\t\t\t\t);\n\t\t\t\tif (exprInfo && exprInfo.type === \"call\") {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.callMemberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst callee = this.evaluateExpression(expression.callee);\n\t\t\tif (callee.isIdentifier()) {\n\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.callMemberChain,\n\t\t\t\t\tcallee.rootInfo,\n\t\t\t\t\texpression,\n\t\t\t\t\tcallee.getMembers(),\n\t\t\t\t\tcallee.getMembersOptionals\n\t\t\t\t\t\t? callee.getMembersOptionals()\n\t\t\t\t\t\t: callee.getMembers().map(() => false)\n\t\t\t\t);\n\t\t\t\tif (result1 === true) return;\n\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.call,\n\t\t\t\t\tcallee.identifier,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result2 === true) return;\n\t\t\t}\n\n\t\t\tif (expression.callee) {\n\t\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\t\t// because of call context we need to walk the call context as expression\n\t\t\t\t\tthis.walkExpression(expression.callee.object);\n\t\t\t\t\tif (expression.callee.computed === true)\n\t\t\t\t\t\tthis.walkExpression(expression.callee.property);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(expression.callee);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (expression.arguments) this.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\twalkMemberExpression(expression) {\n\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_ALL\n\t\t);\n\t\tif (exprInfo) {\n\t\t\tswitch (exprInfo.type) {\n\t\t\t\tcase \"expression\": {\n\t\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t\tif (result1 === true) return;\n\t\t\t\t\tconst members = exprInfo.getMembers();\n\t\t\t\t\tconst membersOptionals = exprInfo.getMembersOptionals();\n\t\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expressionMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\tmembers,\n\t\t\t\t\t\tmembersOptionals\n\t\t\t\t\t);\n\t\t\t\t\tif (result2 === true) return;\n\t\t\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\tmembers.slice(),\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\t\t\tthis.hooks.unhandledExpressionMemberChain,\n\t\t\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\t\t\texpression,\n\t\t\t\t\t\t\t\tmembers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcase \"call\": {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.memberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t\t// Fast skip over the member chain as we already called memberChainOfCallMemberChain\n\t\t\t\t\t// and call computed property are literals anyway\n\t\t\t\t\tthis.walkExpression(exprInfo.call);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.object);\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\twalkMemberExpressionWithExpressionName(\n\t\texpression,\n\t\tname,\n\t\trootInfo,\n\t\tmembers,\n\t\tonUnhandled\n\t) {\n\t\tif (expression.object.type === \"MemberExpression\") {\n\t\t\t// optimize the case where expression.object is a MemberExpression too.\n\t\t\t// we can keep info here when calling walkMemberExpression directly\n\t\t\tconst property =\n\t\t\t\texpression.property.name || `${expression.property.value}`;\n\t\t\tname = name.slice(0, -property.length - 1);\n\t\t\tmembers.pop();\n\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\tthis.hooks.expression,\n\t\t\t\tname,\n\t\t\t\texpression.object\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\texpression.object,\n\t\t\t\tname,\n\t\t\t\trootInfo,\n\t\t\t\tmembers,\n\t\t\t\tonUnhandled\n\t\t\t);\n\t\t} else if (!onUnhandled || !onUnhandled()) {\n\t\t\tthis.walkExpression(expression.object);\n\t\t}\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\twalkThisExpression(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, \"this\", expression);\n\t}\n\n\twalkIdentifier(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, expression.name, expression);\n\t}\n\n\t/**\n\t * @param {MetaPropertyNode} metaProperty meta property\n\t */\n\twalkMetaProperty(metaProperty) {\n\t\tthis.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n\t}\n\n\tcallHooksForExpression(hookMap, expr, ...args) {\n\t\treturn this.callHooksForExpressionWithFallback(\n\t\t\thookMap,\n\t\t\texpr,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {MemberExpressionNode} expr expression info\n\t * @param {function(string, string | ScopeInfo | VariableInfo, function(): string[]): any} fallback callback when variable in not handled by hooks\n\t * @param {function(string): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForExpressionWithFallback(\n\t\thookMap,\n\t\texpr,\n\t\tfallback,\n\t\tdefined,\n\t\t...args\n\t) {\n\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\texpr,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t\tif (exprName !== undefined) {\n\t\t\tconst members = exprName.getMembers();\n\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\thookMap,\n\t\t\t\tmembers.length === 0 ? exprName.rootInfo : exprName.name,\n\t\t\t\tfallback &&\n\t\t\t\t\t(name => fallback(name, exprName.rootInfo, exprName.getMembers)),\n\t\t\t\tdefined && (() => defined(exprName.name)),\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForName(hookMap, name, ...args) {\n\t\treturn this.callHooksForNameWithFallback(\n\t\t\thookMap,\n\t\t\tname,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param  {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForInfo(hookMap, info, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tinfo,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param {function(string): any} fallback callback when variable in not handled by hooks\n\t * @param {function(): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForInfoWithFallback(hookMap, info, fallback, defined, ...args) {\n\t\tlet name;\n\t\tif (typeof info === \"string\") {\n\t\t\tname = info;\n\t\t} else {\n\t\t\tif (!(info instanceof VariableInfo)) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tconst hook = hookMap.get(tagInfo.tag);\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\tthis.currentTagData = tagInfo.data;\n\t\t\t\t\tconst result = hook.call(...args);\n\t\t\t\t\tthis.currentTagData = undefined;\n\t\t\t\t\tif (result !== undefined) return result;\n\t\t\t\t}\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t\tif (info.freeName === true) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tname = info.freeName;\n\t\t}\n\t\tconst hook = hookMap.get(name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(...args);\n\t\t\tif (result !== undefined) return result;\n\t\t}\n\t\tif (fallback !== undefined) {\n\t\t\treturn fallback(name);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {function(string): any} fallback callback when variable in not handled by hooks\n\t * @param {function(): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForNameWithFallback(hookMap, name, fallback, defined, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tthis.getVariableInfo(name),\n\t\t\tfallback,\n\t\t\tdefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated\n\t * @param {any} params scope params\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinScope(params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tthis.undefineVariable(\"this\");\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tinFunctionScope(hasThis, params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tif (hasThis) {\n\t\t\tthis.undefineVariable(\"this\");\n\t\t}\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tinBlockScope(fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: oldScope.inTry,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tdetectMode(statements) {\n\t\tconst isLiteral =\n\t\t\tstatements.length >= 1 &&\n\t\t\tstatements[0].type === \"ExpressionStatement\" &&\n\t\t\tstatements[0].expression.type === \"Literal\";\n\t\tif (isLiteral && statements[0].expression.value === \"use strict\") {\n\t\t\tthis.scope.isStrict = true;\n\t\t}\n\t\tif (isLiteral && statements[0].expression.value === \"use asm\") {\n\t\t\tthis.scope.isAsmJs = true;\n\t\t}\n\t}\n\n\tenterPatterns(patterns, onIdent) {\n\t\tfor (const pattern of patterns) {\n\t\t\tif (typeof pattern !== \"string\") {\n\t\t\t\tthis.enterPattern(pattern, onIdent);\n\t\t\t} else if (pattern) {\n\t\t\t\tonIdent(pattern);\n\t\t\t}\n\t\t}\n\t}\n\n\tenterPattern(pattern, onIdent) {\n\t\tif (!pattern) return;\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.enterArrayPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.enterAssignmentPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.enterIdentifier(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.enterObjectPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.enterRestElement(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Property\":\n\t\t\t\tif (pattern.shorthand && pattern.value.type === \"Identifier\") {\n\t\t\t\t\tthis.scope.inShorthand = pattern.value.name;\n\t\t\t\t\tthis.enterIdentifier(pattern.value, onIdent);\n\t\t\t\t\tthis.scope.inShorthand = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.enterPattern(pattern.value, onIdent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tenterIdentifier(pattern, onIdent) {\n\t\tif (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n\t\t\tonIdent(pattern.name, pattern);\n\t\t}\n\t}\n\n\tenterObjectPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = pattern.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = pattern.properties[propIndex];\n\t\t\tthis.enterPattern(prop, onIdent);\n\t\t}\n\t}\n\n\tenterArrayPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet elementIndex = 0, len = pattern.elements.length;\n\t\t\telementIndex < len;\n\t\t\telementIndex++\n\t\t) {\n\t\t\tconst element = pattern.elements[elementIndex];\n\t\t\tthis.enterPattern(element, onIdent);\n\t\t}\n\t}\n\n\tenterRestElement(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.argument, onIdent);\n\t}\n\n\tenterAssignmentPattern(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.left, onIdent);\n\t}\n\n\t/**\n\t * @param {ExpressionNode} expression expression node\n\t * @returns {BasicEvaluatedExpression} evaluation result\n\t */\n\tevaluateExpression(expression) {\n\t\ttry {\n\t\t\tconst hook = this.hooks.evaluate.get(expression.type);\n\t\t\tif (hook !== undefined) {\n\t\t\t\tconst result = hook.call(expression);\n\t\t\t\tif (result !== undefined && result !== null) {\n\t\t\t\t\tresult.setExpression(expression);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\t// ignore error\n\t\t}\n\t\treturn new BasicEvaluatedExpression()\n\t\t\t.setRange(expression.range)\n\t\t\t.setExpression(expression);\n\t}\n\n\tparseString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tthis.parseString(expression.left) +\n\t\t\t\t\t\tthis.parseString(expression.right)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Literal\":\n\t\t\t\treturn expression.value + \"\";\n\t\t}\n\t\tthrow new Error(\n\t\t\texpression.type + \" is not supported as parameter for require\"\n\t\t);\n\t}\n\n\tparseCalculatedString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\tconst left = this.parseCalculatedString(expression.left);\n\t\t\t\t\tconst right = this.parseCalculatedString(expression.right);\n\t\t\t\t\tif (left.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: left.range,\n\t\t\t\t\t\t\tvalue: left.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (right.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [\n\t\t\t\t\t\t\t\tleft.range[0],\n\t\t\t\t\t\t\t\tright.range ? right.range[1] : left.range[1]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [left.range[0], right.range[1]],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: false,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\": {\n\t\t\t\tconst consequent = this.parseCalculatedString(expression.consequent);\n\t\t\t\tconst alternate = this.parseCalculatedString(expression.alternate);\n\t\t\t\tconst items = [];\n\t\t\t\tif (consequent.conditional) {\n\t\t\t\t\titems.push(...consequent.conditional);\n\t\t\t\t} else if (!consequent.code) {\n\t\t\t\t\titems.push(consequent);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (alternate.conditional) {\n\t\t\t\t\titems.push(...alternate.conditional);\n\t\t\t\t} else if (!alternate.code) {\n\t\t\t\t\titems.push(alternate);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\trange: undefined,\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tcode: true,\n\t\t\t\t\tconditional: items\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Literal\":\n\t\t\t\treturn {\n\t\t\t\t\trange: expression.range,\n\t\t\t\t\tvalue: expression.value + \"\",\n\t\t\t\t\tcode: false,\n\t\t\t\t\tconditional: false\n\t\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\trange: undefined,\n\t\t\tvalue: \"\",\n\t\t\tcode: true,\n\t\t\tconditional: false\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tlet ast;\n\t\tlet comments;\n\t\tconst semicolons = new Set();\n\t\tif (source === null) {\n\t\t\tthrow new Error(\"source must not be null\");\n\t\t}\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\t\tif (typeof source === \"object\") {\n\t\t\tast = /** @type {ProgramNode} */ (source);\n\t\t\tcomments = source.comments;\n\t\t} else {\n\t\t\tcomments = [];\n\t\t\tast = JavascriptParser._parse(source, {\n\t\t\t\tsourceType: this.sourceType,\n\t\t\t\tonComment: comments,\n\t\t\t\tonInsertedSemicolon: pos => semicolons.add(pos)\n\t\t\t});\n\t\t}\n\n\t\tconst oldScope = this.scope;\n\t\tconst oldState = this.state;\n\t\tconst oldComments = this.comments;\n\t\tconst oldSemicolons = this.semicolons;\n\t\tconst oldStatementPath = this.statementPath;\n\t\tconst oldPrevStatement = this.prevStatement;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: true,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: false,\n\t\t\tisAsmJs: false,\n\t\t\tdefinitions: new StackedMap()\n\t\t};\n\t\t/** @type {ParserState} */\n\t\tthis.state = state;\n\t\tthis.comments = comments;\n\t\tthis.semicolons = semicolons;\n\t\tthis.statementPath = [];\n\t\tthis.prevStatement = undefined;\n\t\tif (this.hooks.program.call(ast, comments) === undefined) {\n\t\t\tthis.detectMode(ast.body);\n\t\t\tthis.preWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.blockPreWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.walkStatements(ast.body);\n\t\t}\n\t\tthis.hooks.finish.call(ast, comments);\n\t\tthis.scope = oldScope;\n\t\t/** @type {ParserState} */\n\t\tthis.state = oldState;\n\t\tthis.comments = oldComments;\n\t\tthis.semicolons = oldSemicolons;\n\t\tthis.statementPath = oldStatementPath;\n\t\tthis.prevStatement = oldPrevStatement;\n\t\treturn state;\n\t}\n\n\t/**\n\t * @param {string} source source code\n\t * @returns {BasicEvaluatedExpression} evaluation result\n\t */\n\tevaluate(source) {\n\t\tconst ast = JavascriptParser._parse(\"(\" + source + \")\", {\n\t\t\tsourceType: this.sourceType,\n\t\t\tlocations: false\n\t\t});\n\t\tif (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n\t\t\tthrow new Error(\"evaluate: Source is not a expression\");\n\t\t}\n\t\treturn this.evaluateExpression(ast.body[0].expression);\n\t}\n\n\t/**\n\t * @param {ExpressionNode | DeclarationNode | PrivateIdentifierNode | null | undefined} expr an expression\n\t * @param {number} commentsStartPos source position from which annotation comments are checked\n\t * @returns {boolean} true, when the expression is pure\n\t */\n\tisPure(expr, commentsStartPos) {\n\t\tif (!expr) return true;\n\t\tconst result = this.hooks.isPure\n\t\t\t.for(expr.type)\n\t\t\t.call(expr, commentsStartPos);\n\t\tif (typeof result === \"boolean\") return result;\n\t\tswitch (expr.type) {\n\t\t\tcase \"ClassDeclaration\":\n\t\t\tcase \"ClassExpression\": {\n\t\t\t\tif (expr.body.type !== \"ClassBody\") return false;\n\t\t\t\tif (expr.superClass && !this.isPure(expr.superClass, expr.range[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst items =\n\t\t\t\t\t/** @type {(MethodDefinitionNode | PropertyDefinitionNode)[]} */ (\n\t\t\t\t\t\texpr.body.body\n\t\t\t\t\t);\n\t\t\t\treturn items.every(\n\t\t\t\t\titem =>\n\t\t\t\t\t\t(!item.computed ||\n\t\t\t\t\t\t\t!item.key ||\n\t\t\t\t\t\t\tthis.isPure(item.key, item.range[0])) &&\n\t\t\t\t\t\t(!item.static ||\n\t\t\t\t\t\t\t!item.value ||\n\t\t\t\t\t\t\tthis.isPure(\n\t\t\t\t\t\t\t\titem.value,\n\t\t\t\t\t\t\t\titem.key ? item.key.range[1] : item.range[0]\n\t\t\t\t\t\t\t))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\tcase \"FunctionExpression\":\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\tcase \"Literal\":\n\t\t\tcase \"PrivateIdentifier\":\n\t\t\t\treturn true;\n\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\treturn expr.declarations.every(decl =>\n\t\t\t\t\tthis.isPure(decl.init, decl.range[0])\n\t\t\t\t);\n\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\treturn (\n\t\t\t\t\tthis.isPure(expr.test, commentsStartPos) &&\n\t\t\t\t\tthis.isPure(expr.consequent, expr.test.range[1]) &&\n\t\t\t\t\tthis.isPure(expr.alternate, expr.consequent.range[1])\n\t\t\t\t);\n\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\treturn expr.expressions.every(expr => {\n\t\t\t\t\tconst pureFlag = this.isPure(expr, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = expr.range[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tconst pureFlag =\n\t\t\t\t\texpr.range[0] - commentsStartPos > 12 &&\n\t\t\t\t\tthis.getComments([commentsStartPos, expr.range[0]]).some(\n\t\t\t\t\t\tcomment =>\n\t\t\t\t\t\t\tcomment.type === \"Block\" &&\n\t\t\t\t\t\t\t/^\\s*(#|@)__PURE__\\s*$/.test(comment.value)\n\t\t\t\t\t);\n\t\t\t\tif (!pureFlag) return false;\n\t\t\t\tcommentsStartPos = expr.callee.range[1];\n\t\t\t\treturn expr.arguments.every(arg => {\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return false;\n\t\t\t\t\tconst pureFlag = this.isPure(arg, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = arg.range[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst evaluated = this.evaluateExpression(expr);\n\t\treturn !evaluated.couldHaveSideEffects();\n\t}\n\n\tgetComments(range) {\n\t\tconst [rangeStart, rangeEnd] = range;\n\t\tconst compare = (comment, needle) => comment.range[0] - needle;\n\t\tlet idx = binarySearchBounds.ge(this.comments, rangeStart, compare);\n\t\tlet commentsInRange = [];\n\t\twhile (this.comments[idx] && this.comments[idx].range[1] <= rangeEnd) {\n\t\t\tcommentsInRange.push(this.comments[idx]);\n\t\t\tidx++;\n\t\t}\n\n\t\treturn commentsInRange;\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n\t */\n\tisAsiPosition(pos) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (currentStatement === undefined) throw new Error(\"Not in statement\");\n\t\treturn (\n\t\t\t// Either asking directly for the end position of the current statement\n\t\t\t(currentStatement.range[1] === pos && this.semicolons.has(pos)) ||\n\t\t\t// Or asking for the start position of the current statement,\n\t\t\t// here we have to check multiple things\n\t\t\t(currentStatement.range[0] === pos &&\n\t\t\t\t// is there a previous statement which might be relevant?\n\t\t\t\tthis.prevStatement !== undefined &&\n\t\t\t\t// is the end position of the previous statement an ASI position?\n\t\t\t\tthis.semicolons.has(this.prevStatement.range[1]))\n\t\t);\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {void}\n\t */\n\tunsetAsiPosition(pos) {\n\t\tthis.semicolons.delete(pos);\n\t}\n\n\tisStatementLevelExpression(expr) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\treturn (\n\t\t\texpr === currentStatement ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expr)\n\t\t);\n\t}\n\n\tgetTagData(name, tag) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info instanceof VariableInfo) {\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tif (tagInfo.tag === tag) return tagInfo.data;\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t}\n\t}\n\n\ttagVariable(name, tag, data) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t/** @type {VariableInfo} */\n\t\tlet newInfo;\n\t\tif (oldInfo === undefined) {\n\t\t\tnewInfo = new VariableInfo(this.scope, name, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t} else if (oldInfo instanceof VariableInfo) {\n\t\t\tnewInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: oldInfo.tagInfo\n\t\t\t});\n\t\t} else {\n\t\t\tnewInfo = new VariableInfo(oldInfo, true, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t}\n\t\tthis.scope.definitions.set(name, newInfo);\n\t}\n\n\tdefineVariable(name) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t// Don't redefine variable in same scope to keep existing tags\n\t\tif (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope)\n\t\t\treturn;\n\t\tthis.scope.definitions.set(name, this.scope);\n\t}\n\n\tundefineVariable(name) {\n\t\tthis.scope.definitions.delete(name);\n\t}\n\n\tisVariableDefined(name) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info === undefined) return false;\n\t\tif (info instanceof VariableInfo) {\n\t\t\treturn info.freeName === true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @returns {ExportedVariableInfo} info for this variable\n\t */\n\tgetVariableInfo(name) {\n\t\tconst value = this.scope.definitions.get(name);\n\t\tif (value === undefined) {\n\t\t\treturn name;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @param {ExportedVariableInfo} variableInfo new info for this variable\n\t * @returns {void}\n\t */\n\tsetVariable(name, variableInfo) {\n\t\tif (typeof variableInfo === \"string\") {\n\t\t\tif (variableInfo === name) {\n\t\t\t\tthis.scope.definitions.delete(name);\n\t\t\t} else {\n\t\t\t\tthis.scope.definitions.set(\n\t\t\t\t\tname,\n\t\t\t\t\tnew VariableInfo(this.scope, variableInfo, undefined)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.scope.definitions.set(name, variableInfo);\n\t\t}\n\t}\n\n\tevaluatedVariable(tagInfo) {\n\t\treturn new VariableInfo(this.scope, undefined, tagInfo);\n\t}\n\n\tparseCommentOptions(range) {\n\t\tconst comments = this.getComments(range);\n\t\tif (comments.length === 0) {\n\t\t\treturn EMPTY_COMMENT_OPTIONS;\n\t\t}\n\t\tlet options = {};\n\t\t/** @type {unknown[]} */\n\t\tlet errors = [];\n\t\tfor (const comment of comments) {\n\t\t\tconst { value } = comment;\n\t\t\tif (value && webpackCommentRegExp.test(value)) {\n\t\t\t\t// try compile only if webpack options comment is present\n\t\t\t\ttry {\n\t\t\t\t\tfor (let [key, val] of Object.entries(\n\t\t\t\t\t\tvm.runInNewContext(`(function(){return {${value}};})()`)\n\t\t\t\t\t)) {\n\t\t\t\t\t\tif (typeof val === \"object\" && val !== null) {\n\t\t\t\t\t\t\tif (val.constructor.name === \"RegExp\") val = new RegExp(val);\n\t\t\t\t\t\t\telse val = JSON.parse(JSON.stringify(val));\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptions[key] = val;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst newErr = new Error(String(e.message));\n\t\t\t\t\tnewErr.stack = String(e.stack);\n\t\t\t\t\tObject.assign(newErr, { comment });\n\t\t\t\t\terrors.push(newErr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { options, errors };\n\t}\n\n\t/**\n\t * @param {MemberExpressionNode} expression a member expression\n\t * @returns {{ members: string[], object: ExpressionNode | SuperNode, membersOptionals: boolean[] }} member names (reverse order) and remaining object\n\t */\n\textractMemberExpressionChain(expression) {\n\t\t/** @type {AnyNode} */\n\t\tlet expr = expression;\n\t\tconst members = [];\n\t\tconst membersOptionals = [];\n\t\twhile (expr.type === \"MemberExpression\") {\n\t\t\tif (expr.computed) {\n\t\t\t\tif (expr.property.type !== \"Literal\") break;\n\t\t\t\tmembers.push(`${expr.property.value}`);\n\t\t\t} else {\n\t\t\t\tif (expr.property.type !== \"Identifier\") break;\n\t\t\t\tmembers.push(expr.property.name);\n\t\t\t}\n\t\t\tmembersOptionals.push(expr.optional);\n\t\t\texpr = expr.object;\n\t\t}\n\n\t\treturn {\n\t\t\tmembers,\n\t\t\tmembersOptionals,\n\t\t\tobject: expr\n\t\t};\n\t}\n\n\t/**\n\t * @param {string} varName variable name\n\t * @returns {{name: string, info: VariableInfo | string}} name of the free variable and variable info for that\n\t */\n\tgetFreeInfoFromVariable(varName) {\n\t\tconst info = this.getVariableInfo(varName);\n\t\tlet name;\n\t\tif (info instanceof VariableInfo) {\n\t\t\tname = info.freeName;\n\t\t\tif (typeof name !== \"string\") return undefined;\n\t\t} else if (typeof info !== \"string\") {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tname = info;\n\t\t}\n\t\treturn { info, name };\n\t}\n\n\t/** @typedef {{ type: \"call\", call: CallExpressionNode, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[], getMembersOptionals: () => boolean[]}} CallExpressionInfo */\n\t/** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[], getMembersOptionals: () => boolean[]}} ExpressionExpressionInfo */\n\n\t/**\n\t * @param {MemberExpressionNode} expression a member expression\n\t * @param {number} allowedTypes which types should be returned, presented in bit mask\n\t * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n\t */\n\tgetMemberExpressionInfo(expression, allowedTypes) {\n\t\tconst { object, members, membersOptionals } =\n\t\t\tthis.extractMemberExpressionChain(expression);\n\t\tswitch (object.type) {\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tlet callee = object.callee;\n\t\t\t\tlet rootMembers = EMPTY_ARRAY;\n\t\t\t\tif (callee.type === \"MemberExpression\") {\n\t\t\t\t\t({ object: callee, members: rootMembers } =\n\t\t\t\t\t\tthis.extractMemberExpressionChain(callee));\n\t\t\t\t}\n\t\t\t\tconst rootName = getRootName(callee);\n\t\t\t\tif (!rootName) return undefined;\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\tconst calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"call\",\n\t\t\t\t\tcall: object,\n\t\t\t\t\tcalleeName,\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetCalleeMembers: memoize(() => rootMembers.reverse()),\n\t\t\t\t\tname: objectAndMembersToName(`${calleeName}()`, members),\n\t\t\t\t\tgetMembers: memoize(() => members.reverse()),\n\t\t\t\t\tgetMembersOptionals: memoize(() => membersOptionals.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Identifier\":\n\t\t\tcase \"MetaProperty\":\n\t\t\tcase \"ThisExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tconst rootName = getRootName(object);\n\t\t\t\tif (!rootName) return undefined;\n\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"expression\",\n\t\t\t\t\tname: objectAndMembersToName(resolvedRoot, members),\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetMembers: memoize(() => members.reverse()),\n\t\t\t\t\tgetMembersOptionals: memoize(() => membersOptionals.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {MemberExpressionNode} expression an expression\n\t * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]}} name info\n\t */\n\tgetNameForExpression(expression) {\n\t\treturn this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} code source code\n\t * @param {ParseOptions} options parsing options\n\t * @returns {ProgramNode} parsed ast\n\t */\n\tstatic _parse(code, options) {\n\t\tconst type = options ? options.sourceType : \"module\";\n\t\t/** @type {AcornOptions} */\n\t\tconst parserOptions = {\n\t\t\t...defaultParserOptions,\n\t\t\tallowReturnOutsideFunction: type === \"script\",\n\t\t\t...options,\n\t\t\tsourceType: type === \"auto\" ? \"module\" : type\n\t\t};\n\n\t\t/** @type {AnyNode} */\n\t\tlet ast;\n\t\tlet error;\n\t\tlet threw = false;\n\t\ttry {\n\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t\tthrew = true;\n\t\t}\n\n\t\tif (threw && type === \"auto\") {\n\t\t\tparserOptions.sourceType = \"script\";\n\t\t\tif (!(\"allowReturnOutsideFunction\" in options)) {\n\t\t\t\tparserOptions.allowReturnOutsideFunction = true;\n\t\t\t}\n\t\t\tif (Array.isArray(parserOptions.onComment)) {\n\t\t\t\tparserOptions.onComment.length = 0;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t\t\tthrew = false;\n\t\t\t} catch (e) {\n\t\t\t\t// we use the error from first parse try\n\t\t\t\t// so nothing to do here\n\t\t\t}\n\t\t}\n\n\t\tif (threw) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn /** @type {ProgramNode} */ (ast);\n\t}\n}\n\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}